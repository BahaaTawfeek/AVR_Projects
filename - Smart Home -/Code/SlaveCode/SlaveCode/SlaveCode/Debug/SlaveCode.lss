
SlaveCode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000dfa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000dfa  00000e8e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800062  00800062  00000e90  2**0
                  ALLOC
  3 .stab         00001bcc  00000000  00000000  00000e90  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000583  00000000  00000000  00002a5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000120  00000000  00000000  00002fe0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ba0  00000000  00000000  00003100  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000042b  00000000  00000000  00003ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000076f  00000000  00000000  000040cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002a4  00000000  00000000  0000483c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ef  00000000  00000000  00004ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000939  00000000  00000000  00004ecf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 5b 04 	jmp	0x8b6	; 0x8b6 <__vector_10>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	9a 03       	fmulsu	r17, r18
  56:	b8 03       	fmulsu	r19, r16
  58:	d6 03       	fmuls	r21, r22
  5a:	f4 03       	fmuls	r23, r20
  5c:	12 04       	cpc	r1, r2
  5e:	30 04       	cpc	r3, r0
  60:	89 03       	fmulsu	r16, r17
  62:	89 03       	fmulsu	r16, r17
  64:	89 03       	fmulsu	r16, r17
  66:	89 03       	fmulsu	r16, r17
  68:	89 03       	fmulsu	r16, r17
  6a:	89 03       	fmulsu	r16, r17
  6c:	89 03       	fmulsu	r16, r17
  6e:	89 03       	fmulsu	r16, r17
  70:	89 03       	fmulsu	r16, r17
  72:	89 03       	fmulsu	r16, r17
  74:	ae 03       	fmulsu	r18, r22
  76:	cc 03       	fmulsu	r20, r20
  78:	ea 03       	fmulsu	r22, r18
  7a:	08 04       	cpc	r0, r8
  7c:	26 04       	cpc	r2, r6
  7e:	44 04       	cpc	r4, r4
  80:	89 03       	fmulsu	r16, r17
  82:	89 03       	fmulsu	r16, r17
  84:	89 03       	fmulsu	r16, r17
  86:	89 03       	fmulsu	r16, r17
  88:	89 03       	fmulsu	r16, r17
  8a:	89 03       	fmulsu	r16, r17
  8c:	89 03       	fmulsu	r16, r17
  8e:	89 03       	fmulsu	r16, r17
  90:	89 03       	fmulsu	r16, r17
  92:	89 03       	fmulsu	r16, r17
  94:	b3 03       	fmuls	r19, r19
  96:	d1 03       	fmuls	r21, r17
  98:	ef 03       	fmulsu	r22, r23
  9a:	0d 04       	cpc	r0, r13
  9c:	2b 04       	cpc	r2, r11
  9e:	4b 04       	cpc	r4, r11
  a0:	89 03       	fmulsu	r16, r17
  a2:	89 03       	fmulsu	r16, r17
  a4:	89 03       	fmulsu	r16, r17
  a6:	89 03       	fmulsu	r16, r17
  a8:	89 03       	fmulsu	r16, r17
  aa:	89 03       	fmulsu	r16, r17
  ac:	89 03       	fmulsu	r16, r17
  ae:	89 03       	fmulsu	r16, r17
  b0:	89 03       	fmulsu	r16, r17
  b2:	52 04       	cpc	r5, r2

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf e5       	ldi	r28, 0x5F	; 95
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	10 e0       	ldi	r17, 0x00	; 0
  c2:	a0 e6       	ldi	r26, 0x60	; 96
  c4:	b0 e0       	ldi	r27, 0x00	; 0
  c6:	ea ef       	ldi	r30, 0xFA	; 250
  c8:	fd e0       	ldi	r31, 0x0D	; 13
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a2 36       	cpi	r26, 0x62	; 98
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	10 e0       	ldi	r17, 0x00	; 0
  d8:	a2 e6       	ldi	r26, 0x62	; 98
  da:	b0 e0       	ldi	r27, 0x00	; 0
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a6 36       	cpi	r26, 0x66	; 102
  e2:	b1 07       	cpc	r27, r17
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 68 03 	call	0x6d0	; 0x6d0 <main>
  ea:	0c 94 fb 06 	jmp	0xdf6	; 0xdf6 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <ADC_vinit>:

/*	Function Description : Initialize ADC          */
void ADC_vinit(void)
{
	/*configure VREF to the internal voltage(2.56 V)*/
	SetBit(ADMUX,REFS0);
  f2:	3e 9a       	sbi	0x07, 6	; 7
	SetBit(ADMUX,REFS1);
  f4:	3f 9a       	sbi	0x07, 7	; 7
	
	SetBit(ADCSRA,ADEN); // enable ADC
  f6:	37 9a       	sbi	0x06, 7	; 6
   /* adjust ADC clock =ps=64  */
	SetBit(ADCSRA,ADPS2);
  f8:	32 9a       	sbi	0x06, 2	; 6
	SetBit(ADCSRA,ADPS1);
  fa:	31 9a       	sbi	0x06, 1	; 6
}
  fc:	08 95       	ret

000000fe <ADC_u16Read>:
/*	Function Description : read ADC value after conversion         */
 unsigned short ADC_u16Read( unsigned char pinnumber )
{
	 unsigned short read_val;

	ADMUX |=pinnumber;    // Select the input to the ADC (channel)
  fe:	97 b1       	in	r25, 0x07	; 7
 100:	89 2b       	or	r24, r25
 102:	87 b9       	out	0x07, r24	; 7
	
	SetBit(ADCSRA,ADSC); // Start conversion 
 104:	36 9a       	sbi	0x06, 6	; 6
	while(Is_Bit_Clear(ADCSRA,ADIF));//stay in your position till ADIF become 1
 106:	34 9b       	sbis	0x06, 4	; 6
 108:	fe cf       	rjmp	.-4      	; 0x106 <ADC_u16Read+0x8>
// Stay here till the H.W raise the ADC Flag after end of conversion 
// while((ADCSRA&(1<<ADIF))==0);     or     while (!(ADCSRA & (1<<ADIF)));

	SetBit(ADCSRA,ADIF); // clear ADIF
 10a:	34 9a       	sbi	0x06, 4	; 6
	read_val=(ADCL);
 10c:	84 b1       	in	r24, 0x04	; 4
 10e:	90 e0       	ldi	r25, 0x00	; 0
	read_val|=(ADCH<<8);
 110:	45 b1       	in	r20, 0x05	; 5
 112:	34 2f       	mov	r19, r20
 114:	20 e0       	ldi	r18, 0x00	; 0
 116:	82 2b       	or	r24, r18
 118:	93 2b       	or	r25, r19
	return read_val ;    // return the value that been read after conversion
 11a:	08 95       	ret

0000011c <DIO_vsetPinDir>:
 *Function Description : Set the direction of the given pin in the given port (direction 0 = input : 1 = output)
 */

void DIO_vsetPinDir(unsigned char portname,unsigned char pinnumber,unsigned char direction)
{
	switch(portname)
 11c:	82 34       	cpi	r24, 0x42	; 66
 11e:	51 f1       	breq	.+84     	; 0x174 <DIO_vsetPinDir+0x58>
 120:	83 34       	cpi	r24, 0x43	; 67
 122:	20 f4       	brcc	.+8      	; 0x12c <DIO_vsetPinDir+0x10>
 124:	81 34       	cpi	r24, 0x41	; 65
 126:	09 f0       	breq	.+2      	; 0x12a <DIO_vsetPinDir+0xe>
 128:	7b c0       	rjmp	.+246    	; 0x220 <DIO_vsetPinDir+0x104>
 12a:	07 c0       	rjmp	.+14     	; 0x13a <DIO_vsetPinDir+0x1e>
 12c:	83 34       	cpi	r24, 0x43	; 67
 12e:	09 f4       	brne	.+2      	; 0x132 <DIO_vsetPinDir+0x16>
 130:	3e c0       	rjmp	.+124    	; 0x1ae <DIO_vsetPinDir+0x92>
 132:	84 34       	cpi	r24, 0x44	; 68
 134:	09 f0       	breq	.+2      	; 0x138 <DIO_vsetPinDir+0x1c>
 136:	74 c0       	rjmp	.+232    	; 0x220 <DIO_vsetPinDir+0x104>
 138:	57 c0       	rjmp	.+174    	; 0x1e8 <DIO_vsetPinDir+0xcc>
	{
		case 'A':
		if (direction == 1)
 13a:	41 30       	cpi	r20, 0x01	; 1
 13c:	69 f4       	brne	.+26     	; 0x158 <DIO_vsetPinDir+0x3c>
			{
				SetBit(DDRA,pinnumber);     //Set the direction 1 = output of the given pin in port A as output
 13e:	2a b3       	in	r18, 0x1a	; 26
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	ac 01       	movw	r20, r24
 146:	02 c0       	rjmp	.+4      	; 0x14c <DIO_vsetPinDir+0x30>
 148:	44 0f       	add	r20, r20
 14a:	55 1f       	adc	r21, r21
 14c:	6a 95       	dec	r22
 14e:	e2 f7       	brpl	.-8      	; 0x148 <DIO_vsetPinDir+0x2c>
 150:	ba 01       	movw	r22, r20
 152:	62 2b       	or	r22, r18
 154:	6a bb       	out	0x1a, r22	; 26
 156:	08 95       	ret
			}
		else
			{
				ClearBit(DDRA,pinnumber);    //Set the direction 0 = input of the given pin in port A as input
 158:	2a b3       	in	r18, 0x1a	; 26
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	ac 01       	movw	r20, r24
 160:	02 c0       	rjmp	.+4      	; 0x166 <DIO_vsetPinDir+0x4a>
 162:	44 0f       	add	r20, r20
 164:	55 1f       	adc	r21, r21
 166:	6a 95       	dec	r22
 168:	e2 f7       	brpl	.-8      	; 0x162 <DIO_vsetPinDir+0x46>
 16a:	ba 01       	movw	r22, r20
 16c:	60 95       	com	r22
 16e:	62 23       	and	r22, r18
 170:	6a bb       	out	0x1a, r22	; 26
 172:	08 95       	ret
			}
		break;	
				  	
				  
		case 'B':
		if (direction == 1)
 174:	41 30       	cpi	r20, 0x01	; 1
 176:	69 f4       	brne	.+26     	; 0x192 <DIO_vsetPinDir+0x76>
			{
				SetBit(DDRB,pinnumber);     //Set the direction 1 = output of the given pin in port B as output
 178:	27 b3       	in	r18, 0x17	; 23
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	ac 01       	movw	r20, r24
 180:	02 c0       	rjmp	.+4      	; 0x186 <DIO_vsetPinDir+0x6a>
 182:	44 0f       	add	r20, r20
 184:	55 1f       	adc	r21, r21
 186:	6a 95       	dec	r22
 188:	e2 f7       	brpl	.-8      	; 0x182 <DIO_vsetPinDir+0x66>
 18a:	ba 01       	movw	r22, r20
 18c:	62 2b       	or	r22, r18
 18e:	67 bb       	out	0x17, r22	; 23
 190:	08 95       	ret
			}
		else
			{
				ClearBit(DDRB,pinnumber);    //Set the direction 0 = input of the given pin in port B as input
 192:	27 b3       	in	r18, 0x17	; 23
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	ac 01       	movw	r20, r24
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <DIO_vsetPinDir+0x84>
 19c:	44 0f       	add	r20, r20
 19e:	55 1f       	adc	r21, r21
 1a0:	6a 95       	dec	r22
 1a2:	e2 f7       	brpl	.-8      	; 0x19c <DIO_vsetPinDir+0x80>
 1a4:	ba 01       	movw	r22, r20
 1a6:	60 95       	com	r22
 1a8:	62 23       	and	r22, r18
 1aa:	67 bb       	out	0x17, r22	; 23
 1ac:	08 95       	ret
			}
		break;
				
		case 'C':
		if (direction == 1)
 1ae:	41 30       	cpi	r20, 0x01	; 1
 1b0:	69 f4       	brne	.+26     	; 0x1cc <DIO_vsetPinDir+0xb0>
			{
				SetBit(DDRC,pinnumber);     //Set the direction 1 = output of the given pin in port C as output
 1b2:	24 b3       	in	r18, 0x14	; 20
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	ac 01       	movw	r20, r24
 1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <DIO_vsetPinDir+0xa4>
 1bc:	44 0f       	add	r20, r20
 1be:	55 1f       	adc	r21, r21
 1c0:	6a 95       	dec	r22
 1c2:	e2 f7       	brpl	.-8      	; 0x1bc <DIO_vsetPinDir+0xa0>
 1c4:	ba 01       	movw	r22, r20
 1c6:	62 2b       	or	r22, r18
 1c8:	64 bb       	out	0x14, r22	; 20
 1ca:	08 95       	ret
			}
		else
			{
				ClearBit(DDRC,pinnumber);    //Set the direction 0 = input of the given pin in port C as input
 1cc:	24 b3       	in	r18, 0x14	; 20
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	ac 01       	movw	r20, r24
 1d4:	02 c0       	rjmp	.+4      	; 0x1da <DIO_vsetPinDir+0xbe>
 1d6:	44 0f       	add	r20, r20
 1d8:	55 1f       	adc	r21, r21
 1da:	6a 95       	dec	r22
 1dc:	e2 f7       	brpl	.-8      	; 0x1d6 <DIO_vsetPinDir+0xba>
 1de:	ba 01       	movw	r22, r20
 1e0:	60 95       	com	r22
 1e2:	62 23       	and	r22, r18
 1e4:	64 bb       	out	0x14, r22	; 20
 1e6:	08 95       	ret
			}
		break;
				
		case 'D':
		if (direction == 1)
 1e8:	41 30       	cpi	r20, 0x01	; 1
 1ea:	69 f4       	brne	.+26     	; 0x206 <DIO_vsetPinDir+0xea>
			{
				SetBit(DDRD,pinnumber);     //Set the direction 1 = output of the given pin in port D as output
 1ec:	21 b3       	in	r18, 0x11	; 17
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	ac 01       	movw	r20, r24
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <DIO_vsetPinDir+0xde>
 1f6:	44 0f       	add	r20, r20
 1f8:	55 1f       	adc	r21, r21
 1fa:	6a 95       	dec	r22
 1fc:	e2 f7       	brpl	.-8      	; 0x1f6 <DIO_vsetPinDir+0xda>
 1fe:	ba 01       	movw	r22, r20
 200:	62 2b       	or	r22, r18
 202:	61 bb       	out	0x11, r22	; 17
 204:	08 95       	ret
			}
		else
			{
				ClearBit(DDRD,pinnumber);    //Set the direction  0 = input of the given pin in port D as input
 206:	21 b3       	in	r18, 0x11	; 17
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	ac 01       	movw	r20, r24
 20e:	02 c0       	rjmp	.+4      	; 0x214 <DIO_vsetPinDir+0xf8>
 210:	44 0f       	add	r20, r20
 212:	55 1f       	adc	r21, r21
 214:	6a 95       	dec	r22
 216:	e2 f7       	brpl	.-8      	; 0x210 <DIO_vsetPinDir+0xf4>
 218:	ba 01       	movw	r22, r20
 21a:	60 95       	com	r22
 21c:	62 23       	and	r22, r18
 21e:	61 bb       	out	0x11, r22	; 17
 220:	08 95       	ret

00000222 <DIO_vsetPortDir>:
 *Function Description : set the direction of whole port . (port direction 0 = input port : 1 = output port)
 */

void DIO_vsetPortDir(unsigned char portname,unsigned char direction)
{
	switch(portname)
 222:	82 34       	cpi	r24, 0x42	; 66
 224:	61 f0       	breq	.+24     	; 0x23e <DIO_vsetPortDir+0x1c>
 226:	83 34       	cpi	r24, 0x43	; 67
 228:	18 f4       	brcc	.+6      	; 0x230 <DIO_vsetPortDir+0xe>
 22a:	81 34       	cpi	r24, 0x41	; 65
 22c:	69 f4       	brne	.+26     	; 0x248 <DIO_vsetPortDir+0x26>
 22e:	05 c0       	rjmp	.+10     	; 0x23a <DIO_vsetPortDir+0x18>
 230:	83 34       	cpi	r24, 0x43	; 67
 232:	39 f0       	breq	.+14     	; 0x242 <DIO_vsetPortDir+0x20>
 234:	84 34       	cpi	r24, 0x44	; 68
 236:	41 f4       	brne	.+16     	; 0x248 <DIO_vsetPortDir+0x26>
 238:	06 c0       	rjmp	.+12     	; 0x246 <DIO_vsetPortDir+0x24>
	{
		case 'A':
		DDRA=direction;    //set the direction of port A		
 23a:	6a bb       	out	0x1a, r22	; 26
		break;
 23c:	08 95       	ret
		
		case 'B':
		DDRB=direction;    //set the direction of port B
 23e:	67 bb       	out	0x17, r22	; 23
		break;
 240:	08 95       	ret
		
		case 'C':
		DDRC=direction;    //set the direction of port C
 242:	64 bb       	out	0x14, r22	; 20
		break;
 244:	08 95       	ret
		
		case 'D':
		DDRD=direction;    //set the direction of port D	
 246:	61 bb       	out	0x11, r22	; 17
 248:	08 95       	ret

0000024a <DIO_vwritePin>:
 *Function Description : Set the value of the given pin in the given port (outputvalue 0 = low : 1 = high)
 */

void DIO_vwritePin(unsigned char portname,unsigned char pinnumber,unsigned char value)
{
	switch(portname)
 24a:	82 34       	cpi	r24, 0x42	; 66
 24c:	51 f1       	breq	.+84     	; 0x2a2 <DIO_vwritePin+0x58>
 24e:	83 34       	cpi	r24, 0x43	; 67
 250:	20 f4       	brcc	.+8      	; 0x25a <DIO_vwritePin+0x10>
 252:	81 34       	cpi	r24, 0x41	; 65
 254:	09 f0       	breq	.+2      	; 0x258 <DIO_vwritePin+0xe>
 256:	7b c0       	rjmp	.+246    	; 0x34e <DIO_vwritePin+0x104>
 258:	07 c0       	rjmp	.+14     	; 0x268 <DIO_vwritePin+0x1e>
 25a:	83 34       	cpi	r24, 0x43	; 67
 25c:	09 f4       	brne	.+2      	; 0x260 <DIO_vwritePin+0x16>
 25e:	3e c0       	rjmp	.+124    	; 0x2dc <DIO_vwritePin+0x92>
 260:	84 34       	cpi	r24, 0x44	; 68
 262:	09 f0       	breq	.+2      	; 0x266 <DIO_vwritePin+0x1c>
 264:	74 c0       	rjmp	.+232    	; 0x34e <DIO_vwritePin+0x104>
 266:	57 c0       	rjmp	.+174    	; 0x316 <DIO_vwritePin+0xcc>
	{
		case 'A':
		if (value==1)
 268:	41 30       	cpi	r20, 0x01	; 1
 26a:	69 f4       	brne	.+26     	; 0x286 <DIO_vwritePin+0x3c>
		{
			SetBit(PORTA,pinnumber);  //Set the value of the given pin in port A as High
 26c:	2b b3       	in	r18, 0x1b	; 27
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	ac 01       	movw	r20, r24
 274:	02 c0       	rjmp	.+4      	; 0x27a <DIO_vwritePin+0x30>
 276:	44 0f       	add	r20, r20
 278:	55 1f       	adc	r21, r21
 27a:	6a 95       	dec	r22
 27c:	e2 f7       	brpl	.-8      	; 0x276 <DIO_vwritePin+0x2c>
 27e:	ba 01       	movw	r22, r20
 280:	62 2b       	or	r22, r18
 282:	6b bb       	out	0x1b, r22	; 27
 284:	08 95       	ret
		}
		else
		{
			ClearBit(PORTA,pinnumber);  //Set the value of the given pin in port A as Low
 286:	2b b3       	in	r18, 0x1b	; 27
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	ac 01       	movw	r20, r24
 28e:	02 c0       	rjmp	.+4      	; 0x294 <DIO_vwritePin+0x4a>
 290:	44 0f       	add	r20, r20
 292:	55 1f       	adc	r21, r21
 294:	6a 95       	dec	r22
 296:	e2 f7       	brpl	.-8      	; 0x290 <DIO_vwritePin+0x46>
 298:	ba 01       	movw	r22, r20
 29a:	60 95       	com	r22
 29c:	62 23       	and	r22, r18
 29e:	6b bb       	out	0x1b, r22	; 27
 2a0:	08 95       	ret
		}
		break;
		
		case 'B':
		if (value==1)
 2a2:	41 30       	cpi	r20, 0x01	; 1
 2a4:	69 f4       	brne	.+26     	; 0x2c0 <DIO_vwritePin+0x76>
		{
			SetBit(PORTB,pinnumber);  //Set the value of the given pin in port B as High
 2a6:	28 b3       	in	r18, 0x18	; 24
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	ac 01       	movw	r20, r24
 2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <DIO_vwritePin+0x6a>
 2b0:	44 0f       	add	r20, r20
 2b2:	55 1f       	adc	r21, r21
 2b4:	6a 95       	dec	r22
 2b6:	e2 f7       	brpl	.-8      	; 0x2b0 <DIO_vwritePin+0x66>
 2b8:	ba 01       	movw	r22, r20
 2ba:	62 2b       	or	r22, r18
 2bc:	68 bb       	out	0x18, r22	; 24
 2be:	08 95       	ret
		}
		else
		{
			ClearBit(PORTB,pinnumber);  //Set the value of the given pin in port B as Low
 2c0:	28 b3       	in	r18, 0x18	; 24
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	ac 01       	movw	r20, r24
 2c8:	02 c0       	rjmp	.+4      	; 0x2ce <DIO_vwritePin+0x84>
 2ca:	44 0f       	add	r20, r20
 2cc:	55 1f       	adc	r21, r21
 2ce:	6a 95       	dec	r22
 2d0:	e2 f7       	brpl	.-8      	; 0x2ca <DIO_vwritePin+0x80>
 2d2:	ba 01       	movw	r22, r20
 2d4:	60 95       	com	r22
 2d6:	62 23       	and	r22, r18
 2d8:	68 bb       	out	0x18, r22	; 24
 2da:	08 95       	ret
		}
		break;
		
		case 'C':
		if (value==1)
 2dc:	41 30       	cpi	r20, 0x01	; 1
 2de:	69 f4       	brne	.+26     	; 0x2fa <DIO_vwritePin+0xb0>
		{
			SetBit(PORTC,pinnumber);  //Set the value of the given pin in port C as High
 2e0:	25 b3       	in	r18, 0x15	; 21
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	ac 01       	movw	r20, r24
 2e8:	02 c0       	rjmp	.+4      	; 0x2ee <DIO_vwritePin+0xa4>
 2ea:	44 0f       	add	r20, r20
 2ec:	55 1f       	adc	r21, r21
 2ee:	6a 95       	dec	r22
 2f0:	e2 f7       	brpl	.-8      	; 0x2ea <DIO_vwritePin+0xa0>
 2f2:	ba 01       	movw	r22, r20
 2f4:	62 2b       	or	r22, r18
 2f6:	65 bb       	out	0x15, r22	; 21
 2f8:	08 95       	ret
		}
		else
		{
			ClearBit(PORTC,pinnumber);  //Set the value of the given pin in port C as Low
 2fa:	25 b3       	in	r18, 0x15	; 21
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	ac 01       	movw	r20, r24
 302:	02 c0       	rjmp	.+4      	; 0x308 <DIO_vwritePin+0xbe>
 304:	44 0f       	add	r20, r20
 306:	55 1f       	adc	r21, r21
 308:	6a 95       	dec	r22
 30a:	e2 f7       	brpl	.-8      	; 0x304 <DIO_vwritePin+0xba>
 30c:	ba 01       	movw	r22, r20
 30e:	60 95       	com	r22
 310:	62 23       	and	r22, r18
 312:	65 bb       	out	0x15, r22	; 21
 314:	08 95       	ret
		}
		break;
		
		case 'D':
		if (value==1)
 316:	41 30       	cpi	r20, 0x01	; 1
 318:	69 f4       	brne	.+26     	; 0x334 <DIO_vwritePin+0xea>
		{
			SetBit(PORTD,pinnumber);  //Set the value of the given pin in port D as High
 31a:	22 b3       	in	r18, 0x12	; 18
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	ac 01       	movw	r20, r24
 322:	02 c0       	rjmp	.+4      	; 0x328 <DIO_vwritePin+0xde>
 324:	44 0f       	add	r20, r20
 326:	55 1f       	adc	r21, r21
 328:	6a 95       	dec	r22
 32a:	e2 f7       	brpl	.-8      	; 0x324 <DIO_vwritePin+0xda>
 32c:	ba 01       	movw	r22, r20
 32e:	62 2b       	or	r22, r18
 330:	62 bb       	out	0x12, r22	; 18
 332:	08 95       	ret
		}
		else
		{
			ClearBit(PORTD,pinnumber);  //Set the value of the given pin in port D as Low
 334:	22 b3       	in	r18, 0x12	; 18
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	ac 01       	movw	r20, r24
 33c:	02 c0       	rjmp	.+4      	; 0x342 <DIO_vwritePin+0xf8>
 33e:	44 0f       	add	r20, r20
 340:	55 1f       	adc	r21, r21
 342:	6a 95       	dec	r22
 344:	e2 f7       	brpl	.-8      	; 0x33e <DIO_vwritePin+0xf4>
 346:	ba 01       	movw	r22, r20
 348:	60 95       	com	r22
 34a:	62 23       	and	r22, r18
 34c:	62 bb       	out	0x12, r22	; 18
 34e:	08 95       	ret

00000350 <DIO_vwritePort>:
 *Function Description : Write the value to all port pins (outputvalue 0 = low : 1 = high)
 */

void DIO_vwritePort(unsigned char portname,unsigned char value)
{
	switch(portname)
 350:	82 34       	cpi	r24, 0x42	; 66
 352:	61 f0       	breq	.+24     	; 0x36c <DIO_vwritePort+0x1c>
 354:	83 34       	cpi	r24, 0x43	; 67
 356:	18 f4       	brcc	.+6      	; 0x35e <DIO_vwritePort+0xe>
 358:	81 34       	cpi	r24, 0x41	; 65
 35a:	69 f4       	brne	.+26     	; 0x376 <DIO_vwritePort+0x26>
 35c:	05 c0       	rjmp	.+10     	; 0x368 <DIO_vwritePort+0x18>
 35e:	83 34       	cpi	r24, 0x43	; 67
 360:	39 f0       	breq	.+14     	; 0x370 <DIO_vwritePort+0x20>
 362:	84 34       	cpi	r24, 0x44	; 68
 364:	41 f4       	brne	.+16     	; 0x376 <DIO_vwritePort+0x26>
 366:	06 c0       	rjmp	.+12     	; 0x374 <DIO_vwritePort+0x24>
	{
		case 'A':
		PORTA=value;   //Write the given value to the port A
 368:	6b bb       	out	0x1b, r22	; 27
		break;
 36a:	08 95       	ret
		
		case 'B':
		PORTB=value;   //Write the given value to the port B
 36c:	68 bb       	out	0x18, r22	; 24
		break;
 36e:	08 95       	ret
		
		case 'C':
		PORTC=value;   //Write the given value to the port C
 370:	65 bb       	out	0x15, r22	; 21
		break;
 372:	08 95       	ret
		
		case 'D':
		PORTD=value;   //Write the given value to the port D
 374:	62 bb       	out	0x12, r22	; 18
 376:	08 95       	ret

00000378 <DIO_u8readPin>:
 */

unsigned char DIO_u8readPin(unsigned char portname,unsigned char pinnumber)
{
	unsigned char return_value=0;
	switch(portname)
 378:	82 34       	cpi	r24, 0x42	; 66
 37a:	f1 f0       	breq	.+60     	; 0x3b8 <DIO_u8readPin+0x40>
 37c:	83 34       	cpi	r24, 0x43	; 67
 37e:	20 f4       	brcc	.+8      	; 0x388 <DIO_u8readPin+0x10>
 380:	81 34       	cpi	r24, 0x41	; 65
 382:	09 f0       	breq	.+2      	; 0x386 <DIO_u8readPin+0xe>
 384:	4f c0       	rjmp	.+158    	; 0x424 <DIO_u8readPin+0xac>
 386:	06 c0       	rjmp	.+12     	; 0x394 <DIO_u8readPin+0x1c>
 388:	83 34       	cpi	r24, 0x43	; 67
 38a:	41 f1       	breq	.+80     	; 0x3dc <DIO_u8readPin+0x64>
 38c:	84 34       	cpi	r24, 0x44	; 68
 38e:	09 f0       	breq	.+2      	; 0x392 <DIO_u8readPin+0x1a>
 390:	49 c0       	rjmp	.+146    	; 0x424 <DIO_u8readPin+0xac>
 392:	36 c0       	rjmp	.+108    	; 0x400 <DIO_u8readPin+0x88>
	{
		case 'A':
		return_value = ReadBit(PINA,pinnumber);   //Read the value from the given pin in port A
 394:	29 b3       	in	r18, 0x19	; 25
 396:	81 e0       	ldi	r24, 0x01	; 1
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	06 2e       	mov	r0, r22
 39c:	02 c0       	rjmp	.+4      	; 0x3a2 <DIO_u8readPin+0x2a>
 39e:	88 0f       	add	r24, r24
 3a0:	99 1f       	adc	r25, r25
 3a2:	0a 94       	dec	r0
 3a4:	e2 f7       	brpl	.-8      	; 0x39e <DIO_u8readPin+0x26>
 3a6:	30 e0       	ldi	r19, 0x00	; 0
 3a8:	82 23       	and	r24, r18
 3aa:	93 23       	and	r25, r19
 3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <DIO_u8readPin+0x3a>
 3ae:	95 95       	asr	r25
 3b0:	87 95       	ror	r24
 3b2:	6a 95       	dec	r22
 3b4:	e2 f7       	brpl	.-8      	; 0x3ae <DIO_u8readPin+0x36>
		break;
 3b6:	08 95       	ret
		
		case 'B':
		return_value = ReadBit(PINB,pinnumber);   //Read the value from the given pin in port B
 3b8:	26 b3       	in	r18, 0x16	; 22
 3ba:	81 e0       	ldi	r24, 0x01	; 1
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	06 2e       	mov	r0, r22
 3c0:	02 c0       	rjmp	.+4      	; 0x3c6 <DIO_u8readPin+0x4e>
 3c2:	88 0f       	add	r24, r24
 3c4:	99 1f       	adc	r25, r25
 3c6:	0a 94       	dec	r0
 3c8:	e2 f7       	brpl	.-8      	; 0x3c2 <DIO_u8readPin+0x4a>
 3ca:	30 e0       	ldi	r19, 0x00	; 0
 3cc:	82 23       	and	r24, r18
 3ce:	93 23       	and	r25, r19
 3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <DIO_u8readPin+0x5e>
 3d2:	95 95       	asr	r25
 3d4:	87 95       	ror	r24
 3d6:	6a 95       	dec	r22
 3d8:	e2 f7       	brpl	.-8      	; 0x3d2 <DIO_u8readPin+0x5a>
		break;
 3da:	08 95       	ret
		
		case 'C':
		return_value = ReadBit(PINC,pinnumber);   //Read the value from the given pin in port C
 3dc:	23 b3       	in	r18, 0x13	; 19
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	06 2e       	mov	r0, r22
 3e4:	02 c0       	rjmp	.+4      	; 0x3ea <DIO_u8readPin+0x72>
 3e6:	88 0f       	add	r24, r24
 3e8:	99 1f       	adc	r25, r25
 3ea:	0a 94       	dec	r0
 3ec:	e2 f7       	brpl	.-8      	; 0x3e6 <DIO_u8readPin+0x6e>
 3ee:	30 e0       	ldi	r19, 0x00	; 0
 3f0:	82 23       	and	r24, r18
 3f2:	93 23       	and	r25, r19
 3f4:	02 c0       	rjmp	.+4      	; 0x3fa <DIO_u8readPin+0x82>
 3f6:	95 95       	asr	r25
 3f8:	87 95       	ror	r24
 3fa:	6a 95       	dec	r22
 3fc:	e2 f7       	brpl	.-8      	; 0x3f6 <DIO_u8readPin+0x7e>
		break;
 3fe:	08 95       	ret
		
		case 'D':
		return_value = ReadBit(PIND,pinnumber);   //Read the value from the given pin in port D
 400:	20 b3       	in	r18, 0x10	; 16
 402:	81 e0       	ldi	r24, 0x01	; 1
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	06 2e       	mov	r0, r22
 408:	02 c0       	rjmp	.+4      	; 0x40e <DIO_u8readPin+0x96>
 40a:	88 0f       	add	r24, r24
 40c:	99 1f       	adc	r25, r25
 40e:	0a 94       	dec	r0
 410:	e2 f7       	brpl	.-8      	; 0x40a <DIO_u8readPin+0x92>
 412:	30 e0       	ldi	r19, 0x00	; 0
 414:	82 23       	and	r24, r18
 416:	93 23       	and	r25, r19
 418:	02 c0       	rjmp	.+4      	; 0x41e <DIO_u8readPin+0xa6>
 41a:	95 95       	asr	r25
 41c:	87 95       	ror	r24
 41e:	6a 95       	dec	r22
 420:	e2 f7       	brpl	.-8      	; 0x41a <DIO_u8readPin+0xa2>
		break;
 422:	08 95       	ret
 *Function Description : Returns 1 if the value of the given pin is high and zero if the value is low
 */

unsigned char DIO_u8readPin(unsigned char portname,unsigned char pinnumber)
{
	unsigned char return_value=0;
 424:	80 e0       	ldi	r24, 0x00	; 0
								
	}	// end of switch 
		
	return return_value;
	
}// end of Function	
 426:	08 95       	ret

00000428 <DIO_u8readPort>:
 */

unsigned char DIO_u8readPort(unsigned char portname)
{
	unsigned char return_val=0;
	switch(portname)
 428:	82 34       	cpi	r24, 0x42	; 66
 42a:	61 f0       	breq	.+24     	; 0x444 <DIO_u8readPort+0x1c>
 42c:	83 34       	cpi	r24, 0x43	; 67
 42e:	18 f4       	brcc	.+6      	; 0x436 <DIO_u8readPort+0xe>
 430:	81 34       	cpi	r24, 0x41	; 65
 432:	71 f4       	brne	.+28     	; 0x450 <DIO_u8readPort+0x28>
 434:	05 c0       	rjmp	.+10     	; 0x440 <DIO_u8readPort+0x18>
 436:	83 34       	cpi	r24, 0x43	; 67
 438:	39 f0       	breq	.+14     	; 0x448 <DIO_u8readPort+0x20>
 43a:	84 34       	cpi	r24, 0x44	; 68
 43c:	49 f4       	brne	.+18     	; 0x450 <DIO_u8readPort+0x28>
 43e:	06 c0       	rjmp	.+12     	; 0x44c <DIO_u8readPort+0x24>
	{
		case 'A':
		return_val = PINA; // read the value of port A
 440:	89 b3       	in	r24, 0x19	; 25
		break;
 442:	08 95       	ret
		
		case 'B':
		return_val = PINB; // read the value of port B
 444:	86 b3       	in	r24, 0x16	; 22
		break;
 446:	08 95       	ret
		
		case 'C':
		return_val = PINC; // read the value of port C
 448:	83 b3       	in	r24, 0x13	; 19
		break;
 44a:	08 95       	ret
		
		case 'D':
		return_val = PIND; // read the value of port D
 44c:	80 b3       	in	r24, 0x10	; 16
		break;
 44e:	08 95       	ret
 *Function Description : Read the value of the given  port
 */

unsigned char DIO_u8readPort(unsigned char portname)
{
	unsigned char return_val=0;
 450:	80 e0       	ldi	r24, 0x00	; 0
		
	}// end of switch 
		
	return return_val;
	
}// end of Function	
 452:	08 95       	ret

00000454 <DIO_vtogglePin>:
 *Function Description : Reverse the value of the given pin in the given port.
 */

void DIO_vtogglePin(unsigned char portname,unsigned char pinnumber)
{
	switch(portname)
 454:	82 34       	cpi	r24, 0x42	; 66
 456:	b9 f0       	breq	.+46     	; 0x486 <DIO_vtogglePin+0x32>
 458:	83 34       	cpi	r24, 0x43	; 67
 45a:	18 f4       	brcc	.+6      	; 0x462 <DIO_vtogglePin+0xe>
 45c:	81 34       	cpi	r24, 0x41	; 65
 45e:	c9 f5       	brne	.+114    	; 0x4d2 <DIO_vtogglePin+0x7e>
 460:	05 c0       	rjmp	.+10     	; 0x46c <DIO_vtogglePin+0x18>
 462:	83 34       	cpi	r24, 0x43	; 67
 464:	e9 f0       	breq	.+58     	; 0x4a0 <DIO_vtogglePin+0x4c>
 466:	84 34       	cpi	r24, 0x44	; 68
 468:	a1 f5       	brne	.+104    	; 0x4d2 <DIO_vtogglePin+0x7e>
 46a:	27 c0       	rjmp	.+78     	; 0x4ba <DIO_vtogglePin+0x66>
	{
		case 'A':
		ToggleBit(PORTA,pinnumber);   //Toggle the value of the given pin in port A
 46c:	2b b3       	in	r18, 0x1b	; 27
 46e:	81 e0       	ldi	r24, 0x01	; 1
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	ac 01       	movw	r20, r24
 474:	02 c0       	rjmp	.+4      	; 0x47a <DIO_vtogglePin+0x26>
 476:	44 0f       	add	r20, r20
 478:	55 1f       	adc	r21, r21
 47a:	6a 95       	dec	r22
 47c:	e2 f7       	brpl	.-8      	; 0x476 <DIO_vtogglePin+0x22>
 47e:	ba 01       	movw	r22, r20
 480:	62 27       	eor	r22, r18
 482:	6b bb       	out	0x1b, r22	; 27
		break;
 484:	08 95       	ret
		
		case 'B':
		ToggleBit(PORTB,pinnumber);   //Toggle the value of the given pin in port B
 486:	28 b3       	in	r18, 0x18	; 24
 488:	81 e0       	ldi	r24, 0x01	; 1
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	ac 01       	movw	r20, r24
 48e:	02 c0       	rjmp	.+4      	; 0x494 <DIO_vtogglePin+0x40>
 490:	44 0f       	add	r20, r20
 492:	55 1f       	adc	r21, r21
 494:	6a 95       	dec	r22
 496:	e2 f7       	brpl	.-8      	; 0x490 <DIO_vtogglePin+0x3c>
 498:	ba 01       	movw	r22, r20
 49a:	62 27       	eor	r22, r18
 49c:	68 bb       	out	0x18, r22	; 24
		break;
 49e:	08 95       	ret
		
		case 'C':
		ToggleBit(PORTC,pinnumber);   //Toggle the value of the given pin in port C
 4a0:	25 b3       	in	r18, 0x15	; 21
 4a2:	81 e0       	ldi	r24, 0x01	; 1
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	ac 01       	movw	r20, r24
 4a8:	02 c0       	rjmp	.+4      	; 0x4ae <DIO_vtogglePin+0x5a>
 4aa:	44 0f       	add	r20, r20
 4ac:	55 1f       	adc	r21, r21
 4ae:	6a 95       	dec	r22
 4b0:	e2 f7       	brpl	.-8      	; 0x4aa <DIO_vtogglePin+0x56>
 4b2:	ba 01       	movw	r22, r20
 4b4:	62 27       	eor	r22, r18
 4b6:	65 bb       	out	0x15, r22	; 21
		break;
 4b8:	08 95       	ret
		
		case 'D':
		ToggleBit(PORTD,pinnumber);   //Toggle the value of the given pin in port D
 4ba:	22 b3       	in	r18, 0x12	; 18
 4bc:	81 e0       	ldi	r24, 0x01	; 1
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	ac 01       	movw	r20, r24
 4c2:	02 c0       	rjmp	.+4      	; 0x4c8 <DIO_vtogglePin+0x74>
 4c4:	44 0f       	add	r20, r20
 4c6:	55 1f       	adc	r21, r21
 4c8:	6a 95       	dec	r22
 4ca:	e2 f7       	brpl	.-8      	; 0x4c4 <DIO_vtogglePin+0x70>
 4cc:	ba 01       	movw	r22, r20
 4ce:	62 27       	eor	r22, r18
 4d0:	62 bb       	out	0x12, r22	; 18
 4d2:	08 95       	ret

000004d4 <DIO_vtogglePort>:
 *Function Description : Reverse the value of the given port.
 */

void DIO_vtogglePort(unsigned char portname)
{
	switch(portname)
 4d4:	82 34       	cpi	r24, 0x42	; 66
 4d6:	71 f0       	breq	.+28     	; 0x4f4 <DIO_vtogglePort+0x20>
 4d8:	83 34       	cpi	r24, 0x43	; 67
 4da:	18 f4       	brcc	.+6      	; 0x4e2 <DIO_vtogglePort+0xe>
 4dc:	81 34       	cpi	r24, 0x41	; 65
 4de:	a9 f4       	brne	.+42     	; 0x50a <DIO_vtogglePort+0x36>
 4e0:	05 c0       	rjmp	.+10     	; 0x4ec <DIO_vtogglePort+0x18>
 4e2:	83 34       	cpi	r24, 0x43	; 67
 4e4:	59 f0       	breq	.+22     	; 0x4fc <DIO_vtogglePort+0x28>
 4e6:	84 34       	cpi	r24, 0x44	; 68
 4e8:	81 f4       	brne	.+32     	; 0x50a <DIO_vtogglePort+0x36>
 4ea:	0c c0       	rjmp	.+24     	; 0x504 <DIO_vtogglePort+0x30>
	{
		case 'A':
		PORTA=~PORTA;
 4ec:	8b b3       	in	r24, 0x1b	; 27
 4ee:	80 95       	com	r24
 4f0:	8b bb       	out	0x1b, r24	; 27
		break;
 4f2:	08 95       	ret
		
		case 'B':
		PORTB=~PORTB;
 4f4:	88 b3       	in	r24, 0x18	; 24
 4f6:	80 95       	com	r24
 4f8:	88 bb       	out	0x18, r24	; 24
		break;
 4fa:	08 95       	ret
		
		case 'C':
		PORTC=~PORTC;
 4fc:	85 b3       	in	r24, 0x15	; 21
 4fe:	80 95       	com	r24
 500:	85 bb       	out	0x15, r24	; 21
		break;
 502:	08 95       	ret
		
		case 'D':
		PORTD=~PORTD;
 504:	82 b3       	in	r24, 0x12	; 18
 506:	80 95       	com	r24
 508:	82 bb       	out	0x12, r24	; 18
 50a:	08 95       	ret

0000050c <DIO_vconnectPullup>:
 *Function Description  : Connect and disconnect pull up resistor to the given pin at the given port 
 */

void DIO_vconnectPullup(char portname ,char pinnumber, char connect_pullup)
{
	switch(portname)
 50c:	82 34       	cpi	r24, 0x42	; 66
 50e:	51 f1       	breq	.+84     	; 0x564 <DIO_vconnectPullup+0x58>
 510:	83 34       	cpi	r24, 0x43	; 67
 512:	20 f4       	brcc	.+8      	; 0x51c <DIO_vconnectPullup+0x10>
 514:	81 34       	cpi	r24, 0x41	; 65
 516:	09 f0       	breq	.+2      	; 0x51a <DIO_vconnectPullup+0xe>
 518:	7b c0       	rjmp	.+246    	; 0x610 <DIO_vconnectPullup+0x104>
 51a:	07 c0       	rjmp	.+14     	; 0x52a <DIO_vconnectPullup+0x1e>
 51c:	83 34       	cpi	r24, 0x43	; 67
 51e:	09 f4       	brne	.+2      	; 0x522 <DIO_vconnectPullup+0x16>
 520:	3e c0       	rjmp	.+124    	; 0x59e <DIO_vconnectPullup+0x92>
 522:	84 34       	cpi	r24, 0x44	; 68
 524:	09 f0       	breq	.+2      	; 0x528 <DIO_vconnectPullup+0x1c>
 526:	74 c0       	rjmp	.+232    	; 0x610 <DIO_vconnectPullup+0x104>
 528:	57 c0       	rjmp	.+174    	; 0x5d8 <DIO_vconnectPullup+0xcc>
	{
		case 'A':
		if(connect_pullup==1)
 52a:	41 30       	cpi	r20, 0x01	; 1
 52c:	69 f4       	brne	.+26     	; 0x548 <DIO_vconnectPullup+0x3c>
		{
			SetBit(PORTA,pinnumber);
 52e:	2b b3       	in	r18, 0x1b	; 27
 530:	81 e0       	ldi	r24, 0x01	; 1
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	ac 01       	movw	r20, r24
 536:	02 c0       	rjmp	.+4      	; 0x53c <DIO_vconnectPullup+0x30>
 538:	44 0f       	add	r20, r20
 53a:	55 1f       	adc	r21, r21
 53c:	6a 95       	dec	r22
 53e:	e2 f7       	brpl	.-8      	; 0x538 <DIO_vconnectPullup+0x2c>
 540:	ba 01       	movw	r22, r20
 542:	62 2b       	or	r22, r18
 544:	6b bb       	out	0x1b, r22	; 27
 546:	08 95       	ret
		}
		else
		{
			ClearBit(PORTA,pinnumber);
 548:	2b b3       	in	r18, 0x1b	; 27
 54a:	81 e0       	ldi	r24, 0x01	; 1
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	ac 01       	movw	r20, r24
 550:	02 c0       	rjmp	.+4      	; 0x556 <DIO_vconnectPullup+0x4a>
 552:	44 0f       	add	r20, r20
 554:	55 1f       	adc	r21, r21
 556:	6a 95       	dec	r22
 558:	e2 f7       	brpl	.-8      	; 0x552 <DIO_vconnectPullup+0x46>
 55a:	ba 01       	movw	r22, r20
 55c:	60 95       	com	r22
 55e:	62 23       	and	r22, r18
 560:	6b bb       	out	0x1b, r22	; 27
 562:	08 95       	ret
		}
		break;
		
		case 'B':
		if(connect_pullup==1)
 564:	41 30       	cpi	r20, 0x01	; 1
 566:	69 f4       	brne	.+26     	; 0x582 <DIO_vconnectPullup+0x76>
		{
			SetBit(PORTB,pinnumber);
 568:	28 b3       	in	r18, 0x18	; 24
 56a:	81 e0       	ldi	r24, 0x01	; 1
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	ac 01       	movw	r20, r24
 570:	02 c0       	rjmp	.+4      	; 0x576 <DIO_vconnectPullup+0x6a>
 572:	44 0f       	add	r20, r20
 574:	55 1f       	adc	r21, r21
 576:	6a 95       	dec	r22
 578:	e2 f7       	brpl	.-8      	; 0x572 <DIO_vconnectPullup+0x66>
 57a:	ba 01       	movw	r22, r20
 57c:	62 2b       	or	r22, r18
 57e:	68 bb       	out	0x18, r22	; 24
 580:	08 95       	ret
		}
		else
		{
			ClearBit(PORTB,pinnumber);
 582:	28 b3       	in	r18, 0x18	; 24
 584:	81 e0       	ldi	r24, 0x01	; 1
 586:	90 e0       	ldi	r25, 0x00	; 0
 588:	ac 01       	movw	r20, r24
 58a:	02 c0       	rjmp	.+4      	; 0x590 <DIO_vconnectPullup+0x84>
 58c:	44 0f       	add	r20, r20
 58e:	55 1f       	adc	r21, r21
 590:	6a 95       	dec	r22
 592:	e2 f7       	brpl	.-8      	; 0x58c <DIO_vconnectPullup+0x80>
 594:	ba 01       	movw	r22, r20
 596:	60 95       	com	r22
 598:	62 23       	and	r22, r18
 59a:	68 bb       	out	0x18, r22	; 24
 59c:	08 95       	ret
		}
		break;
		
		case 'C':
		if(connect_pullup==1)
 59e:	41 30       	cpi	r20, 0x01	; 1
 5a0:	69 f4       	brne	.+26     	; 0x5bc <DIO_vconnectPullup+0xb0>
		{
			SetBit(PORTC,pinnumber);
 5a2:	25 b3       	in	r18, 0x15	; 21
 5a4:	81 e0       	ldi	r24, 0x01	; 1
 5a6:	90 e0       	ldi	r25, 0x00	; 0
 5a8:	ac 01       	movw	r20, r24
 5aa:	02 c0       	rjmp	.+4      	; 0x5b0 <DIO_vconnectPullup+0xa4>
 5ac:	44 0f       	add	r20, r20
 5ae:	55 1f       	adc	r21, r21
 5b0:	6a 95       	dec	r22
 5b2:	e2 f7       	brpl	.-8      	; 0x5ac <DIO_vconnectPullup+0xa0>
 5b4:	ba 01       	movw	r22, r20
 5b6:	62 2b       	or	r22, r18
 5b8:	65 bb       	out	0x15, r22	; 21
 5ba:	08 95       	ret
			
		}
		else
		{
			ClearBit(PORTC,pinnumber);
 5bc:	25 b3       	in	r18, 0x15	; 21
 5be:	81 e0       	ldi	r24, 0x01	; 1
 5c0:	90 e0       	ldi	r25, 0x00	; 0
 5c2:	ac 01       	movw	r20, r24
 5c4:	02 c0       	rjmp	.+4      	; 0x5ca <DIO_vconnectPullup+0xbe>
 5c6:	44 0f       	add	r20, r20
 5c8:	55 1f       	adc	r21, r21
 5ca:	6a 95       	dec	r22
 5cc:	e2 f7       	brpl	.-8      	; 0x5c6 <DIO_vconnectPullup+0xba>
 5ce:	ba 01       	movw	r22, r20
 5d0:	60 95       	com	r22
 5d2:	62 23       	and	r22, r18
 5d4:	65 bb       	out	0x15, r22	; 21
 5d6:	08 95       	ret
		}
		break;
		
		case 'D':
		if(connect_pullup==1)
 5d8:	41 30       	cpi	r20, 0x01	; 1
 5da:	69 f4       	brne	.+26     	; 0x5f6 <DIO_vconnectPullup+0xea>
		{
			SetBit(PORTD,pinnumber);
 5dc:	22 b3       	in	r18, 0x12	; 18
 5de:	81 e0       	ldi	r24, 0x01	; 1
 5e0:	90 e0       	ldi	r25, 0x00	; 0
 5e2:	ac 01       	movw	r20, r24
 5e4:	02 c0       	rjmp	.+4      	; 0x5ea <DIO_vconnectPullup+0xde>
 5e6:	44 0f       	add	r20, r20
 5e8:	55 1f       	adc	r21, r21
 5ea:	6a 95       	dec	r22
 5ec:	e2 f7       	brpl	.-8      	; 0x5e6 <DIO_vconnectPullup+0xda>
 5ee:	ba 01       	movw	r22, r20
 5f0:	62 2b       	or	r22, r18
 5f2:	62 bb       	out	0x12, r22	; 18
 5f4:	08 95       	ret
			
		}
		else
		{
			ClearBit(PORTD,pinnumber);
 5f6:	22 b3       	in	r18, 0x12	; 18
 5f8:	81 e0       	ldi	r24, 0x01	; 1
 5fa:	90 e0       	ldi	r25, 0x00	; 0
 5fc:	ac 01       	movw	r20, r24
 5fe:	02 c0       	rjmp	.+4      	; 0x604 <DIO_vconnectPullup+0xf8>
 600:	44 0f       	add	r20, r20
 602:	55 1f       	adc	r21, r21
 604:	6a 95       	dec	r22
 606:	e2 f7       	brpl	.-8      	; 0x600 <DIO_vconnectPullup+0xf4>
 608:	ba 01       	movw	r22, r20
 60a:	60 95       	com	r22
 60c:	62 23       	and	r22, r18
 60e:	62 bb       	out	0x12, r22	; 18
 610:	08 95       	ret

00000612 <DIO_vwrite_low_nibble>:
 *Function Description : write the first 4-bit of a value to the low nibble of the port  
 */

void DIO_vwrite_low_nibble(unsigned char portname,unsigned char value)
{
	value&=0x0f;      //  mask low nibble of value nnnn,nnnn and 0000,1111 =0000,nnnn
 612:	6f 70       	andi	r22, 0x0F	; 15
	switch(portname)
 614:	82 34       	cpi	r24, 0x42	; 66
 616:	81 f0       	breq	.+32     	; 0x638 <DIO_vwrite_low_nibble+0x26>
 618:	83 34       	cpi	r24, 0x43	; 67
 61a:	18 f4       	brcc	.+6      	; 0x622 <DIO_vwrite_low_nibble+0x10>
 61c:	81 34       	cpi	r24, 0x41	; 65
 61e:	f1 f4       	brne	.+60     	; 0x65c <DIO_vwrite_low_nibble+0x4a>
 620:	05 c0       	rjmp	.+10     	; 0x62c <DIO_vwrite_low_nibble+0x1a>
 622:	83 34       	cpi	r24, 0x43	; 67
 624:	79 f0       	breq	.+30     	; 0x644 <DIO_vwrite_low_nibble+0x32>
 626:	84 34       	cpi	r24, 0x44	; 68
 628:	c9 f4       	brne	.+50     	; 0x65c <DIO_vwrite_low_nibble+0x4a>
 62a:	12 c0       	rjmp	.+36     	; 0x650 <DIO_vwrite_low_nibble+0x3e>
	{
		case 'A':
		PORTA&=0xf0;   //  aaaa,aaaa and 1111,0000 = aaaa
 62c:	8b b3       	in	r24, 0x1b	; 27
 62e:	80 7f       	andi	r24, 0xF0	; 240
 630:	8b bb       	out	0x1b, r24	; 27
		PORTA|=value;  // aaaa,0000 or oooo,nnnn = aaaa,nnnn
 632:	8b b3       	in	r24, 0x1b	; 27
 634:	86 2b       	or	r24, r22
 636:	8b bb       	out	0x1b, r24	; 27
		case 'B':
		PORTB&=0xf0;
 638:	88 b3       	in	r24, 0x18	; 24
 63a:	80 7f       	andi	r24, 0xF0	; 240
 63c:	88 bb       	out	0x18, r24	; 24
		PORTB|=value;
 63e:	88 b3       	in	r24, 0x18	; 24
 640:	86 2b       	or	r24, r22
 642:	88 bb       	out	0x18, r24	; 24
		case 'C':
		PORTC&=0xf0;
 644:	85 b3       	in	r24, 0x15	; 21
 646:	80 7f       	andi	r24, 0xF0	; 240
 648:	85 bb       	out	0x15, r24	; 21
		PORTC|=value;
 64a:	85 b3       	in	r24, 0x15	; 21
 64c:	86 2b       	or	r24, r22
 64e:	85 bb       	out	0x15, r24	; 21
		case 'D':
		PORTD&=0xf0;
 650:	82 b3       	in	r24, 0x12	; 18
 652:	80 7f       	andi	r24, 0xF0	; 240
 654:	82 bb       	out	0x12, r24	; 18
		PORTD|=value;
 656:	82 b3       	in	r24, 0x12	; 18
 658:	68 2b       	or	r22, r24
 65a:	62 bb       	out	0x12, r22	; 18
 65c:	08 95       	ret

0000065e <DIO_vwrite_high_nibble>:
 */


void DIO_vwrite_high_nibble(unsigned char portname,unsigned char value)
{
	value<<=4;			// or value&=0xf0  mask high nibble of value nnnn,nnnn and 1111,0000 = nnnn,0000
 65e:	62 95       	swap	r22
 660:	60 7f       	andi	r22, 0xF0	; 240
	switch(portname)
 662:	82 34       	cpi	r24, 0x42	; 66
 664:	81 f0       	breq	.+32     	; 0x686 <DIO_vwrite_high_nibble+0x28>
 666:	83 34       	cpi	r24, 0x43	; 67
 668:	18 f4       	brcc	.+6      	; 0x670 <DIO_vwrite_high_nibble+0x12>
 66a:	81 34       	cpi	r24, 0x41	; 65
 66c:	f1 f4       	brne	.+60     	; 0x6aa <DIO_vwrite_high_nibble+0x4c>
 66e:	05 c0       	rjmp	.+10     	; 0x67a <DIO_vwrite_high_nibble+0x1c>
 670:	83 34       	cpi	r24, 0x43	; 67
 672:	79 f0       	breq	.+30     	; 0x692 <DIO_vwrite_high_nibble+0x34>
 674:	84 34       	cpi	r24, 0x44	; 68
 676:	c9 f4       	brne	.+50     	; 0x6aa <DIO_vwrite_high_nibble+0x4c>
 678:	12 c0       	rjmp	.+36     	; 0x69e <DIO_vwrite_high_nibble+0x40>
	{
		case 'A':
		PORTA&=0x0f;		//  aaaa,aaaa and 0000,1111 = 0000,aaaa 
 67a:	8b b3       	in	r24, 0x1b	; 27
 67c:	8f 70       	andi	r24, 0x0F	; 15
 67e:	8b bb       	out	0x1b, r24	; 27
		PORTA|=value;		// 0000,aaaa  or nnnn,0000 = nnnn,aaaa
 680:	8b b3       	in	r24, 0x1b	; 27
 682:	86 2b       	or	r24, r22
 684:	8b bb       	out	0x1b, r24	; 27
		case 'B':
		PORTB&=0x0f;
 686:	88 b3       	in	r24, 0x18	; 24
 688:	8f 70       	andi	r24, 0x0F	; 15
 68a:	88 bb       	out	0x18, r24	; 24
		PORTB|=value;
 68c:	88 b3       	in	r24, 0x18	; 24
 68e:	86 2b       	or	r24, r22
 690:	88 bb       	out	0x18, r24	; 24
		case 'C':
		PORTC&=0x0f;
 692:	85 b3       	in	r24, 0x15	; 21
 694:	8f 70       	andi	r24, 0x0F	; 15
 696:	85 bb       	out	0x15, r24	; 21
		PORTC|=value;
 698:	85 b3       	in	r24, 0x15	; 21
 69a:	86 2b       	or	r24, r22
 69c:	85 bb       	out	0x15, r24	; 21
		case 'D':
		PORTD&=0x0f;
 69e:	82 b3       	in	r24, 0x12	; 18
 6a0:	8f 70       	andi	r24, 0x0F	; 15
 6a2:	82 bb       	out	0x12, r24	; 18
		PORTD|=value;
 6a4:	82 b3       	in	r24, 0x12	; 18
 6a6:	68 2b       	or	r22, r24
 6a8:	62 bb       	out	0x12, r22	; 18
 6aa:	08 95       	ret

000006ac <LED_vInit>:
*  Author: Bahaa Tawfik
*/
#include "DIO.h"
void LED_vInit(unsigned char portname,unsigned char pinnumber)
{
	DIO_vsetPinDir(portname,pinnumber,1);//Set the given pin in the given port as an output
 6ac:	41 e0       	ldi	r20, 0x01	; 1
 6ae:	0e 94 8e 00 	call	0x11c	; 0x11c <DIO_vsetPinDir>
}
 6b2:	08 95       	ret

000006b4 <LED_vTurnOn>:
void LED_vTurnOn(unsigned char portname,unsigned char pinnumber)
{
	DIO_vwritePin(portname,pinnumber,1);//Set the given pin in the given port to one(on)
 6b4:	41 e0       	ldi	r20, 0x01	; 1
 6b6:	0e 94 25 01 	call	0x24a	; 0x24a <DIO_vwritePin>
}
 6ba:	08 95       	ret

000006bc <LED_vTurnOff>:
void LED_vTurnOff(unsigned char portname,unsigned char pinnumber)
{
	DIO_vwritePin(portname,pinnumber,0);//Set the given pin in the given port to zero(off)
 6bc:	40 e0       	ldi	r20, 0x00	; 0
 6be:	0e 94 25 01 	call	0x24a	; 0x24a <DIO_vwritePin>
}
 6c2:	08 95       	ret

000006c4 <LED_vToggle>:
void LED_vToggle(unsigned char portname,unsigned char pinnumber)
{
	DIO_vtogglePin(portname,pinnumber);//Set the given pin in the given port to zero if it is one or set it to one if it is zero
 6c4:	0e 94 2a 02 	call	0x454	; 0x454 <DIO_vtogglePin>
}
 6c8:	08 95       	ret

000006ca <LED_u8ReadStatus>:

unsigned char LED_u8ReadStatus(unsigned char portname,unsigned char pinnumber)
{
	return DIO_u8readPin(portname,pinnumber);//return the current status of the given pin
 6ca:	0e 94 bc 01 	call	0x378	; 0x378 <DIO_u8readPin>
}
 6ce:	08 95       	ret

000006d0 <main>:

int main(void)
{
	
	/*****************  INITIALIZE  ***********************/
	SPI_SlaveInit();//initialize the SPI as a slave
 6d0:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <SPI_SlaveInit>
	ADC_vinit();//initialize the ADC of the micro controller
 6d4:	0e 94 79 00 	call	0xf2	; 0xf2 <ADC_vinit>
	LED_vInit('D',2);//initialize Led of  AIR_COND_PIN 7
 6d8:	84 e4       	ldi	r24, 0x44	; 68
 6da:	62 e0       	ldi	r22, 0x02	; 2
 6dc:	0e 94 56 03 	call	0x6ac	; 0x6ac <LED_vInit>
	LED_vInit('D',3);//initialize Led of  TV_PIN 7
 6e0:	84 e4       	ldi	r24, 0x44	; 68
 6e2:	63 e0       	ldi	r22, 0x03	; 3
 6e4:	0e 94 56 03 	call	0x6ac	; 0x6ac <LED_vInit>
	LED_vInit('D',4);//initialize Led of  ROOM1_PIN 4
 6e8:	84 e4       	ldi	r24, 0x44	; 68
 6ea:	64 e0       	ldi	r22, 0x04	; 4
 6ec:	0e 94 56 03 	call	0x6ac	; 0x6ac <LED_vInit>
	LED_vInit('D',5);//initialize Led of  ROOM1_PIN 5
 6f0:	84 e4       	ldi	r24, 0x44	; 68
 6f2:	65 e0       	ldi	r22, 0x05	; 5
 6f4:	0e 94 56 03 	call	0x6ac	; 0x6ac <LED_vInit>
	LED_vInit('D',6);//initialize Led of  ROOM1_PIN 6
 6f8:	84 e4       	ldi	r24, 0x44	; 68
 6fa:	66 e0       	ldi	r22, 0x06	; 6
 6fc:	0e 94 56 03 	call	0x6ac	; 0x6ac <LED_vInit>
	LED_vInit('D',7);//initialize Led of  ROOM1_PIN 7
 700:	84 e4       	ldi	r24, 0x44	; 68
 702:	67 e0       	ldi	r22, 0x07	; 7
 704:	0e 94 56 03 	call	0x6ac	; 0x6ac <LED_vInit>
	timer0_initializeCTC();//Initialize the timer zero of the micro controller
 708:	0e 94 2d 05 	call	0xa5a	; 0xa5a <timer0_initializeCTC>
	
	/******************************************************/
	
	unsigned char request = 1;//the value that is received from the master
	unsigned char response = 1;//the values that is sent back to the master
 70c:	c1 e0       	ldi	r28, 0x01	; 1
			/************************************************************************/
			case AIR_COND_STATUS:  //to send the current status of AIR CONDITON   back to the master
			
			if (LED_u8ReadStatus('D',2)==1)//if the led of AIR CONDITON   is turned on
			{
				response = 1;//set the response as on status
 70e:	d1 e0       	ldi	r29, 0x01	; 1
			}
			else if (LED_u8ReadStatus('D',2)==0)//if the led of AIR CONDITON   is turned off
			{
				response = 0 ;//set the response as off status
 710:	10 e0       	ldi	r17, 0x00	; 0
	unsigned char TurnOff = 0; // 0 as off
	
	
    while(1)
    {
		request = SPI_Receivechar(Slave_ACK);//wait for the master to start the transmitting
 712:	8f ef       	ldi	r24, 0xFF	; 255
 714:	0e 94 10 05 	call	0xa20	; 0xa20 <SPI_Receivechar>
		switch(request)
 718:	90 e0       	ldi	r25, 0x00	; 0
 71a:	41 97       	sbiw	r24, 0x11	; 17
 71c:	80 33       	cpi	r24, 0x30	; 48
 71e:	91 05       	cpc	r25, r1
 720:	c0 f7       	brcc	.-16     	; 0x712 <main+0x42>
 722:	86 5d       	subi	r24, 0xD6	; 214
 724:	9f 4f       	sbci	r25, 0xFF	; 255
 726:	fc 01       	movw	r30, r24
 728:	ee 0f       	add	r30, r30
 72a:	ff 1f       	adc	r31, r31
 72c:	05 90       	lpm	r0, Z+
 72e:	f4 91       	lpm	r31, Z
 730:	e0 2d       	mov	r30, r0
 732:	09 94       	ijmp
			/************************************************************************/
			/*								ROOM1                                        */
			/************************************************************************/
			case ROOM1_STATUS:  //to send the current status of room 1 back to the master
			
			if (LED_u8ReadStatus('D',4)==1)//if the led of ROOM1 is turned on
 734:	84 e4       	ldi	r24, 0x44	; 68
 736:	64 e0       	ldi	r22, 0x04	; 4
 738:	0e 94 65 03 	call	0x6ca	; 0x6ca <LED_u8ReadStatus>
 73c:	81 30       	cpi	r24, 0x01	; 1
 73e:	39 f0       	breq	.+14     	; 0x74e <main+0x7e>
			{
				response = 1;//set the response as on status
			}
			else if (LED_u8ReadStatus('D',4)==0)//if the led of ROOM1 is turned off
 740:	84 e4       	ldi	r24, 0x44	; 68
 742:	64 e0       	ldi	r22, 0x04	; 4
 744:	0e 94 65 03 	call	0x6ca	; 0x6ca <LED_u8ReadStatus>
 748:	88 23       	and	r24, r24
 74a:	19 f0       	breq	.+6      	; 0x752 <main+0x82>
 74c:	03 c0       	rjmp	.+6      	; 0x754 <main+0x84>
			/************************************************************************/
			case ROOM1_STATUS:  //to send the current status of room 1 back to the master
			
			if (LED_u8ReadStatus('D',4)==1)//if the led of ROOM1 is turned on
			{
				response = 1;//set the response as on status
 74e:	cd 2f       	mov	r28, r29
 750:	01 c0       	rjmp	.+2      	; 0x754 <main+0x84>
			}
			else if (LED_u8ReadStatus('D',4)==0)//if the led of ROOM1 is turned off
			{
				response = 0 ;//set the response as off status
 752:	c1 2f       	mov	r28, r17
			}
			SPI_Transmitchar(response);//response to the transmitter with the status
 754:	8c 2f       	mov	r24, r28
 756:	0e 94 03 05 	call	0xa06	; 0xa06 <SPI_Transmitchar>
			
			break;//break the switch case
 75a:	db cf       	rjmp	.-74     	; 0x712 <main+0x42>
			
			case ROOM1_TURN_ON:
			LED_vTurnOn('D',4);//turn on the led of room 1
 75c:	84 e4       	ldi	r24, 0x44	; 68
 75e:	64 e0       	ldi	r22, 0x04	; 4
 760:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <LED_vTurnOn>
			break;
 764:	d6 cf       	rjmp	.-84     	; 0x712 <main+0x42>
			case ROOM1_TURN_OFF:
			LED_vTurnOff('D',4);//turn off the led of room 1
 766:	84 e4       	ldi	r24, 0x44	; 68
 768:	64 e0       	ldi	r22, 0x04	; 4
 76a:	0e 94 5e 03 	call	0x6bc	; 0x6bc <LED_vTurnOff>
			break;
 76e:	d1 cf       	rjmp	.-94     	; 0x712 <main+0x42>
			/************************************************************************/
			/*								ROOM2                                        */
			/************************************************************************/
			case ROOM2_STATUS:  //to send the current status of room 2 back to the master
			
			if (LED_u8ReadStatus('D',5)==1)//if the led of ROOM2 is turned on
 770:	84 e4       	ldi	r24, 0x44	; 68
 772:	65 e0       	ldi	r22, 0x05	; 5
 774:	0e 94 65 03 	call	0x6ca	; 0x6ca <LED_u8ReadStatus>
 778:	81 30       	cpi	r24, 0x01	; 1
 77a:	39 f0       	breq	.+14     	; 0x78a <main+0xba>
			{
				response = 1;//set the response as on status
			}
			else if (LED_u8ReadStatus('D',5)==0)//if the led of ROOM2 is turned off
 77c:	84 e4       	ldi	r24, 0x44	; 68
 77e:	65 e0       	ldi	r22, 0x05	; 5
 780:	0e 94 65 03 	call	0x6ca	; 0x6ca <LED_u8ReadStatus>
 784:	88 23       	and	r24, r24
 786:	19 f0       	breq	.+6      	; 0x78e <main+0xbe>
 788:	03 c0       	rjmp	.+6      	; 0x790 <main+0xc0>
			/************************************************************************/
			case ROOM2_STATUS:  //to send the current status of room 2 back to the master
			
			if (LED_u8ReadStatus('D',5)==1)//if the led of ROOM2 is turned on
			{
				response = 1;//set the response as on status
 78a:	cd 2f       	mov	r28, r29
 78c:	01 c0       	rjmp	.+2      	; 0x790 <main+0xc0>
			}
			else if (LED_u8ReadStatus('D',5)==0)//if the led of ROOM2 is turned off
			{
				response = 0 ;//set the response as off status
 78e:	c1 2f       	mov	r28, r17
			}
			SPI_Transmitchar(response);//response to the transmitter with the status
 790:	8c 2f       	mov	r24, r28
 792:	0e 94 03 05 	call	0xa06	; 0xa06 <SPI_Transmitchar>
			
			break;//break the switch case
 796:	bd cf       	rjmp	.-134    	; 0x712 <main+0x42>
			
			case ROOM2_TURN_ON:
			LED_vTurnOn('D',5);//turn on the led of room 2
 798:	84 e4       	ldi	r24, 0x44	; 68
 79a:	65 e0       	ldi	r22, 0x05	; 5
 79c:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <LED_vTurnOn>
			break;
 7a0:	b8 cf       	rjmp	.-144    	; 0x712 <main+0x42>
			case ROOM2_TURN_OFF:
			LED_vTurnOff('D',5);//turn off the led of room 2
 7a2:	84 e4       	ldi	r24, 0x44	; 68
 7a4:	65 e0       	ldi	r22, 0x05	; 5
 7a6:	0e 94 5e 03 	call	0x6bc	; 0x6bc <LED_vTurnOff>
			break;
 7aa:	b3 cf       	rjmp	.-154    	; 0x712 <main+0x42>
			/************************************************************************/
			/*								ROOM3                                       */
			/************************************************************************/
			case ROOM3_STATUS:  //to send the current status of room 3 back to the master
			
			if (LED_u8ReadStatus('D',6)==1)//if the led of ROOM3 is turned on
 7ac:	84 e4       	ldi	r24, 0x44	; 68
 7ae:	66 e0       	ldi	r22, 0x06	; 6
 7b0:	0e 94 65 03 	call	0x6ca	; 0x6ca <LED_u8ReadStatus>
 7b4:	81 30       	cpi	r24, 0x01	; 1
 7b6:	39 f0       	breq	.+14     	; 0x7c6 <main+0xf6>
			{
				response = 1;//set the response as on status
			}
			else if (LED_u8ReadStatus('D',6)==0)//if the led of ROOM3 is turned off
 7b8:	84 e4       	ldi	r24, 0x44	; 68
 7ba:	66 e0       	ldi	r22, 0x06	; 6
 7bc:	0e 94 65 03 	call	0x6ca	; 0x6ca <LED_u8ReadStatus>
 7c0:	88 23       	and	r24, r24
 7c2:	19 f0       	breq	.+6      	; 0x7ca <main+0xfa>
 7c4:	03 c0       	rjmp	.+6      	; 0x7cc <main+0xfc>
			/************************************************************************/
			case ROOM3_STATUS:  //to send the current status of room 3 back to the master
			
			if (LED_u8ReadStatus('D',6)==1)//if the led of ROOM3 is turned on
			{
				response = 1;//set the response as on status
 7c6:	cd 2f       	mov	r28, r29
 7c8:	01 c0       	rjmp	.+2      	; 0x7cc <main+0xfc>
			}
			else if (LED_u8ReadStatus('D',6)==0)//if the led of ROOM3 is turned off
			{
				response = 0 ;//set the response as off status
 7ca:	c1 2f       	mov	r28, r17
			}
			SPI_Transmitchar(response);//response to the transmitter with the status
 7cc:	8c 2f       	mov	r24, r28
 7ce:	0e 94 03 05 	call	0xa06	; 0xa06 <SPI_Transmitchar>
			
			break;//break the switch case
 7d2:	9f cf       	rjmp	.-194    	; 0x712 <main+0x42>
			
			case ROOM3_TURN_ON:
			LED_vTurnOn('D',6);//turn on the led of room 3
 7d4:	84 e4       	ldi	r24, 0x44	; 68
 7d6:	66 e0       	ldi	r22, 0x06	; 6
 7d8:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <LED_vTurnOn>
			break;
 7dc:	9a cf       	rjmp	.-204    	; 0x712 <main+0x42>
			case ROOM3_TURN_OFF:
			LED_vTurnOff('D',6);//turn off the led of room 3
 7de:	84 e4       	ldi	r24, 0x44	; 68
 7e0:	66 e0       	ldi	r22, 0x06	; 6
 7e2:	0e 94 5e 03 	call	0x6bc	; 0x6bc <LED_vTurnOff>
			break;
 7e6:	95 cf       	rjmp	.-214    	; 0x712 <main+0x42>
			/************************************************************************/
			/*								ROOM4                                        */
			/************************************************************************/
			case ROOM4_STATUS:  //to send the current status of room4 back to the master
			
			if (LED_u8ReadStatus('D',7)==1)//if the led of ROOM4 is turned on
 7e8:	84 e4       	ldi	r24, 0x44	; 68
 7ea:	67 e0       	ldi	r22, 0x07	; 7
 7ec:	0e 94 65 03 	call	0x6ca	; 0x6ca <LED_u8ReadStatus>
 7f0:	81 30       	cpi	r24, 0x01	; 1
 7f2:	39 f0       	breq	.+14     	; 0x802 <main+0x132>
			{
				response = 1;//set the response as on status
			}
			else if (LED_u8ReadStatus('D',7)==0)//if the led of ROOM4 is turned off
 7f4:	84 e4       	ldi	r24, 0x44	; 68
 7f6:	67 e0       	ldi	r22, 0x07	; 7
 7f8:	0e 94 65 03 	call	0x6ca	; 0x6ca <LED_u8ReadStatus>
 7fc:	88 23       	and	r24, r24
 7fe:	19 f0       	breq	.+6      	; 0x806 <main+0x136>
 800:	03 c0       	rjmp	.+6      	; 0x808 <main+0x138>
			/************************************************************************/
			case ROOM4_STATUS:  //to send the current status of room4 back to the master
			
			if (LED_u8ReadStatus('D',7)==1)//if the led of ROOM4 is turned on
			{
				response = 1;//set the response as on status
 802:	cd 2f       	mov	r28, r29
 804:	01 c0       	rjmp	.+2      	; 0x808 <main+0x138>
			}
			else if (LED_u8ReadStatus('D',7)==0)//if the led of ROOM4 is turned off
			{
				response = 0 ;//set the response as off status
 806:	c1 2f       	mov	r28, r17
			}
			SPI_Transmitchar(response);//response to the transmitter with the status
 808:	8c 2f       	mov	r24, r28
 80a:	0e 94 03 05 	call	0xa06	; 0xa06 <SPI_Transmitchar>
			
			break;//break the switch case
 80e:	81 cf       	rjmp	.-254    	; 0x712 <main+0x42>
			
			case ROOM4_TURN_ON:
			LED_vTurnOn('D',7);//turn on the led of room 4
 810:	84 e4       	ldi	r24, 0x44	; 68
 812:	67 e0       	ldi	r22, 0x07	; 7
 814:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <LED_vTurnOn>
			break;
 818:	7c cf       	rjmp	.-264    	; 0x712 <main+0x42>
			case ROOM4_TURN_OFF:
			LED_vTurnOff('D',7);//turn off the led of room 4
 81a:	84 e4       	ldi	r24, 0x44	; 68
 81c:	67 e0       	ldi	r22, 0x07	; 7
 81e:	0e 94 5e 03 	call	0x6bc	; 0x6bc <LED_vTurnOff>
			break;
 822:	77 cf       	rjmp	.-274    	; 0x712 <main+0x42>
			/************************************************************************/
			/*								TV                                        */
			/************************************************************************/
			case TV_STATUS:  //to send the current status of TV  back to the master
			
			if (LED_u8ReadStatus('D',3)==1)//if the led of TV  is turned on
 824:	84 e4       	ldi	r24, 0x44	; 68
 826:	63 e0       	ldi	r22, 0x03	; 3
 828:	0e 94 65 03 	call	0x6ca	; 0x6ca <LED_u8ReadStatus>
 82c:	81 30       	cpi	r24, 0x01	; 1
 82e:	39 f0       	breq	.+14     	; 0x83e <main+0x16e>
			{
				response = 1;//set the response as on status
			}
			else if (LED_u8ReadStatus('D',3)==0)//if the led of TV  is turned off
 830:	84 e4       	ldi	r24, 0x44	; 68
 832:	63 e0       	ldi	r22, 0x03	; 3
 834:	0e 94 65 03 	call	0x6ca	; 0x6ca <LED_u8ReadStatus>
 838:	88 23       	and	r24, r24
 83a:	19 f0       	breq	.+6      	; 0x842 <main+0x172>
 83c:	03 c0       	rjmp	.+6      	; 0x844 <main+0x174>
			/************************************************************************/
			case TV_STATUS:  //to send the current status of TV  back to the master
			
			if (LED_u8ReadStatus('D',3)==1)//if the led of TV  is turned on
			{
				response = 1;//set the response as on status
 83e:	cd 2f       	mov	r28, r29
 840:	01 c0       	rjmp	.+2      	; 0x844 <main+0x174>
			}
			else if (LED_u8ReadStatus('D',3)==0)//if the led of TV  is turned off
			{
				response = 0 ;//set the response as off status
 842:	c1 2f       	mov	r28, r17
			}
			SPI_Transmitchar(response);//response to the transmitter with the status
 844:	8c 2f       	mov	r24, r28
 846:	0e 94 03 05 	call	0xa06	; 0xa06 <SPI_Transmitchar>
			
			break;//break the switch case
 84a:	63 cf       	rjmp	.-314    	; 0x712 <main+0x42>
			
			case TV_TURN_ON:
			LED_vTurnOn('D',3);//turn on the led of TV 
 84c:	84 e4       	ldi	r24, 0x44	; 68
 84e:	63 e0       	ldi	r22, 0x03	; 3
 850:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <LED_vTurnOn>
			break;
 854:	5e cf       	rjmp	.-324    	; 0x712 <main+0x42>
			case TV_TURN_OFF:
			LED_vTurnOff('D',3);//turn off the led of TV 
 856:	84 e4       	ldi	r24, 0x44	; 68
 858:	63 e0       	ldi	r22, 0x03	; 3
 85a:	0e 94 5e 03 	call	0x6bc	; 0x6bc <LED_vTurnOff>
			break;
 85e:	59 cf       	rjmp	.-334    	; 0x712 <main+0x42>
			/************************************************************************/
			/*								AIR CONDITON                                        */
			/************************************************************************/
			case AIR_COND_STATUS:  //to send the current status of AIR CONDITON   back to the master
			
			if (LED_u8ReadStatus('D',2)==1)//if the led of AIR CONDITON   is turned on
 860:	84 e4       	ldi	r24, 0x44	; 68
 862:	62 e0       	ldi	r22, 0x02	; 2
 864:	0e 94 65 03 	call	0x6ca	; 0x6ca <LED_u8ReadStatus>
 868:	81 30       	cpi	r24, 0x01	; 1
 86a:	39 f0       	breq	.+14     	; 0x87a <__stack+0x1b>
			{
				response = 1;//set the response as on status
			}
			else if (LED_u8ReadStatus('D',2)==0)//if the led of AIR CONDITON   is turned off
 86c:	84 e4       	ldi	r24, 0x44	; 68
 86e:	62 e0       	ldi	r22, 0x02	; 2
 870:	0e 94 65 03 	call	0x6ca	; 0x6ca <LED_u8ReadStatus>
 874:	88 23       	and	r24, r24
 876:	19 f0       	breq	.+6      	; 0x87e <__stack+0x1f>
 878:	03 c0       	rjmp	.+6      	; 0x880 <__stack+0x21>
			/************************************************************************/
			case AIR_COND_STATUS:  //to send the current status of AIR CONDITON   back to the master
			
			if (LED_u8ReadStatus('D',2)==1)//if the led of AIR CONDITON   is turned on
			{
				response = 1;//set the response as on status
 87a:	cd 2f       	mov	r28, r29
 87c:	01 c0       	rjmp	.+2      	; 0x880 <__stack+0x21>
			}
			else if (LED_u8ReadStatus('D',2)==0)//if the led of AIR CONDITON   is turned off
			{
				response = 0 ;//set the response as off status
 87e:	c1 2f       	mov	r28, r17
			}
			SPI_Transmitchar(response);//response to the transmitter with the status
 880:	8c 2f       	mov	r24, r28
 882:	0e 94 03 05 	call	0xa06	; 0xa06 <SPI_Transmitchar>
			
			break;//break the switch case
 886:	45 cf       	rjmp	.-374    	; 0x712 <main+0x42>
			
			case AIR_COND_TURN_ON:
			timer0_initializeCTC();
 888:	0e 94 2d 05 	call	0xa5a	; 0xa5a <timer0_initializeCTC>
			LED_vTurnOn('D',2);//turn on the led of  AIR CONDITON  
 88c:	84 e4       	ldi	r24, 0x44	; 68
 88e:	62 e0       	ldi	r22, 0x02	; 2
 890:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <LED_vTurnOn>
			break;
 894:	3e cf       	rjmp	.-388    	; 0x712 <main+0x42>
			case AIR_COND_TURN_OFF:
			timer0_stop();
 896:	0e 94 43 05 	call	0xa86	; 0xa86 <timer0_stop>
			LED_vTurnOff('D',2);//turn off the led of AIR CONDITON  
 89a:	84 e4       	ldi	r24, 0x44	; 68
 89c:	62 e0       	ldi	r22, 0x02	; 2
 89e:	0e 94 5e 03 	call	0x6bc	; 0x6bc <LED_vTurnOff>
			break;
 8a2:	37 cf       	rjmp	.-402    	; 0x712 <main+0x42>
			
			/*********************************   Set temperature   ********************************/
			case SET_TEMPERATURE://case of receive--> the Sending  code of set temperature from master
			required_temperature = SPI_Receivechar(Slave_ACK);//get the temperature from the master and store the temperature in required temperature
 8a4:	8f ef       	ldi	r24, 0xFF	; 255
 8a6:	0e 94 10 05 	call	0xa20	; 0xa20 <SPI_Receivechar>
 8aa:	90 e0       	ldi	r25, 0x00	; 0
 8ac:	90 93 61 00 	sts	0x0061, r25
 8b0:	80 93 60 00 	sts	0x0060, r24
			break;//break the switch case
 8b4:	2e cf       	rjmp	.-420    	; 0x712 <main+0x42>

000008b6 <__vector_10>:
} // end of main function



ISR(TIMER0_COMP_vect)
{
 8b6:	1f 92       	push	r1
 8b8:	0f 92       	push	r0
 8ba:	0f b6       	in	r0, 0x3f	; 63
 8bc:	0f 92       	push	r0
 8be:	11 24       	eor	r1, r1
 8c0:	2f 93       	push	r18
 8c2:	3f 93       	push	r19
 8c4:	4f 93       	push	r20
 8c6:	5f 93       	push	r21
 8c8:	6f 93       	push	r22
 8ca:	7f 93       	push	r23
 8cc:	8f 93       	push	r24
 8ce:	9f 93       	push	r25
 8d0:	af 93       	push	r26
 8d2:	bf 93       	push	r27
 8d4:	ef 93       	push	r30
 8d6:	ff 93       	push	r31
	counter++;//count the ticks of the timer zero
 8d8:	80 91 63 00 	lds	r24, 0x0063
 8dc:	8f 5f       	subi	r24, 0xFF	; 255
 8de:	80 93 63 00 	sts	0x0063, r24
	if(counter>=10)//do that code every 10 ticks
 8e2:	80 91 63 00 	lds	r24, 0x0063
 8e6:	8a 30       	cpi	r24, 0x0A	; 10
 8e8:	08 f4       	brcc	.+2      	; 0x8ec <__vector_10+0x36>
 8ea:	5d c0       	rjmp	.+186    	; 0x9a6 <__vector_10+0xf0>
	{
		counter=0;//clear the counter of ticks
 8ec:	10 92 63 00 	sts	0x0063, r1
		temp_sensor_reading=(0.25*ADC_u16Read(0));//read the temperature from the temperature sensor connected to the ADC of the micro controller
 8f0:	80 e0       	ldi	r24, 0x00	; 0
 8f2:	0e 94 7f 00 	call	0xfe	; 0xfe <ADC_u16Read>
 8f6:	bc 01       	movw	r22, r24
 8f8:	80 e0       	ldi	r24, 0x00	; 0
 8fa:	90 e0       	ldi	r25, 0x00	; 0
 8fc:	0e 94 0a 06 	call	0xc14	; 0xc14 <__floatunsisf>
 900:	20 e0       	ldi	r18, 0x00	; 0
 902:	30 e0       	ldi	r19, 0x00	; 0
 904:	40 e8       	ldi	r20, 0x80	; 128
 906:	5e e3       	ldi	r21, 0x3E	; 62
 908:	0e 94 98 06 	call	0xd30	; 0xd30 <__mulsf3>
 90c:	0e 94 de 05 	call	0xbbc	; 0xbbc <__fixunssfsi>
 910:	dc 01       	movw	r26, r24
 912:	cb 01       	movw	r24, r22
 914:	90 93 65 00 	sts	0x0065, r25
 918:	80 93 64 00 	sts	0x0064, r24
		if (temp_sensor_reading>=(required_temperature+1))//do that code if the read temperature if greater than required temperature by one or more
 91c:	20 91 60 00 	lds	r18, 0x0060
 920:	30 91 61 00 	lds	r19, 0x0061
 924:	80 91 64 00 	lds	r24, 0x0064
 928:	90 91 65 00 	lds	r25, 0x0065
 92c:	2f 5f       	subi	r18, 0xFF	; 255
 92e:	3f 4f       	sbci	r19, 0xFF	; 255
 930:	82 17       	cp	r24, r18
 932:	93 07       	cpc	r25, r19
 934:	40 f0       	brcs	.+16     	; 0x946 <__vector_10+0x90>
		{
			LED_vTurnOn('D',2);//turn on the led of the air conditioning
 936:	84 e4       	ldi	r24, 0x44	; 68
 938:	62 e0       	ldi	r22, 0x02	; 2
 93a:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <LED_vTurnOn>
			last_air_conditioning_value=1;//save the value of the state of the air conditioning"AIR_CONDTIONING_ON"
 93e:	81 e0       	ldi	r24, 0x01	; 1
 940:	80 93 62 00 	sts	0x0062, r24
 944:	30 c0       	rjmp	.+96     	; 0x9a6 <__vector_10+0xf0>
		}
		else if (temp_sensor_reading<=(required_temperature-1))//do that code if the read temperature if lesser than required temperature by one or more
 946:	20 91 60 00 	lds	r18, 0x0060
 94a:	30 91 61 00 	lds	r19, 0x0061
 94e:	80 91 64 00 	lds	r24, 0x0064
 952:	90 91 65 00 	lds	r25, 0x0065
 956:	21 50       	subi	r18, 0x01	; 1
 958:	30 40       	sbci	r19, 0x00	; 0
 95a:	28 17       	cp	r18, r24
 95c:	39 07       	cpc	r19, r25
 95e:	38 f0       	brcs	.+14     	; 0x96e <__vector_10+0xb8>
		{
			LED_vTurnOff('D',2);//turn off the led of the air conditioning
 960:	84 e4       	ldi	r24, 0x44	; 68
 962:	62 e0       	ldi	r22, 0x02	; 2
 964:	0e 94 5e 03 	call	0x6bc	; 0x6bc <LED_vTurnOff>
			last_air_conditioning_value=0;//save the value of the state of the air conditioning"AIR_CONDTIONING_OFF"
 968:	10 92 62 00 	sts	0x0062, r1
 96c:	1c c0       	rjmp	.+56     	; 0x9a6 <__vector_10+0xf0>
		}
		
		else if (required_temperature==temp_sensor_reading)//do that code if the read temperature is equal to the required temperature
 96e:	20 91 60 00 	lds	r18, 0x0060
 972:	30 91 61 00 	lds	r19, 0x0061
 976:	80 91 64 00 	lds	r24, 0x0064
 97a:	90 91 65 00 	lds	r25, 0x0065
 97e:	28 17       	cp	r18, r24
 980:	39 07       	cpc	r19, r25
 982:	89 f4       	brne	.+34     	; 0x9a6 <__vector_10+0xf0>
		{
			if (last_air_conditioning_value==1)//in the case of the last saved status of the air conditioning was on
 984:	80 91 62 00 	lds	r24, 0x0062
 988:	81 30       	cpi	r24, 0x01	; 1
 98a:	29 f4       	brne	.+10     	; 0x996 <__vector_10+0xe0>
			{
				LED_vTurnOn('D',2);//turn on the led of the air conditioning
 98c:	84 e4       	ldi	r24, 0x44	; 68
 98e:	62 e0       	ldi	r22, 0x02	; 2
 990:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <LED_vTurnOn>
 994:	08 c0       	rjmp	.+16     	; 0x9a6 <__vector_10+0xf0>
			}
			else if (last_air_conditioning_value==0)//in the case of the last saved status of the air conditioning was off
 996:	80 91 62 00 	lds	r24, 0x0062
 99a:	88 23       	and	r24, r24
 99c:	21 f4       	brne	.+8      	; 0x9a6 <__vector_10+0xf0>
			{
				LED_vTurnOff('D',2);//turn off the led of the air conditioning
 99e:	84 e4       	ldi	r24, 0x44	; 68
 9a0:	62 e0       	ldi	r22, 0x02	; 2
 9a2:	0e 94 5e 03 	call	0x6bc	; 0x6bc <LED_vTurnOff>
			}
		}//end of else
	}//end of if
} // end of ISR
 9a6:	ff 91       	pop	r31
 9a8:	ef 91       	pop	r30
 9aa:	bf 91       	pop	r27
 9ac:	af 91       	pop	r26
 9ae:	9f 91       	pop	r25
 9b0:	8f 91       	pop	r24
 9b2:	7f 91       	pop	r23
 9b4:	6f 91       	pop	r22
 9b6:	5f 91       	pop	r21
 9b8:	4f 91       	pop	r20
 9ba:	3f 91       	pop	r19
 9bc:	2f 91       	pop	r18
 9be:	0f 90       	pop	r0
 9c0:	0f be       	out	0x3f, r0	; 63
 9c2:	0f 90       	pop	r0
 9c4:	1f 90       	pop	r1
 9c6:	18 95       	reti

000009c8 <SPI_MasterInit>:
	/************************************************************************/
	/*     DRB |= (1<<MOSI)|(1<<CS)|(1<<CLK);
	      SPCR = 1<<MSTR | 1<<SPE;                                          */
	/************************************************************************/
	/*Set SS / MOSI / SCK  as output pins for master*/
	DIO_vsetPinDir('B',4,1);
 9c8:	82 e4       	ldi	r24, 0x42	; 66
 9ca:	64 e0       	ldi	r22, 0x04	; 4
 9cc:	41 e0       	ldi	r20, 0x01	; 1
 9ce:	0e 94 8e 00 	call	0x11c	; 0x11c <DIO_vsetPinDir>
	DIO_vsetPinDir('B',5,1);
 9d2:	82 e4       	ldi	r24, 0x42	; 66
 9d4:	65 e0       	ldi	r22, 0x05	; 5
 9d6:	41 e0       	ldi	r20, 0x01	; 1
 9d8:	0e 94 8e 00 	call	0x11c	; 0x11c <DIO_vsetPinDir>
	DIO_vsetPinDir('B',7,1);
 9dc:	82 e4       	ldi	r24, 0x42	; 66
 9de:	67 e0       	ldi	r22, 0x07	; 7
 9e0:	41 e0       	ldi	r20, 0x01	; 1
 9e2:	0e 94 8e 00 	call	0x11c	; 0x11c <DIO_vsetPinDir>
	/*Enable Master mode*/
	SetBit(SPCR,MSTR);
 9e6:	6c 9a       	sbi	0x0d, 4	; 13
	/*Set clock to fosc/16*/
	SetBit(SPCR,SPR0);
 9e8:	68 9a       	sbi	0x0d, 0	; 13
	/*Enable SPI*/
    SetBit(SPCR,SPE);
 9ea:	6e 9a       	sbi	0x0d, 6	; 13
	/*set SS to high */
	DIO_vwritePin('B',4,1);
 9ec:	82 e4       	ldi	r24, 0x42	; 66
 9ee:	64 e0       	ldi	r22, 0x04	; 4
 9f0:	41 e0       	ldi	r20, 0x01	; 1
 9f2:	0e 94 25 01 	call	0x24a	; 0x24a <DIO_vwritePin>
}
 9f6:	08 95       	ret

000009f8 <SPI_SlaveInit>:
	/* 
	SetBit(DDRB,MISO);	// MISO
	SetBit(SPCR,SPE);	// enable SPI                                                                     */
	/************************************************************************/
	/*Enable SPI*/
	SetBit(SPCR,SPE);
 9f8:	6e 9a       	sbi	0x0d, 6	; 13
	/*Set MISO as output*/
	DIO_vsetPinDir('B',6,1);
 9fa:	82 e4       	ldi	r24, 0x42	; 66
 9fc:	66 e0       	ldi	r22, 0x06	; 6
 9fe:	41 e0       	ldi	r20, 0x01	; 1
 a00:	0e 94 8e 00 	call	0x11c	; 0x11c <DIO_vsetPinDir>
}
 a04:	08 95       	ret

00000a06 <SPI_Transmitchar>:



/*	Function Description : SPI as a Master or slave Transmit char      */
unsigned char SPI_Transmitchar(unsigned char Data)
{
 a06:	cf 93       	push	r28
 a08:	c8 2f       	mov	r28, r24
	/*Clear SS to send data to slave*/
	DIO_vwritePin('B',4,0);
 a0a:	82 e4       	ldi	r24, 0x42	; 66
 a0c:	64 e0       	ldi	r22, 0x04	; 4
 a0e:	40 e0       	ldi	r20, 0x00	; 0
 a10:	0e 94 25 01 	call	0x24a	; 0x24a <DIO_vwritePin>
	/*Put data on SPDR*/
	SPDR=Data;
 a14:	cf b9       	out	0x0f, r28	; 15
	/*Wait until the transmission is finished*/
     while(ReadBit(SPSR,SPIF)==0);	
 a16:	77 9b       	sbis	0x0e, 7	; 14
 a18:	fe cf       	rjmp	.-4      	; 0xa16 <SPI_Transmitchar+0x10>
	 /*read SPDR*/
	 return SPDR ;
 a1a:	8f b1       	in	r24, 0x0f	; 15
}
 a1c:	cf 91       	pop	r28
 a1e:	08 95       	ret

00000a20 <SPI_Receivechar>:

/*	Function Description : SPI as a Slave or master Receive char     */
unsigned char SPI_Receivechar(unsigned char Data)
{
	/*Put data on SPDR*/
	SPDR=Data;
 a20:	8f b9       	out	0x0f, r24	; 15
	/*Wait until data is received in SPI register*/
	while(ReadBit(SPSR,SPIF)==0);
 a22:	77 9b       	sbis	0x0e, 7	; 14
 a24:	fe cf       	rjmp	.-4      	; 0xa22 <SPI_Receivechar+0x2>
	/*read the received data*/
	return SPDR ;
 a26:	8f b1       	in	r24, 0x0f	; 15
}
 a28:	08 95       	ret

00000a2a <SPI_Transmitstring>:


/*	Function Description : SPI  as a Master or slave Transmit String     */
void SPI_Transmitstring(unsigned char *ptr)
{
 a2a:	cf 93       	push	r28
 a2c:	df 93       	push	r29
 a2e:	ec 01       	movw	r28, r24
	while((*ptr)!=0)
 a30:	88 81       	ld	r24, Y
 a32:	88 23       	and	r24, r24
 a34:	79 f0       	breq	.+30     	; 0xa54 <SPI_Transmitstring+0x2a>
	return SPDR ;
}


/*	Function Description : SPI  as a Master or slave Transmit String     */
void SPI_Transmitstring(unsigned char *ptr)
 a36:	21 96       	adiw	r28, 0x01	; 1
{
	while((*ptr)!=0)
	{
		SPI_Transmitchar(*ptr);
 a38:	0e 94 03 05 	call	0xa06	; 0xa06 <SPI_Transmitchar>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 a3c:	8f ef       	ldi	r24, 0xFF	; 255
 a3e:	92 e5       	ldi	r25, 0x52	; 82
 a40:	a7 e0       	ldi	r26, 0x07	; 7
 a42:	81 50       	subi	r24, 0x01	; 1
 a44:	90 40       	sbci	r25, 0x00	; 0
 a46:	a0 40       	sbci	r26, 0x00	; 0
 a48:	e1 f7       	brne	.-8      	; 0xa42 <SPI_Transmitstring+0x18>
 a4a:	00 c0       	rjmp	.+0      	; 0xa4c <SPI_Transmitstring+0x22>
 a4c:	00 00       	nop


/*	Function Description : SPI  as a Master or slave Transmit String     */
void SPI_Transmitstring(unsigned char *ptr)
{
	while((*ptr)!=0)
 a4e:	89 91       	ld	r24, Y+
 a50:	88 23       	and	r24, r24
 a52:	91 f7       	brne	.-28     	; 0xa38 <SPI_Transmitstring+0xe>
	{
		SPI_Transmitchar(*ptr);
		_delay_ms(300);
		ptr++;
	}
}
 a54:	df 91       	pop	r29
 a56:	cf 91       	pop	r28
 a58:	08 95       	ret

00000a5a <timer0_initializeCTC>:

void timer0_initializeCTC(void)
{
	//Config OCR0
	//OCR0 = the value to compare with
	OCR0 = 78; //to achieve tick equal to 10 msec
 a5a:	8e e4       	ldi	r24, 0x4E	; 78
 a5c:	8c bf       	out	0x3c, r24	; 60
	
	//Set timer mode
	//Set the mode as Compare match
	SetBit(TCCR0, WGM01);
 a5e:	83 b7       	in	r24, 0x33	; 51
 a60:	88 60       	ori	r24, 0x08	; 8
 a62:	83 bf       	out	0x33, r24	; 51
	ClearBit(TCCR0, WGM00);
 a64:	83 b7       	in	r24, 0x33	; 51
 a66:	8f 7b       	andi	r24, 0xBF	; 191
 a68:	83 bf       	out	0x33, r24	; 51
	
	//Configure clock
	//set as clk/1024
	SetBit(TCCR0, CS00);
 a6a:	83 b7       	in	r24, 0x33	; 51
 a6c:	81 60       	ori	r24, 0x01	; 1
 a6e:	83 bf       	out	0x33, r24	; 51
	ClearBit(TCCR0, CS01);
 a70:	83 b7       	in	r24, 0x33	; 51
 a72:	8d 7f       	andi	r24, 0xFD	; 253
 a74:	83 bf       	out	0x33, r24	; 51
	SetBit(TCCR0, CS02);
 a76:	83 b7       	in	r24, 0x33	; 51
 a78:	84 60       	ori	r24, 0x04	; 4
 a7a:	83 bf       	out	0x33, r24	; 51
	
	//Enable global interrupts
	sei();
 a7c:	78 94       	sei
	
	//Enable timer 0 interrupt for compare match
	SetBit(TIMSK, OCIE0);
 a7e:	89 b7       	in	r24, 0x39	; 57
 a80:	82 60       	ori	r24, 0x02	; 2
 a82:	89 bf       	out	0x39, r24	; 57
}
 a84:	08 95       	ret

00000a86 <timer0_stop>:

void timer0_stop(void)
{
	//disable the clock to stop the counter
	ClearBit(TCCR0, CS00);
 a86:	83 b7       	in	r24, 0x33	; 51
 a88:	8e 7f       	andi	r24, 0xFE	; 254
 a8a:	83 bf       	out	0x33, r24	; 51
	ClearBit(TCCR0, CS01);
 a8c:	83 b7       	in	r24, 0x33	; 51
 a8e:	8d 7f       	andi	r24, 0xFD	; 253
 a90:	83 bf       	out	0x33, r24	; 51
	ClearBit(TCCR0, CS02);
 a92:	83 b7       	in	r24, 0x33	; 51
 a94:	8b 7f       	andi	r24, 0xFB	; 251
 a96:	83 bf       	out	0x33, r24	; 51
}
 a98:	08 95       	ret

00000a9a <timer_initializefastpwm>:
void timer_initializefastpwm(void)
{
	//Config OCR0
	//OCR0 = the value to compare with
	OCR0 = 128;
 a9a:	80 e8       	ldi	r24, 0x80	; 128
 a9c:	8c bf       	out	0x3c, r24	; 60
	
	//Set timer mode
	//adjust fast pulse width modulation mode
	SetBit(TCCR0, WGM00); 
 a9e:	83 b7       	in	r24, 0x33	; 51
 aa0:	80 64       	ori	r24, 0x40	; 64
 aa2:	83 bf       	out	0x33, r24	; 51
	SetBit(TCCR0, WGM01);
 aa4:	83 b7       	in	r24, 0x33	; 51
 aa6:	88 60       	ori	r24, 0x08	; 8
 aa8:	83 bf       	out	0x33, r24	; 51
	
	//Enable global interrupts
	sei();
 aaa:	78 94       	sei
	
	SetBit(TCCR0, COM01); //adjust non inverting mode
 aac:	83 b7       	in	r24, 0x33	; 51
 aae:	80 62       	ori	r24, 0x20	; 32
 ab0:	83 bf       	out	0x33, r24	; 51
	
	//Enable timer0 interrupt for overflow mode
	SetBit(TIMSK,TOIE0);
 ab2:	89 b7       	in	r24, 0x39	; 57
 ab4:	81 60       	ori	r24, 0x01	; 1
 ab6:	89 bf       	out	0x39, r24	; 57
	
	//Configure clock
	//set as clk/1024
	SetBit(TCCR0, CS00);
 ab8:	83 b7       	in	r24, 0x33	; 51
 aba:	81 60       	ori	r24, 0x01	; 1
 abc:	83 bf       	out	0x33, r24	; 51
	ClearBit(TCCR0, CS01);
 abe:	83 b7       	in	r24, 0x33	; 51
 ac0:	8d 7f       	andi	r24, 0xFD	; 253
 ac2:	83 bf       	out	0x33, r24	; 51
	SetBit(TCCR0, CS02);
 ac4:	83 b7       	in	r24, 0x33	; 51
 ac6:	84 60       	ori	r24, 0x04	; 4
 ac8:	83 bf       	out	0x33, r24	; 51
}
 aca:	08 95       	ret

00000acc <change_dutycycle>:
void change_dutycycle(float duty)
{
	OCR0 = (duty / 100) * 256;//Set the OCR0 depending on the duty percentage
 acc:	20 e0       	ldi	r18, 0x00	; 0
 ace:	30 e0       	ldi	r19, 0x00	; 0
 ad0:	48 ec       	ldi	r20, 0xC8	; 200
 ad2:	52 e4       	ldi	r21, 0x42	; 66
 ad4:	0e 94 76 05 	call	0xaec	; 0xaec <__divsf3>
 ad8:	20 e0       	ldi	r18, 0x00	; 0
 ada:	30 e0       	ldi	r19, 0x00	; 0
 adc:	40 e8       	ldi	r20, 0x80	; 128
 ade:	53 e4       	ldi	r21, 0x43	; 67
 ae0:	0e 94 98 06 	call	0xd30	; 0xd30 <__mulsf3>
 ae4:	0e 94 de 05 	call	0xbbc	; 0xbbc <__fixunssfsi>
 ae8:	6c bf       	out	0x3c, r22	; 60
}
 aea:	08 95       	ret

00000aec <__divsf3>:
 aec:	0c d0       	rcall	.+24     	; 0xb06 <__divsf3x>
 aee:	e6 c0       	rjmp	.+460    	; 0xcbc <__fp_round>
 af0:	de d0       	rcall	.+444    	; 0xcae <__fp_pscB>
 af2:	40 f0       	brcs	.+16     	; 0xb04 <__divsf3+0x18>
 af4:	d5 d0       	rcall	.+426    	; 0xca0 <__fp_pscA>
 af6:	30 f0       	brcs	.+12     	; 0xb04 <__divsf3+0x18>
 af8:	21 f4       	brne	.+8      	; 0xb02 <__divsf3+0x16>
 afa:	5f 3f       	cpi	r21, 0xFF	; 255
 afc:	19 f0       	breq	.+6      	; 0xb04 <__divsf3+0x18>
 afe:	c7 c0       	rjmp	.+398    	; 0xc8e <__fp_inf>
 b00:	51 11       	cpse	r21, r1
 b02:	10 c1       	rjmp	.+544    	; 0xd24 <__fp_szero>
 b04:	ca c0       	rjmp	.+404    	; 0xc9a <__fp_nan>

00000b06 <__divsf3x>:
 b06:	eb d0       	rcall	.+470    	; 0xcde <__fp_split3>
 b08:	98 f3       	brcs	.-26     	; 0xaf0 <__divsf3+0x4>

00000b0a <__divsf3_pse>:
 b0a:	99 23       	and	r25, r25
 b0c:	c9 f3       	breq	.-14     	; 0xb00 <__divsf3+0x14>
 b0e:	55 23       	and	r21, r21
 b10:	b1 f3       	breq	.-20     	; 0xafe <__divsf3+0x12>
 b12:	95 1b       	sub	r25, r21
 b14:	55 0b       	sbc	r21, r21
 b16:	bb 27       	eor	r27, r27
 b18:	aa 27       	eor	r26, r26
 b1a:	62 17       	cp	r22, r18
 b1c:	73 07       	cpc	r23, r19
 b1e:	84 07       	cpc	r24, r20
 b20:	38 f0       	brcs	.+14     	; 0xb30 <__divsf3_pse+0x26>
 b22:	9f 5f       	subi	r25, 0xFF	; 255
 b24:	5f 4f       	sbci	r21, 0xFF	; 255
 b26:	22 0f       	add	r18, r18
 b28:	33 1f       	adc	r19, r19
 b2a:	44 1f       	adc	r20, r20
 b2c:	aa 1f       	adc	r26, r26
 b2e:	a9 f3       	breq	.-22     	; 0xb1a <__divsf3_pse+0x10>
 b30:	33 d0       	rcall	.+102    	; 0xb98 <__divsf3_pse+0x8e>
 b32:	0e 2e       	mov	r0, r30
 b34:	3a f0       	brmi	.+14     	; 0xb44 <__divsf3_pse+0x3a>
 b36:	e0 e8       	ldi	r30, 0x80	; 128
 b38:	30 d0       	rcall	.+96     	; 0xb9a <__divsf3_pse+0x90>
 b3a:	91 50       	subi	r25, 0x01	; 1
 b3c:	50 40       	sbci	r21, 0x00	; 0
 b3e:	e6 95       	lsr	r30
 b40:	00 1c       	adc	r0, r0
 b42:	ca f7       	brpl	.-14     	; 0xb36 <__divsf3_pse+0x2c>
 b44:	29 d0       	rcall	.+82     	; 0xb98 <__divsf3_pse+0x8e>
 b46:	fe 2f       	mov	r31, r30
 b48:	27 d0       	rcall	.+78     	; 0xb98 <__divsf3_pse+0x8e>
 b4a:	66 0f       	add	r22, r22
 b4c:	77 1f       	adc	r23, r23
 b4e:	88 1f       	adc	r24, r24
 b50:	bb 1f       	adc	r27, r27
 b52:	26 17       	cp	r18, r22
 b54:	37 07       	cpc	r19, r23
 b56:	48 07       	cpc	r20, r24
 b58:	ab 07       	cpc	r26, r27
 b5a:	b0 e8       	ldi	r27, 0x80	; 128
 b5c:	09 f0       	breq	.+2      	; 0xb60 <__divsf3_pse+0x56>
 b5e:	bb 0b       	sbc	r27, r27
 b60:	80 2d       	mov	r24, r0
 b62:	bf 01       	movw	r22, r30
 b64:	ff 27       	eor	r31, r31
 b66:	93 58       	subi	r25, 0x83	; 131
 b68:	5f 4f       	sbci	r21, 0xFF	; 255
 b6a:	2a f0       	brmi	.+10     	; 0xb76 <__divsf3_pse+0x6c>
 b6c:	9e 3f       	cpi	r25, 0xFE	; 254
 b6e:	51 05       	cpc	r21, r1
 b70:	68 f0       	brcs	.+26     	; 0xb8c <__divsf3_pse+0x82>
 b72:	8d c0       	rjmp	.+282    	; 0xc8e <__fp_inf>
 b74:	d7 c0       	rjmp	.+430    	; 0xd24 <__fp_szero>
 b76:	5f 3f       	cpi	r21, 0xFF	; 255
 b78:	ec f3       	brlt	.-6      	; 0xb74 <__divsf3_pse+0x6a>
 b7a:	98 3e       	cpi	r25, 0xE8	; 232
 b7c:	dc f3       	brlt	.-10     	; 0xb74 <__divsf3_pse+0x6a>
 b7e:	86 95       	lsr	r24
 b80:	77 95       	ror	r23
 b82:	67 95       	ror	r22
 b84:	b7 95       	ror	r27
 b86:	f7 95       	ror	r31
 b88:	9f 5f       	subi	r25, 0xFF	; 255
 b8a:	c9 f7       	brne	.-14     	; 0xb7e <__divsf3_pse+0x74>
 b8c:	88 0f       	add	r24, r24
 b8e:	91 1d       	adc	r25, r1
 b90:	96 95       	lsr	r25
 b92:	87 95       	ror	r24
 b94:	97 f9       	bld	r25, 7
 b96:	08 95       	ret
 b98:	e1 e0       	ldi	r30, 0x01	; 1
 b9a:	66 0f       	add	r22, r22
 b9c:	77 1f       	adc	r23, r23
 b9e:	88 1f       	adc	r24, r24
 ba0:	bb 1f       	adc	r27, r27
 ba2:	62 17       	cp	r22, r18
 ba4:	73 07       	cpc	r23, r19
 ba6:	84 07       	cpc	r24, r20
 ba8:	ba 07       	cpc	r27, r26
 baa:	20 f0       	brcs	.+8      	; 0xbb4 <__divsf3_pse+0xaa>
 bac:	62 1b       	sub	r22, r18
 bae:	73 0b       	sbc	r23, r19
 bb0:	84 0b       	sbc	r24, r20
 bb2:	ba 0b       	sbc	r27, r26
 bb4:	ee 1f       	adc	r30, r30
 bb6:	88 f7       	brcc	.-30     	; 0xb9a <__divsf3_pse+0x90>
 bb8:	e0 95       	com	r30
 bba:	08 95       	ret

00000bbc <__fixunssfsi>:
 bbc:	98 d0       	rcall	.+304    	; 0xcee <__fp_splitA>
 bbe:	88 f0       	brcs	.+34     	; 0xbe2 <__fixunssfsi+0x26>
 bc0:	9f 57       	subi	r25, 0x7F	; 127
 bc2:	90 f0       	brcs	.+36     	; 0xbe8 <__fixunssfsi+0x2c>
 bc4:	b9 2f       	mov	r27, r25
 bc6:	99 27       	eor	r25, r25
 bc8:	b7 51       	subi	r27, 0x17	; 23
 bca:	a0 f0       	brcs	.+40     	; 0xbf4 <__fixunssfsi+0x38>
 bcc:	d1 f0       	breq	.+52     	; 0xc02 <__fixunssfsi+0x46>
 bce:	66 0f       	add	r22, r22
 bd0:	77 1f       	adc	r23, r23
 bd2:	88 1f       	adc	r24, r24
 bd4:	99 1f       	adc	r25, r25
 bd6:	1a f0       	brmi	.+6      	; 0xbde <__fixunssfsi+0x22>
 bd8:	ba 95       	dec	r27
 bda:	c9 f7       	brne	.-14     	; 0xbce <__fixunssfsi+0x12>
 bdc:	12 c0       	rjmp	.+36     	; 0xc02 <__fixunssfsi+0x46>
 bde:	b1 30       	cpi	r27, 0x01	; 1
 be0:	81 f0       	breq	.+32     	; 0xc02 <__fixunssfsi+0x46>
 be2:	9f d0       	rcall	.+318    	; 0xd22 <__fp_zero>
 be4:	b1 e0       	ldi	r27, 0x01	; 1
 be6:	08 95       	ret
 be8:	9c c0       	rjmp	.+312    	; 0xd22 <__fp_zero>
 bea:	67 2f       	mov	r22, r23
 bec:	78 2f       	mov	r23, r24
 bee:	88 27       	eor	r24, r24
 bf0:	b8 5f       	subi	r27, 0xF8	; 248
 bf2:	39 f0       	breq	.+14     	; 0xc02 <__fixunssfsi+0x46>
 bf4:	b9 3f       	cpi	r27, 0xF9	; 249
 bf6:	cc f3       	brlt	.-14     	; 0xbea <__fixunssfsi+0x2e>
 bf8:	86 95       	lsr	r24
 bfa:	77 95       	ror	r23
 bfc:	67 95       	ror	r22
 bfe:	b3 95       	inc	r27
 c00:	d9 f7       	brne	.-10     	; 0xbf8 <__fixunssfsi+0x3c>
 c02:	3e f4       	brtc	.+14     	; 0xc12 <__fixunssfsi+0x56>
 c04:	90 95       	com	r25
 c06:	80 95       	com	r24
 c08:	70 95       	com	r23
 c0a:	61 95       	neg	r22
 c0c:	7f 4f       	sbci	r23, 0xFF	; 255
 c0e:	8f 4f       	sbci	r24, 0xFF	; 255
 c10:	9f 4f       	sbci	r25, 0xFF	; 255
 c12:	08 95       	ret

00000c14 <__floatunsisf>:
 c14:	e8 94       	clt
 c16:	09 c0       	rjmp	.+18     	; 0xc2a <__floatsisf+0x12>

00000c18 <__floatsisf>:
 c18:	97 fb       	bst	r25, 7
 c1a:	3e f4       	brtc	.+14     	; 0xc2a <__floatsisf+0x12>
 c1c:	90 95       	com	r25
 c1e:	80 95       	com	r24
 c20:	70 95       	com	r23
 c22:	61 95       	neg	r22
 c24:	7f 4f       	sbci	r23, 0xFF	; 255
 c26:	8f 4f       	sbci	r24, 0xFF	; 255
 c28:	9f 4f       	sbci	r25, 0xFF	; 255
 c2a:	99 23       	and	r25, r25
 c2c:	a9 f0       	breq	.+42     	; 0xc58 <__floatsisf+0x40>
 c2e:	f9 2f       	mov	r31, r25
 c30:	96 e9       	ldi	r25, 0x96	; 150
 c32:	bb 27       	eor	r27, r27
 c34:	93 95       	inc	r25
 c36:	f6 95       	lsr	r31
 c38:	87 95       	ror	r24
 c3a:	77 95       	ror	r23
 c3c:	67 95       	ror	r22
 c3e:	b7 95       	ror	r27
 c40:	f1 11       	cpse	r31, r1
 c42:	f8 cf       	rjmp	.-16     	; 0xc34 <__floatsisf+0x1c>
 c44:	fa f4       	brpl	.+62     	; 0xc84 <__floatsisf+0x6c>
 c46:	bb 0f       	add	r27, r27
 c48:	11 f4       	brne	.+4      	; 0xc4e <__floatsisf+0x36>
 c4a:	60 ff       	sbrs	r22, 0
 c4c:	1b c0       	rjmp	.+54     	; 0xc84 <__floatsisf+0x6c>
 c4e:	6f 5f       	subi	r22, 0xFF	; 255
 c50:	7f 4f       	sbci	r23, 0xFF	; 255
 c52:	8f 4f       	sbci	r24, 0xFF	; 255
 c54:	9f 4f       	sbci	r25, 0xFF	; 255
 c56:	16 c0       	rjmp	.+44     	; 0xc84 <__floatsisf+0x6c>
 c58:	88 23       	and	r24, r24
 c5a:	11 f0       	breq	.+4      	; 0xc60 <__floatsisf+0x48>
 c5c:	96 e9       	ldi	r25, 0x96	; 150
 c5e:	11 c0       	rjmp	.+34     	; 0xc82 <__floatsisf+0x6a>
 c60:	77 23       	and	r23, r23
 c62:	21 f0       	breq	.+8      	; 0xc6c <__floatsisf+0x54>
 c64:	9e e8       	ldi	r25, 0x8E	; 142
 c66:	87 2f       	mov	r24, r23
 c68:	76 2f       	mov	r23, r22
 c6a:	05 c0       	rjmp	.+10     	; 0xc76 <__floatsisf+0x5e>
 c6c:	66 23       	and	r22, r22
 c6e:	71 f0       	breq	.+28     	; 0xc8c <__floatsisf+0x74>
 c70:	96 e8       	ldi	r25, 0x86	; 134
 c72:	86 2f       	mov	r24, r22
 c74:	70 e0       	ldi	r23, 0x00	; 0
 c76:	60 e0       	ldi	r22, 0x00	; 0
 c78:	2a f0       	brmi	.+10     	; 0xc84 <__floatsisf+0x6c>
 c7a:	9a 95       	dec	r25
 c7c:	66 0f       	add	r22, r22
 c7e:	77 1f       	adc	r23, r23
 c80:	88 1f       	adc	r24, r24
 c82:	da f7       	brpl	.-10     	; 0xc7a <__floatsisf+0x62>
 c84:	88 0f       	add	r24, r24
 c86:	96 95       	lsr	r25
 c88:	87 95       	ror	r24
 c8a:	97 f9       	bld	r25, 7
 c8c:	08 95       	ret

00000c8e <__fp_inf>:
 c8e:	97 f9       	bld	r25, 7
 c90:	9f 67       	ori	r25, 0x7F	; 127
 c92:	80 e8       	ldi	r24, 0x80	; 128
 c94:	70 e0       	ldi	r23, 0x00	; 0
 c96:	60 e0       	ldi	r22, 0x00	; 0
 c98:	08 95       	ret

00000c9a <__fp_nan>:
 c9a:	9f ef       	ldi	r25, 0xFF	; 255
 c9c:	80 ec       	ldi	r24, 0xC0	; 192
 c9e:	08 95       	ret

00000ca0 <__fp_pscA>:
 ca0:	00 24       	eor	r0, r0
 ca2:	0a 94       	dec	r0
 ca4:	16 16       	cp	r1, r22
 ca6:	17 06       	cpc	r1, r23
 ca8:	18 06       	cpc	r1, r24
 caa:	09 06       	cpc	r0, r25
 cac:	08 95       	ret

00000cae <__fp_pscB>:
 cae:	00 24       	eor	r0, r0
 cb0:	0a 94       	dec	r0
 cb2:	12 16       	cp	r1, r18
 cb4:	13 06       	cpc	r1, r19
 cb6:	14 06       	cpc	r1, r20
 cb8:	05 06       	cpc	r0, r21
 cba:	08 95       	ret

00000cbc <__fp_round>:
 cbc:	09 2e       	mov	r0, r25
 cbe:	03 94       	inc	r0
 cc0:	00 0c       	add	r0, r0
 cc2:	11 f4       	brne	.+4      	; 0xcc8 <__fp_round+0xc>
 cc4:	88 23       	and	r24, r24
 cc6:	52 f0       	brmi	.+20     	; 0xcdc <__fp_round+0x20>
 cc8:	bb 0f       	add	r27, r27
 cca:	40 f4       	brcc	.+16     	; 0xcdc <__fp_round+0x20>
 ccc:	bf 2b       	or	r27, r31
 cce:	11 f4       	brne	.+4      	; 0xcd4 <__fp_round+0x18>
 cd0:	60 ff       	sbrs	r22, 0
 cd2:	04 c0       	rjmp	.+8      	; 0xcdc <__fp_round+0x20>
 cd4:	6f 5f       	subi	r22, 0xFF	; 255
 cd6:	7f 4f       	sbci	r23, 0xFF	; 255
 cd8:	8f 4f       	sbci	r24, 0xFF	; 255
 cda:	9f 4f       	sbci	r25, 0xFF	; 255
 cdc:	08 95       	ret

00000cde <__fp_split3>:
 cde:	57 fd       	sbrc	r21, 7
 ce0:	90 58       	subi	r25, 0x80	; 128
 ce2:	44 0f       	add	r20, r20
 ce4:	55 1f       	adc	r21, r21
 ce6:	59 f0       	breq	.+22     	; 0xcfe <__fp_splitA+0x10>
 ce8:	5f 3f       	cpi	r21, 0xFF	; 255
 cea:	71 f0       	breq	.+28     	; 0xd08 <__fp_splitA+0x1a>
 cec:	47 95       	ror	r20

00000cee <__fp_splitA>:
 cee:	88 0f       	add	r24, r24
 cf0:	97 fb       	bst	r25, 7
 cf2:	99 1f       	adc	r25, r25
 cf4:	61 f0       	breq	.+24     	; 0xd0e <__fp_splitA+0x20>
 cf6:	9f 3f       	cpi	r25, 0xFF	; 255
 cf8:	79 f0       	breq	.+30     	; 0xd18 <__fp_splitA+0x2a>
 cfa:	87 95       	ror	r24
 cfc:	08 95       	ret
 cfe:	12 16       	cp	r1, r18
 d00:	13 06       	cpc	r1, r19
 d02:	14 06       	cpc	r1, r20
 d04:	55 1f       	adc	r21, r21
 d06:	f2 cf       	rjmp	.-28     	; 0xcec <__fp_split3+0xe>
 d08:	46 95       	lsr	r20
 d0a:	f1 df       	rcall	.-30     	; 0xcee <__fp_splitA>
 d0c:	08 c0       	rjmp	.+16     	; 0xd1e <__fp_splitA+0x30>
 d0e:	16 16       	cp	r1, r22
 d10:	17 06       	cpc	r1, r23
 d12:	18 06       	cpc	r1, r24
 d14:	99 1f       	adc	r25, r25
 d16:	f1 cf       	rjmp	.-30     	; 0xcfa <__fp_splitA+0xc>
 d18:	86 95       	lsr	r24
 d1a:	71 05       	cpc	r23, r1
 d1c:	61 05       	cpc	r22, r1
 d1e:	08 94       	sec
 d20:	08 95       	ret

00000d22 <__fp_zero>:
 d22:	e8 94       	clt

00000d24 <__fp_szero>:
 d24:	bb 27       	eor	r27, r27
 d26:	66 27       	eor	r22, r22
 d28:	77 27       	eor	r23, r23
 d2a:	cb 01       	movw	r24, r22
 d2c:	97 f9       	bld	r25, 7
 d2e:	08 95       	ret

00000d30 <__mulsf3>:
 d30:	0b d0       	rcall	.+22     	; 0xd48 <__mulsf3x>
 d32:	c4 cf       	rjmp	.-120    	; 0xcbc <__fp_round>
 d34:	b5 df       	rcall	.-150    	; 0xca0 <__fp_pscA>
 d36:	28 f0       	brcs	.+10     	; 0xd42 <__mulsf3+0x12>
 d38:	ba df       	rcall	.-140    	; 0xcae <__fp_pscB>
 d3a:	18 f0       	brcs	.+6      	; 0xd42 <__mulsf3+0x12>
 d3c:	95 23       	and	r25, r21
 d3e:	09 f0       	breq	.+2      	; 0xd42 <__mulsf3+0x12>
 d40:	a6 cf       	rjmp	.-180    	; 0xc8e <__fp_inf>
 d42:	ab cf       	rjmp	.-170    	; 0xc9a <__fp_nan>
 d44:	11 24       	eor	r1, r1
 d46:	ee cf       	rjmp	.-36     	; 0xd24 <__fp_szero>

00000d48 <__mulsf3x>:
 d48:	ca df       	rcall	.-108    	; 0xcde <__fp_split3>
 d4a:	a0 f3       	brcs	.-24     	; 0xd34 <__mulsf3+0x4>

00000d4c <__mulsf3_pse>:
 d4c:	95 9f       	mul	r25, r21
 d4e:	d1 f3       	breq	.-12     	; 0xd44 <__mulsf3+0x14>
 d50:	95 0f       	add	r25, r21
 d52:	50 e0       	ldi	r21, 0x00	; 0
 d54:	55 1f       	adc	r21, r21
 d56:	62 9f       	mul	r22, r18
 d58:	f0 01       	movw	r30, r0
 d5a:	72 9f       	mul	r23, r18
 d5c:	bb 27       	eor	r27, r27
 d5e:	f0 0d       	add	r31, r0
 d60:	b1 1d       	adc	r27, r1
 d62:	63 9f       	mul	r22, r19
 d64:	aa 27       	eor	r26, r26
 d66:	f0 0d       	add	r31, r0
 d68:	b1 1d       	adc	r27, r1
 d6a:	aa 1f       	adc	r26, r26
 d6c:	64 9f       	mul	r22, r20
 d6e:	66 27       	eor	r22, r22
 d70:	b0 0d       	add	r27, r0
 d72:	a1 1d       	adc	r26, r1
 d74:	66 1f       	adc	r22, r22
 d76:	82 9f       	mul	r24, r18
 d78:	22 27       	eor	r18, r18
 d7a:	b0 0d       	add	r27, r0
 d7c:	a1 1d       	adc	r26, r1
 d7e:	62 1f       	adc	r22, r18
 d80:	73 9f       	mul	r23, r19
 d82:	b0 0d       	add	r27, r0
 d84:	a1 1d       	adc	r26, r1
 d86:	62 1f       	adc	r22, r18
 d88:	83 9f       	mul	r24, r19
 d8a:	a0 0d       	add	r26, r0
 d8c:	61 1d       	adc	r22, r1
 d8e:	22 1f       	adc	r18, r18
 d90:	74 9f       	mul	r23, r20
 d92:	33 27       	eor	r19, r19
 d94:	a0 0d       	add	r26, r0
 d96:	61 1d       	adc	r22, r1
 d98:	23 1f       	adc	r18, r19
 d9a:	84 9f       	mul	r24, r20
 d9c:	60 0d       	add	r22, r0
 d9e:	21 1d       	adc	r18, r1
 da0:	82 2f       	mov	r24, r18
 da2:	76 2f       	mov	r23, r22
 da4:	6a 2f       	mov	r22, r26
 da6:	11 24       	eor	r1, r1
 da8:	9f 57       	subi	r25, 0x7F	; 127
 daa:	50 40       	sbci	r21, 0x00	; 0
 dac:	8a f0       	brmi	.+34     	; 0xdd0 <__mulsf3_pse+0x84>
 dae:	e1 f0       	breq	.+56     	; 0xde8 <__mulsf3_pse+0x9c>
 db0:	88 23       	and	r24, r24
 db2:	4a f0       	brmi	.+18     	; 0xdc6 <__mulsf3_pse+0x7a>
 db4:	ee 0f       	add	r30, r30
 db6:	ff 1f       	adc	r31, r31
 db8:	bb 1f       	adc	r27, r27
 dba:	66 1f       	adc	r22, r22
 dbc:	77 1f       	adc	r23, r23
 dbe:	88 1f       	adc	r24, r24
 dc0:	91 50       	subi	r25, 0x01	; 1
 dc2:	50 40       	sbci	r21, 0x00	; 0
 dc4:	a9 f7       	brne	.-22     	; 0xdb0 <__mulsf3_pse+0x64>
 dc6:	9e 3f       	cpi	r25, 0xFE	; 254
 dc8:	51 05       	cpc	r21, r1
 dca:	70 f0       	brcs	.+28     	; 0xde8 <__mulsf3_pse+0x9c>
 dcc:	60 cf       	rjmp	.-320    	; 0xc8e <__fp_inf>
 dce:	aa cf       	rjmp	.-172    	; 0xd24 <__fp_szero>
 dd0:	5f 3f       	cpi	r21, 0xFF	; 255
 dd2:	ec f3       	brlt	.-6      	; 0xdce <__mulsf3_pse+0x82>
 dd4:	98 3e       	cpi	r25, 0xE8	; 232
 dd6:	dc f3       	brlt	.-10     	; 0xdce <__mulsf3_pse+0x82>
 dd8:	86 95       	lsr	r24
 dda:	77 95       	ror	r23
 ddc:	67 95       	ror	r22
 dde:	b7 95       	ror	r27
 de0:	f7 95       	ror	r31
 de2:	e7 95       	ror	r30
 de4:	9f 5f       	subi	r25, 0xFF	; 255
 de6:	c1 f7       	brne	.-16     	; 0xdd8 <__mulsf3_pse+0x8c>
 de8:	fe 2b       	or	r31, r30
 dea:	88 0f       	add	r24, r24
 dec:	91 1d       	adc	r25, r1
 dee:	96 95       	lsr	r25
 df0:	87 95       	ror	r24
 df2:	97 f9       	bld	r25, 7
 df4:	08 95       	ret

00000df6 <_exit>:
 df6:	f8 94       	cli

00000df8 <__stop_program>:
 df8:	ff cf       	rjmp	.-2      	; 0xdf8 <__stop_program>
