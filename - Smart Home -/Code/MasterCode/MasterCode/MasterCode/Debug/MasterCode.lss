
MasterCode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000180e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000220  00800060  0000180e  00001882  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00001aa4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00002170  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000180  00000000  00000000  000021f8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001ed9  00000000  00000000  00002378  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000760  00000000  00000000  00004251  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000010cb  00000000  00000000  000049b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002bc  00000000  00000000  00005a7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000428  00000000  00000000  00005d38  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000222f  00000000  00000000  00006160  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  0000838f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e0       	ldi	r30, 0x0E	; 14
      68:	f8 e1       	ldi	r31, 0x18	; 24
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a0 e8       	ldi	r26, 0x80	; 128
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 38       	cpi	r26, 0x80	; 128
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 4f 04 	call	0x89e	; 0x89e <main>
      8a:	0c 94 05 0c 	jmp	0x180a	; 0x180a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_vsetPinDir>:
 *Function Description : Set the direction of the given pin in the given port (direction 0 = input : 1 = output)
 */

void DIO_vsetPinDir(unsigned char portname,unsigned char pinnumber,unsigned char direction)
{
	switch(portname)
      92:	82 34       	cpi	r24, 0x42	; 66
      94:	51 f1       	breq	.+84     	; 0xea <DIO_vsetPinDir+0x58>
      96:	83 34       	cpi	r24, 0x43	; 67
      98:	20 f4       	brcc	.+8      	; 0xa2 <DIO_vsetPinDir+0x10>
      9a:	81 34       	cpi	r24, 0x41	; 65
      9c:	09 f0       	breq	.+2      	; 0xa0 <DIO_vsetPinDir+0xe>
      9e:	7b c0       	rjmp	.+246    	; 0x196 <DIO_vsetPinDir+0x104>
      a0:	07 c0       	rjmp	.+14     	; 0xb0 <DIO_vsetPinDir+0x1e>
      a2:	83 34       	cpi	r24, 0x43	; 67
      a4:	09 f4       	brne	.+2      	; 0xa8 <DIO_vsetPinDir+0x16>
      a6:	3e c0       	rjmp	.+124    	; 0x124 <DIO_vsetPinDir+0x92>
      a8:	84 34       	cpi	r24, 0x44	; 68
      aa:	09 f0       	breq	.+2      	; 0xae <DIO_vsetPinDir+0x1c>
      ac:	74 c0       	rjmp	.+232    	; 0x196 <DIO_vsetPinDir+0x104>
      ae:	57 c0       	rjmp	.+174    	; 0x15e <DIO_vsetPinDir+0xcc>
	{
		case 'A':
		if (direction == 1)
      b0:	41 30       	cpi	r20, 0x01	; 1
      b2:	69 f4       	brne	.+26     	; 0xce <DIO_vsetPinDir+0x3c>
			{
				SetBit(DDRA,pinnumber);     //Set the direction 1 = output of the given pin in port A as output
      b4:	2a b3       	in	r18, 0x1a	; 26
      b6:	81 e0       	ldi	r24, 0x01	; 1
      b8:	90 e0       	ldi	r25, 0x00	; 0
      ba:	ac 01       	movw	r20, r24
      bc:	02 c0       	rjmp	.+4      	; 0xc2 <DIO_vsetPinDir+0x30>
      be:	44 0f       	add	r20, r20
      c0:	55 1f       	adc	r21, r21
      c2:	6a 95       	dec	r22
      c4:	e2 f7       	brpl	.-8      	; 0xbe <DIO_vsetPinDir+0x2c>
      c6:	ba 01       	movw	r22, r20
      c8:	62 2b       	or	r22, r18
      ca:	6a bb       	out	0x1a, r22	; 26
      cc:	08 95       	ret
			}
		else
			{
				ClearBit(DDRA,pinnumber);    //Set the direction 0 = input of the given pin in port A as input
      ce:	2a b3       	in	r18, 0x1a	; 26
      d0:	81 e0       	ldi	r24, 0x01	; 1
      d2:	90 e0       	ldi	r25, 0x00	; 0
      d4:	ac 01       	movw	r20, r24
      d6:	02 c0       	rjmp	.+4      	; 0xdc <DIO_vsetPinDir+0x4a>
      d8:	44 0f       	add	r20, r20
      da:	55 1f       	adc	r21, r21
      dc:	6a 95       	dec	r22
      de:	e2 f7       	brpl	.-8      	; 0xd8 <DIO_vsetPinDir+0x46>
      e0:	ba 01       	movw	r22, r20
      e2:	60 95       	com	r22
      e4:	62 23       	and	r22, r18
      e6:	6a bb       	out	0x1a, r22	; 26
      e8:	08 95       	ret
			}
		break;	
				  	
				  
		case 'B':
		if (direction == 1)
      ea:	41 30       	cpi	r20, 0x01	; 1
      ec:	69 f4       	brne	.+26     	; 0x108 <DIO_vsetPinDir+0x76>
			{
				SetBit(DDRB,pinnumber);     //Set the direction 1 = output of the given pin in port B as output
      ee:	27 b3       	in	r18, 0x17	; 23
      f0:	81 e0       	ldi	r24, 0x01	; 1
      f2:	90 e0       	ldi	r25, 0x00	; 0
      f4:	ac 01       	movw	r20, r24
      f6:	02 c0       	rjmp	.+4      	; 0xfc <DIO_vsetPinDir+0x6a>
      f8:	44 0f       	add	r20, r20
      fa:	55 1f       	adc	r21, r21
      fc:	6a 95       	dec	r22
      fe:	e2 f7       	brpl	.-8      	; 0xf8 <DIO_vsetPinDir+0x66>
     100:	ba 01       	movw	r22, r20
     102:	62 2b       	or	r22, r18
     104:	67 bb       	out	0x17, r22	; 23
     106:	08 95       	ret
			}
		else
			{
				ClearBit(DDRB,pinnumber);    //Set the direction 0 = input of the given pin in port B as input
     108:	27 b3       	in	r18, 0x17	; 23
     10a:	81 e0       	ldi	r24, 0x01	; 1
     10c:	90 e0       	ldi	r25, 0x00	; 0
     10e:	ac 01       	movw	r20, r24
     110:	02 c0       	rjmp	.+4      	; 0x116 <DIO_vsetPinDir+0x84>
     112:	44 0f       	add	r20, r20
     114:	55 1f       	adc	r21, r21
     116:	6a 95       	dec	r22
     118:	e2 f7       	brpl	.-8      	; 0x112 <DIO_vsetPinDir+0x80>
     11a:	ba 01       	movw	r22, r20
     11c:	60 95       	com	r22
     11e:	62 23       	and	r22, r18
     120:	67 bb       	out	0x17, r22	; 23
     122:	08 95       	ret
			}
		break;
				
		case 'C':
		if (direction == 1)
     124:	41 30       	cpi	r20, 0x01	; 1
     126:	69 f4       	brne	.+26     	; 0x142 <DIO_vsetPinDir+0xb0>
			{
				SetBit(DDRC,pinnumber);     //Set the direction 1 = output of the given pin in port C as output
     128:	24 b3       	in	r18, 0x14	; 20
     12a:	81 e0       	ldi	r24, 0x01	; 1
     12c:	90 e0       	ldi	r25, 0x00	; 0
     12e:	ac 01       	movw	r20, r24
     130:	02 c0       	rjmp	.+4      	; 0x136 <DIO_vsetPinDir+0xa4>
     132:	44 0f       	add	r20, r20
     134:	55 1f       	adc	r21, r21
     136:	6a 95       	dec	r22
     138:	e2 f7       	brpl	.-8      	; 0x132 <DIO_vsetPinDir+0xa0>
     13a:	ba 01       	movw	r22, r20
     13c:	62 2b       	or	r22, r18
     13e:	64 bb       	out	0x14, r22	; 20
     140:	08 95       	ret
			}
		else
			{
				ClearBit(DDRC,pinnumber);    //Set the direction 0 = input of the given pin in port C as input
     142:	24 b3       	in	r18, 0x14	; 20
     144:	81 e0       	ldi	r24, 0x01	; 1
     146:	90 e0       	ldi	r25, 0x00	; 0
     148:	ac 01       	movw	r20, r24
     14a:	02 c0       	rjmp	.+4      	; 0x150 <DIO_vsetPinDir+0xbe>
     14c:	44 0f       	add	r20, r20
     14e:	55 1f       	adc	r21, r21
     150:	6a 95       	dec	r22
     152:	e2 f7       	brpl	.-8      	; 0x14c <DIO_vsetPinDir+0xba>
     154:	ba 01       	movw	r22, r20
     156:	60 95       	com	r22
     158:	62 23       	and	r22, r18
     15a:	64 bb       	out	0x14, r22	; 20
     15c:	08 95       	ret
			}
		break;
				
		case 'D':
		if (direction == 1)
     15e:	41 30       	cpi	r20, 0x01	; 1
     160:	69 f4       	brne	.+26     	; 0x17c <DIO_vsetPinDir+0xea>
			{
				SetBit(DDRD,pinnumber);     //Set the direction 1 = output of the given pin in port D as output
     162:	21 b3       	in	r18, 0x11	; 17
     164:	81 e0       	ldi	r24, 0x01	; 1
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	ac 01       	movw	r20, r24
     16a:	02 c0       	rjmp	.+4      	; 0x170 <DIO_vsetPinDir+0xde>
     16c:	44 0f       	add	r20, r20
     16e:	55 1f       	adc	r21, r21
     170:	6a 95       	dec	r22
     172:	e2 f7       	brpl	.-8      	; 0x16c <DIO_vsetPinDir+0xda>
     174:	ba 01       	movw	r22, r20
     176:	62 2b       	or	r22, r18
     178:	61 bb       	out	0x11, r22	; 17
     17a:	08 95       	ret
			}
		else
			{
				ClearBit(DDRD,pinnumber);    //Set the direction  0 = input of the given pin in port D as input
     17c:	21 b3       	in	r18, 0x11	; 17
     17e:	81 e0       	ldi	r24, 0x01	; 1
     180:	90 e0       	ldi	r25, 0x00	; 0
     182:	ac 01       	movw	r20, r24
     184:	02 c0       	rjmp	.+4      	; 0x18a <DIO_vsetPinDir+0xf8>
     186:	44 0f       	add	r20, r20
     188:	55 1f       	adc	r21, r21
     18a:	6a 95       	dec	r22
     18c:	e2 f7       	brpl	.-8      	; 0x186 <DIO_vsetPinDir+0xf4>
     18e:	ba 01       	movw	r22, r20
     190:	60 95       	com	r22
     192:	62 23       	and	r22, r18
     194:	61 bb       	out	0x11, r22	; 17
     196:	08 95       	ret

00000198 <DIO_vsetPortDir>:
 *Function Description : set the direction of whole port . (port direction 0 = input port : 1 = output port)
 */

void DIO_vsetPortDir(unsigned char portname,unsigned char direction)
{
	switch(portname)
     198:	82 34       	cpi	r24, 0x42	; 66
     19a:	61 f0       	breq	.+24     	; 0x1b4 <DIO_vsetPortDir+0x1c>
     19c:	83 34       	cpi	r24, 0x43	; 67
     19e:	18 f4       	brcc	.+6      	; 0x1a6 <DIO_vsetPortDir+0xe>
     1a0:	81 34       	cpi	r24, 0x41	; 65
     1a2:	69 f4       	brne	.+26     	; 0x1be <DIO_vsetPortDir+0x26>
     1a4:	05 c0       	rjmp	.+10     	; 0x1b0 <DIO_vsetPortDir+0x18>
     1a6:	83 34       	cpi	r24, 0x43	; 67
     1a8:	39 f0       	breq	.+14     	; 0x1b8 <DIO_vsetPortDir+0x20>
     1aa:	84 34       	cpi	r24, 0x44	; 68
     1ac:	41 f4       	brne	.+16     	; 0x1be <DIO_vsetPortDir+0x26>
     1ae:	06 c0       	rjmp	.+12     	; 0x1bc <DIO_vsetPortDir+0x24>
	{
		case 'A':
		DDRA=direction;    //set the direction of port A		
     1b0:	6a bb       	out	0x1a, r22	; 26
		break;
     1b2:	08 95       	ret
		
		case 'B':
		DDRB=direction;    //set the direction of port B
     1b4:	67 bb       	out	0x17, r22	; 23
		break;
     1b6:	08 95       	ret
		
		case 'C':
		DDRC=direction;    //set the direction of port C
     1b8:	64 bb       	out	0x14, r22	; 20
		break;
     1ba:	08 95       	ret
		
		case 'D':
		DDRD=direction;    //set the direction of port D	
     1bc:	61 bb       	out	0x11, r22	; 17
     1be:	08 95       	ret

000001c0 <DIO_vwritePin>:
 *Function Description : Set the value of the given pin in the given port (outputvalue 0 = low : 1 = high)
 */

void DIO_vwritePin(unsigned char portname,unsigned char pinnumber,unsigned char value)
{
	switch(portname)
     1c0:	82 34       	cpi	r24, 0x42	; 66
     1c2:	51 f1       	breq	.+84     	; 0x218 <DIO_vwritePin+0x58>
     1c4:	83 34       	cpi	r24, 0x43	; 67
     1c6:	20 f4       	brcc	.+8      	; 0x1d0 <DIO_vwritePin+0x10>
     1c8:	81 34       	cpi	r24, 0x41	; 65
     1ca:	09 f0       	breq	.+2      	; 0x1ce <DIO_vwritePin+0xe>
     1cc:	7b c0       	rjmp	.+246    	; 0x2c4 <DIO_vwritePin+0x104>
     1ce:	07 c0       	rjmp	.+14     	; 0x1de <DIO_vwritePin+0x1e>
     1d0:	83 34       	cpi	r24, 0x43	; 67
     1d2:	09 f4       	brne	.+2      	; 0x1d6 <DIO_vwritePin+0x16>
     1d4:	3e c0       	rjmp	.+124    	; 0x252 <DIO_vwritePin+0x92>
     1d6:	84 34       	cpi	r24, 0x44	; 68
     1d8:	09 f0       	breq	.+2      	; 0x1dc <DIO_vwritePin+0x1c>
     1da:	74 c0       	rjmp	.+232    	; 0x2c4 <DIO_vwritePin+0x104>
     1dc:	57 c0       	rjmp	.+174    	; 0x28c <DIO_vwritePin+0xcc>
	{
		case 'A':
		if (value==1)
     1de:	41 30       	cpi	r20, 0x01	; 1
     1e0:	69 f4       	brne	.+26     	; 0x1fc <DIO_vwritePin+0x3c>
		{
			SetBit(PORTA,pinnumber);  //Set the value of the given pin in port A as High
     1e2:	2b b3       	in	r18, 0x1b	; 27
     1e4:	81 e0       	ldi	r24, 0x01	; 1
     1e6:	90 e0       	ldi	r25, 0x00	; 0
     1e8:	ac 01       	movw	r20, r24
     1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <DIO_vwritePin+0x30>
     1ec:	44 0f       	add	r20, r20
     1ee:	55 1f       	adc	r21, r21
     1f0:	6a 95       	dec	r22
     1f2:	e2 f7       	brpl	.-8      	; 0x1ec <DIO_vwritePin+0x2c>
     1f4:	ba 01       	movw	r22, r20
     1f6:	62 2b       	or	r22, r18
     1f8:	6b bb       	out	0x1b, r22	; 27
     1fa:	08 95       	ret
		}
		else
		{
			ClearBit(PORTA,pinnumber);  //Set the value of the given pin in port A as Low
     1fc:	2b b3       	in	r18, 0x1b	; 27
     1fe:	81 e0       	ldi	r24, 0x01	; 1
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	ac 01       	movw	r20, r24
     204:	02 c0       	rjmp	.+4      	; 0x20a <DIO_vwritePin+0x4a>
     206:	44 0f       	add	r20, r20
     208:	55 1f       	adc	r21, r21
     20a:	6a 95       	dec	r22
     20c:	e2 f7       	brpl	.-8      	; 0x206 <DIO_vwritePin+0x46>
     20e:	ba 01       	movw	r22, r20
     210:	60 95       	com	r22
     212:	62 23       	and	r22, r18
     214:	6b bb       	out	0x1b, r22	; 27
     216:	08 95       	ret
		}
		break;
		
		case 'B':
		if (value==1)
     218:	41 30       	cpi	r20, 0x01	; 1
     21a:	69 f4       	brne	.+26     	; 0x236 <DIO_vwritePin+0x76>
		{
			SetBit(PORTB,pinnumber);  //Set the value of the given pin in port B as High
     21c:	28 b3       	in	r18, 0x18	; 24
     21e:	81 e0       	ldi	r24, 0x01	; 1
     220:	90 e0       	ldi	r25, 0x00	; 0
     222:	ac 01       	movw	r20, r24
     224:	02 c0       	rjmp	.+4      	; 0x22a <DIO_vwritePin+0x6a>
     226:	44 0f       	add	r20, r20
     228:	55 1f       	adc	r21, r21
     22a:	6a 95       	dec	r22
     22c:	e2 f7       	brpl	.-8      	; 0x226 <DIO_vwritePin+0x66>
     22e:	ba 01       	movw	r22, r20
     230:	62 2b       	or	r22, r18
     232:	68 bb       	out	0x18, r22	; 24
     234:	08 95       	ret
		}
		else
		{
			ClearBit(PORTB,pinnumber);  //Set the value of the given pin in port B as Low
     236:	28 b3       	in	r18, 0x18	; 24
     238:	81 e0       	ldi	r24, 0x01	; 1
     23a:	90 e0       	ldi	r25, 0x00	; 0
     23c:	ac 01       	movw	r20, r24
     23e:	02 c0       	rjmp	.+4      	; 0x244 <DIO_vwritePin+0x84>
     240:	44 0f       	add	r20, r20
     242:	55 1f       	adc	r21, r21
     244:	6a 95       	dec	r22
     246:	e2 f7       	brpl	.-8      	; 0x240 <DIO_vwritePin+0x80>
     248:	ba 01       	movw	r22, r20
     24a:	60 95       	com	r22
     24c:	62 23       	and	r22, r18
     24e:	68 bb       	out	0x18, r22	; 24
     250:	08 95       	ret
		}
		break;
		
		case 'C':
		if (value==1)
     252:	41 30       	cpi	r20, 0x01	; 1
     254:	69 f4       	brne	.+26     	; 0x270 <DIO_vwritePin+0xb0>
		{
			SetBit(PORTC,pinnumber);  //Set the value of the given pin in port C as High
     256:	25 b3       	in	r18, 0x15	; 21
     258:	81 e0       	ldi	r24, 0x01	; 1
     25a:	90 e0       	ldi	r25, 0x00	; 0
     25c:	ac 01       	movw	r20, r24
     25e:	02 c0       	rjmp	.+4      	; 0x264 <DIO_vwritePin+0xa4>
     260:	44 0f       	add	r20, r20
     262:	55 1f       	adc	r21, r21
     264:	6a 95       	dec	r22
     266:	e2 f7       	brpl	.-8      	; 0x260 <DIO_vwritePin+0xa0>
     268:	ba 01       	movw	r22, r20
     26a:	62 2b       	or	r22, r18
     26c:	65 bb       	out	0x15, r22	; 21
     26e:	08 95       	ret
		}
		else
		{
			ClearBit(PORTC,pinnumber);  //Set the value of the given pin in port C as Low
     270:	25 b3       	in	r18, 0x15	; 21
     272:	81 e0       	ldi	r24, 0x01	; 1
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	ac 01       	movw	r20, r24
     278:	02 c0       	rjmp	.+4      	; 0x27e <DIO_vwritePin+0xbe>
     27a:	44 0f       	add	r20, r20
     27c:	55 1f       	adc	r21, r21
     27e:	6a 95       	dec	r22
     280:	e2 f7       	brpl	.-8      	; 0x27a <DIO_vwritePin+0xba>
     282:	ba 01       	movw	r22, r20
     284:	60 95       	com	r22
     286:	62 23       	and	r22, r18
     288:	65 bb       	out	0x15, r22	; 21
     28a:	08 95       	ret
		}
		break;
		
		case 'D':
		if (value==1)
     28c:	41 30       	cpi	r20, 0x01	; 1
     28e:	69 f4       	brne	.+26     	; 0x2aa <DIO_vwritePin+0xea>
		{
			SetBit(PORTD,pinnumber);  //Set the value of the given pin in port D as High
     290:	22 b3       	in	r18, 0x12	; 18
     292:	81 e0       	ldi	r24, 0x01	; 1
     294:	90 e0       	ldi	r25, 0x00	; 0
     296:	ac 01       	movw	r20, r24
     298:	02 c0       	rjmp	.+4      	; 0x29e <DIO_vwritePin+0xde>
     29a:	44 0f       	add	r20, r20
     29c:	55 1f       	adc	r21, r21
     29e:	6a 95       	dec	r22
     2a0:	e2 f7       	brpl	.-8      	; 0x29a <DIO_vwritePin+0xda>
     2a2:	ba 01       	movw	r22, r20
     2a4:	62 2b       	or	r22, r18
     2a6:	62 bb       	out	0x12, r22	; 18
     2a8:	08 95       	ret
		}
		else
		{
			ClearBit(PORTD,pinnumber);  //Set the value of the given pin in port D as Low
     2aa:	22 b3       	in	r18, 0x12	; 18
     2ac:	81 e0       	ldi	r24, 0x01	; 1
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	ac 01       	movw	r20, r24
     2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <DIO_vwritePin+0xf8>
     2b4:	44 0f       	add	r20, r20
     2b6:	55 1f       	adc	r21, r21
     2b8:	6a 95       	dec	r22
     2ba:	e2 f7       	brpl	.-8      	; 0x2b4 <DIO_vwritePin+0xf4>
     2bc:	ba 01       	movw	r22, r20
     2be:	60 95       	com	r22
     2c0:	62 23       	and	r22, r18
     2c2:	62 bb       	out	0x12, r22	; 18
     2c4:	08 95       	ret

000002c6 <DIO_vwritePort>:
 *Function Description : Write the value to all port pins (outputvalue 0 = low : 1 = high)
 */

void DIO_vwritePort(unsigned char portname,unsigned char value)
{
	switch(portname)
     2c6:	82 34       	cpi	r24, 0x42	; 66
     2c8:	61 f0       	breq	.+24     	; 0x2e2 <DIO_vwritePort+0x1c>
     2ca:	83 34       	cpi	r24, 0x43	; 67
     2cc:	18 f4       	brcc	.+6      	; 0x2d4 <DIO_vwritePort+0xe>
     2ce:	81 34       	cpi	r24, 0x41	; 65
     2d0:	69 f4       	brne	.+26     	; 0x2ec <DIO_vwritePort+0x26>
     2d2:	05 c0       	rjmp	.+10     	; 0x2de <DIO_vwritePort+0x18>
     2d4:	83 34       	cpi	r24, 0x43	; 67
     2d6:	39 f0       	breq	.+14     	; 0x2e6 <DIO_vwritePort+0x20>
     2d8:	84 34       	cpi	r24, 0x44	; 68
     2da:	41 f4       	brne	.+16     	; 0x2ec <DIO_vwritePort+0x26>
     2dc:	06 c0       	rjmp	.+12     	; 0x2ea <DIO_vwritePort+0x24>
	{
		case 'A':
		PORTA=value;   //Write the given value to the port A
     2de:	6b bb       	out	0x1b, r22	; 27
		break;
     2e0:	08 95       	ret
		
		case 'B':
		PORTB=value;   //Write the given value to the port B
     2e2:	68 bb       	out	0x18, r22	; 24
		break;
     2e4:	08 95       	ret
		
		case 'C':
		PORTC=value;   //Write the given value to the port C
     2e6:	65 bb       	out	0x15, r22	; 21
		break;
     2e8:	08 95       	ret
		
		case 'D':
		PORTD=value;   //Write the given value to the port D
     2ea:	62 bb       	out	0x12, r22	; 18
     2ec:	08 95       	ret

000002ee <DIO_u8readPin>:
 */

unsigned char DIO_u8readPin(unsigned char portname,unsigned char pinnumber)
{
	unsigned char return_value=0;
	switch(portname)
     2ee:	82 34       	cpi	r24, 0x42	; 66
     2f0:	f1 f0       	breq	.+60     	; 0x32e <DIO_u8readPin+0x40>
     2f2:	83 34       	cpi	r24, 0x43	; 67
     2f4:	20 f4       	brcc	.+8      	; 0x2fe <DIO_u8readPin+0x10>
     2f6:	81 34       	cpi	r24, 0x41	; 65
     2f8:	09 f0       	breq	.+2      	; 0x2fc <DIO_u8readPin+0xe>
     2fa:	4f c0       	rjmp	.+158    	; 0x39a <DIO_u8readPin+0xac>
     2fc:	06 c0       	rjmp	.+12     	; 0x30a <DIO_u8readPin+0x1c>
     2fe:	83 34       	cpi	r24, 0x43	; 67
     300:	41 f1       	breq	.+80     	; 0x352 <DIO_u8readPin+0x64>
     302:	84 34       	cpi	r24, 0x44	; 68
     304:	09 f0       	breq	.+2      	; 0x308 <DIO_u8readPin+0x1a>
     306:	49 c0       	rjmp	.+146    	; 0x39a <DIO_u8readPin+0xac>
     308:	36 c0       	rjmp	.+108    	; 0x376 <DIO_u8readPin+0x88>
	{
		case 'A':
		return_value = ReadBit(PINA,pinnumber);   //Read the value from the given pin in port A
     30a:	29 b3       	in	r18, 0x19	; 25
     30c:	81 e0       	ldi	r24, 0x01	; 1
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	06 2e       	mov	r0, r22
     312:	02 c0       	rjmp	.+4      	; 0x318 <DIO_u8readPin+0x2a>
     314:	88 0f       	add	r24, r24
     316:	99 1f       	adc	r25, r25
     318:	0a 94       	dec	r0
     31a:	e2 f7       	brpl	.-8      	; 0x314 <DIO_u8readPin+0x26>
     31c:	30 e0       	ldi	r19, 0x00	; 0
     31e:	82 23       	and	r24, r18
     320:	93 23       	and	r25, r19
     322:	02 c0       	rjmp	.+4      	; 0x328 <DIO_u8readPin+0x3a>
     324:	95 95       	asr	r25
     326:	87 95       	ror	r24
     328:	6a 95       	dec	r22
     32a:	e2 f7       	brpl	.-8      	; 0x324 <DIO_u8readPin+0x36>
		break;
     32c:	08 95       	ret
		
		case 'B':
		return_value = ReadBit(PINB,pinnumber);   //Read the value from the given pin in port B
     32e:	26 b3       	in	r18, 0x16	; 22
     330:	81 e0       	ldi	r24, 0x01	; 1
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	06 2e       	mov	r0, r22
     336:	02 c0       	rjmp	.+4      	; 0x33c <DIO_u8readPin+0x4e>
     338:	88 0f       	add	r24, r24
     33a:	99 1f       	adc	r25, r25
     33c:	0a 94       	dec	r0
     33e:	e2 f7       	brpl	.-8      	; 0x338 <DIO_u8readPin+0x4a>
     340:	30 e0       	ldi	r19, 0x00	; 0
     342:	82 23       	and	r24, r18
     344:	93 23       	and	r25, r19
     346:	02 c0       	rjmp	.+4      	; 0x34c <DIO_u8readPin+0x5e>
     348:	95 95       	asr	r25
     34a:	87 95       	ror	r24
     34c:	6a 95       	dec	r22
     34e:	e2 f7       	brpl	.-8      	; 0x348 <DIO_u8readPin+0x5a>
		break;
     350:	08 95       	ret
		
		case 'C':
		return_value = ReadBit(PINC,pinnumber);   //Read the value from the given pin in port C
     352:	23 b3       	in	r18, 0x13	; 19
     354:	81 e0       	ldi	r24, 0x01	; 1
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	06 2e       	mov	r0, r22
     35a:	02 c0       	rjmp	.+4      	; 0x360 <DIO_u8readPin+0x72>
     35c:	88 0f       	add	r24, r24
     35e:	99 1f       	adc	r25, r25
     360:	0a 94       	dec	r0
     362:	e2 f7       	brpl	.-8      	; 0x35c <DIO_u8readPin+0x6e>
     364:	30 e0       	ldi	r19, 0x00	; 0
     366:	82 23       	and	r24, r18
     368:	93 23       	and	r25, r19
     36a:	02 c0       	rjmp	.+4      	; 0x370 <DIO_u8readPin+0x82>
     36c:	95 95       	asr	r25
     36e:	87 95       	ror	r24
     370:	6a 95       	dec	r22
     372:	e2 f7       	brpl	.-8      	; 0x36c <DIO_u8readPin+0x7e>
		break;
     374:	08 95       	ret
		
		case 'D':
		return_value = ReadBit(PIND,pinnumber);   //Read the value from the given pin in port D
     376:	20 b3       	in	r18, 0x10	; 16
     378:	81 e0       	ldi	r24, 0x01	; 1
     37a:	90 e0       	ldi	r25, 0x00	; 0
     37c:	06 2e       	mov	r0, r22
     37e:	02 c0       	rjmp	.+4      	; 0x384 <DIO_u8readPin+0x96>
     380:	88 0f       	add	r24, r24
     382:	99 1f       	adc	r25, r25
     384:	0a 94       	dec	r0
     386:	e2 f7       	brpl	.-8      	; 0x380 <DIO_u8readPin+0x92>
     388:	30 e0       	ldi	r19, 0x00	; 0
     38a:	82 23       	and	r24, r18
     38c:	93 23       	and	r25, r19
     38e:	02 c0       	rjmp	.+4      	; 0x394 <DIO_u8readPin+0xa6>
     390:	95 95       	asr	r25
     392:	87 95       	ror	r24
     394:	6a 95       	dec	r22
     396:	e2 f7       	brpl	.-8      	; 0x390 <DIO_u8readPin+0xa2>
		break;
     398:	08 95       	ret
 *Function Description : Returns 1 if the value of the given pin is high and zero if the value is low
 */

unsigned char DIO_u8readPin(unsigned char portname,unsigned char pinnumber)
{
	unsigned char return_value=0;
     39a:	80 e0       	ldi	r24, 0x00	; 0
								
	}	// end of switch 
		
	return return_value;
	
}// end of Function	
     39c:	08 95       	ret

0000039e <DIO_u8readPort>:
 */

unsigned char DIO_u8readPort(unsigned char portname)
{
	unsigned char return_val=0;
	switch(portname)
     39e:	82 34       	cpi	r24, 0x42	; 66
     3a0:	61 f0       	breq	.+24     	; 0x3ba <DIO_u8readPort+0x1c>
     3a2:	83 34       	cpi	r24, 0x43	; 67
     3a4:	18 f4       	brcc	.+6      	; 0x3ac <DIO_u8readPort+0xe>
     3a6:	81 34       	cpi	r24, 0x41	; 65
     3a8:	71 f4       	brne	.+28     	; 0x3c6 <DIO_u8readPort+0x28>
     3aa:	05 c0       	rjmp	.+10     	; 0x3b6 <DIO_u8readPort+0x18>
     3ac:	83 34       	cpi	r24, 0x43	; 67
     3ae:	39 f0       	breq	.+14     	; 0x3be <DIO_u8readPort+0x20>
     3b0:	84 34       	cpi	r24, 0x44	; 68
     3b2:	49 f4       	brne	.+18     	; 0x3c6 <DIO_u8readPort+0x28>
     3b4:	06 c0       	rjmp	.+12     	; 0x3c2 <DIO_u8readPort+0x24>
	{
		case 'A':
		return_val = PINA; // read the value of port A
     3b6:	89 b3       	in	r24, 0x19	; 25
		break;
     3b8:	08 95       	ret
		
		case 'B':
		return_val = PINB; // read the value of port B
     3ba:	86 b3       	in	r24, 0x16	; 22
		break;
     3bc:	08 95       	ret
		
		case 'C':
		return_val = PINC; // read the value of port C
     3be:	83 b3       	in	r24, 0x13	; 19
		break;
     3c0:	08 95       	ret
		
		case 'D':
		return_val = PIND; // read the value of port D
     3c2:	80 b3       	in	r24, 0x10	; 16
		break;
     3c4:	08 95       	ret
 *Function Description : Read the value of the given  port
 */

unsigned char DIO_u8readPort(unsigned char portname)
{
	unsigned char return_val=0;
     3c6:	80 e0       	ldi	r24, 0x00	; 0
		
	}// end of switch 
		
	return return_val;
	
}// end of Function	
     3c8:	08 95       	ret

000003ca <DIO_vtogglePin>:
 *Function Description : Reverse the value of the given pin in the given port.
 */

void DIO_vtogglePin(unsigned char portname,unsigned char pinnumber)
{
	switch(portname)
     3ca:	82 34       	cpi	r24, 0x42	; 66
     3cc:	b9 f0       	breq	.+46     	; 0x3fc <DIO_vtogglePin+0x32>
     3ce:	83 34       	cpi	r24, 0x43	; 67
     3d0:	18 f4       	brcc	.+6      	; 0x3d8 <DIO_vtogglePin+0xe>
     3d2:	81 34       	cpi	r24, 0x41	; 65
     3d4:	c9 f5       	brne	.+114    	; 0x448 <DIO_vtogglePin+0x7e>
     3d6:	05 c0       	rjmp	.+10     	; 0x3e2 <DIO_vtogglePin+0x18>
     3d8:	83 34       	cpi	r24, 0x43	; 67
     3da:	e9 f0       	breq	.+58     	; 0x416 <DIO_vtogglePin+0x4c>
     3dc:	84 34       	cpi	r24, 0x44	; 68
     3de:	a1 f5       	brne	.+104    	; 0x448 <DIO_vtogglePin+0x7e>
     3e0:	27 c0       	rjmp	.+78     	; 0x430 <DIO_vtogglePin+0x66>
	{
		case 'A':
		ToggleBit(PORTA,pinnumber);   //Toggle the value of the given pin in port A
     3e2:	2b b3       	in	r18, 0x1b	; 27
     3e4:	81 e0       	ldi	r24, 0x01	; 1
     3e6:	90 e0       	ldi	r25, 0x00	; 0
     3e8:	ac 01       	movw	r20, r24
     3ea:	02 c0       	rjmp	.+4      	; 0x3f0 <DIO_vtogglePin+0x26>
     3ec:	44 0f       	add	r20, r20
     3ee:	55 1f       	adc	r21, r21
     3f0:	6a 95       	dec	r22
     3f2:	e2 f7       	brpl	.-8      	; 0x3ec <DIO_vtogglePin+0x22>
     3f4:	ba 01       	movw	r22, r20
     3f6:	62 27       	eor	r22, r18
     3f8:	6b bb       	out	0x1b, r22	; 27
		break;
     3fa:	08 95       	ret
		
		case 'B':
		ToggleBit(PORTB,pinnumber);   //Toggle the value of the given pin in port B
     3fc:	28 b3       	in	r18, 0x18	; 24
     3fe:	81 e0       	ldi	r24, 0x01	; 1
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	ac 01       	movw	r20, r24
     404:	02 c0       	rjmp	.+4      	; 0x40a <DIO_vtogglePin+0x40>
     406:	44 0f       	add	r20, r20
     408:	55 1f       	adc	r21, r21
     40a:	6a 95       	dec	r22
     40c:	e2 f7       	brpl	.-8      	; 0x406 <DIO_vtogglePin+0x3c>
     40e:	ba 01       	movw	r22, r20
     410:	62 27       	eor	r22, r18
     412:	68 bb       	out	0x18, r22	; 24
		break;
     414:	08 95       	ret
		
		case 'C':
		ToggleBit(PORTC,pinnumber);   //Toggle the value of the given pin in port C
     416:	25 b3       	in	r18, 0x15	; 21
     418:	81 e0       	ldi	r24, 0x01	; 1
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	ac 01       	movw	r20, r24
     41e:	02 c0       	rjmp	.+4      	; 0x424 <DIO_vtogglePin+0x5a>
     420:	44 0f       	add	r20, r20
     422:	55 1f       	adc	r21, r21
     424:	6a 95       	dec	r22
     426:	e2 f7       	brpl	.-8      	; 0x420 <DIO_vtogglePin+0x56>
     428:	ba 01       	movw	r22, r20
     42a:	62 27       	eor	r22, r18
     42c:	65 bb       	out	0x15, r22	; 21
		break;
     42e:	08 95       	ret
		
		case 'D':
		ToggleBit(PORTD,pinnumber);   //Toggle the value of the given pin in port D
     430:	22 b3       	in	r18, 0x12	; 18
     432:	81 e0       	ldi	r24, 0x01	; 1
     434:	90 e0       	ldi	r25, 0x00	; 0
     436:	ac 01       	movw	r20, r24
     438:	02 c0       	rjmp	.+4      	; 0x43e <DIO_vtogglePin+0x74>
     43a:	44 0f       	add	r20, r20
     43c:	55 1f       	adc	r21, r21
     43e:	6a 95       	dec	r22
     440:	e2 f7       	brpl	.-8      	; 0x43a <DIO_vtogglePin+0x70>
     442:	ba 01       	movw	r22, r20
     444:	62 27       	eor	r22, r18
     446:	62 bb       	out	0x12, r22	; 18
     448:	08 95       	ret

0000044a <DIO_vconnectPullup>:
 *Function Description : : Connect and disconnect pull up resistor to the given pin at the given port 
 */

void DIO_vconnectPullup(char portname ,char pinnumber, char connect_pullup)
{
	switch(portname)
     44a:	82 34       	cpi	r24, 0x42	; 66
     44c:	51 f1       	breq	.+84     	; 0x4a2 <DIO_vconnectPullup+0x58>
     44e:	83 34       	cpi	r24, 0x43	; 67
     450:	20 f4       	brcc	.+8      	; 0x45a <DIO_vconnectPullup+0x10>
     452:	81 34       	cpi	r24, 0x41	; 65
     454:	09 f0       	breq	.+2      	; 0x458 <DIO_vconnectPullup+0xe>
     456:	7b c0       	rjmp	.+246    	; 0x54e <DIO_vconnectPullup+0x104>
     458:	07 c0       	rjmp	.+14     	; 0x468 <DIO_vconnectPullup+0x1e>
     45a:	83 34       	cpi	r24, 0x43	; 67
     45c:	09 f4       	brne	.+2      	; 0x460 <DIO_vconnectPullup+0x16>
     45e:	3e c0       	rjmp	.+124    	; 0x4dc <DIO_vconnectPullup+0x92>
     460:	84 34       	cpi	r24, 0x44	; 68
     462:	09 f0       	breq	.+2      	; 0x466 <DIO_vconnectPullup+0x1c>
     464:	74 c0       	rjmp	.+232    	; 0x54e <DIO_vconnectPullup+0x104>
     466:	57 c0       	rjmp	.+174    	; 0x516 <DIO_vconnectPullup+0xcc>
	{
		case 'A':
		if(connect_pullup==1)
     468:	41 30       	cpi	r20, 0x01	; 1
     46a:	69 f4       	brne	.+26     	; 0x486 <DIO_vconnectPullup+0x3c>
		{
			SetBit(PORTA,pinnumber);
     46c:	2b b3       	in	r18, 0x1b	; 27
     46e:	81 e0       	ldi	r24, 0x01	; 1
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	ac 01       	movw	r20, r24
     474:	02 c0       	rjmp	.+4      	; 0x47a <DIO_vconnectPullup+0x30>
     476:	44 0f       	add	r20, r20
     478:	55 1f       	adc	r21, r21
     47a:	6a 95       	dec	r22
     47c:	e2 f7       	brpl	.-8      	; 0x476 <DIO_vconnectPullup+0x2c>
     47e:	ba 01       	movw	r22, r20
     480:	62 2b       	or	r22, r18
     482:	6b bb       	out	0x1b, r22	; 27
     484:	08 95       	ret
		}
		else
		{
			ClearBit(PORTA,pinnumber);
     486:	2b b3       	in	r18, 0x1b	; 27
     488:	81 e0       	ldi	r24, 0x01	; 1
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	ac 01       	movw	r20, r24
     48e:	02 c0       	rjmp	.+4      	; 0x494 <DIO_vconnectPullup+0x4a>
     490:	44 0f       	add	r20, r20
     492:	55 1f       	adc	r21, r21
     494:	6a 95       	dec	r22
     496:	e2 f7       	brpl	.-8      	; 0x490 <DIO_vconnectPullup+0x46>
     498:	ba 01       	movw	r22, r20
     49a:	60 95       	com	r22
     49c:	62 23       	and	r22, r18
     49e:	6b bb       	out	0x1b, r22	; 27
     4a0:	08 95       	ret
		}
		break;
		
		case 'B':
		if(connect_pullup==1)
     4a2:	41 30       	cpi	r20, 0x01	; 1
     4a4:	69 f4       	brne	.+26     	; 0x4c0 <DIO_vconnectPullup+0x76>
		{
			SetBit(PORTB,pinnumber);
     4a6:	28 b3       	in	r18, 0x18	; 24
     4a8:	81 e0       	ldi	r24, 0x01	; 1
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	ac 01       	movw	r20, r24
     4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <DIO_vconnectPullup+0x6a>
     4b0:	44 0f       	add	r20, r20
     4b2:	55 1f       	adc	r21, r21
     4b4:	6a 95       	dec	r22
     4b6:	e2 f7       	brpl	.-8      	; 0x4b0 <DIO_vconnectPullup+0x66>
     4b8:	ba 01       	movw	r22, r20
     4ba:	62 2b       	or	r22, r18
     4bc:	68 bb       	out	0x18, r22	; 24
     4be:	08 95       	ret
		}
		else
		{
			ClearBit(PORTB,pinnumber);
     4c0:	28 b3       	in	r18, 0x18	; 24
     4c2:	81 e0       	ldi	r24, 0x01	; 1
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	ac 01       	movw	r20, r24
     4c8:	02 c0       	rjmp	.+4      	; 0x4ce <DIO_vconnectPullup+0x84>
     4ca:	44 0f       	add	r20, r20
     4cc:	55 1f       	adc	r21, r21
     4ce:	6a 95       	dec	r22
     4d0:	e2 f7       	brpl	.-8      	; 0x4ca <DIO_vconnectPullup+0x80>
     4d2:	ba 01       	movw	r22, r20
     4d4:	60 95       	com	r22
     4d6:	62 23       	and	r22, r18
     4d8:	68 bb       	out	0x18, r22	; 24
     4da:	08 95       	ret
		}
		break;
		
		case 'C':
		if(connect_pullup==1)
     4dc:	41 30       	cpi	r20, 0x01	; 1
     4de:	69 f4       	brne	.+26     	; 0x4fa <DIO_vconnectPullup+0xb0>
		{
			SetBit(PORTC,pinnumber);
     4e0:	25 b3       	in	r18, 0x15	; 21
     4e2:	81 e0       	ldi	r24, 0x01	; 1
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	ac 01       	movw	r20, r24
     4e8:	02 c0       	rjmp	.+4      	; 0x4ee <DIO_vconnectPullup+0xa4>
     4ea:	44 0f       	add	r20, r20
     4ec:	55 1f       	adc	r21, r21
     4ee:	6a 95       	dec	r22
     4f0:	e2 f7       	brpl	.-8      	; 0x4ea <DIO_vconnectPullup+0xa0>
     4f2:	ba 01       	movw	r22, r20
     4f4:	62 2b       	or	r22, r18
     4f6:	65 bb       	out	0x15, r22	; 21
     4f8:	08 95       	ret
			
		}
		else
		{
			ClearBit(PORTC,pinnumber);
     4fa:	25 b3       	in	r18, 0x15	; 21
     4fc:	81 e0       	ldi	r24, 0x01	; 1
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	ac 01       	movw	r20, r24
     502:	02 c0       	rjmp	.+4      	; 0x508 <DIO_vconnectPullup+0xbe>
     504:	44 0f       	add	r20, r20
     506:	55 1f       	adc	r21, r21
     508:	6a 95       	dec	r22
     50a:	e2 f7       	brpl	.-8      	; 0x504 <DIO_vconnectPullup+0xba>
     50c:	ba 01       	movw	r22, r20
     50e:	60 95       	com	r22
     510:	62 23       	and	r22, r18
     512:	65 bb       	out	0x15, r22	; 21
     514:	08 95       	ret
		}
		break;
		
		case 'D':
		if(connect_pullup==1)
     516:	41 30       	cpi	r20, 0x01	; 1
     518:	69 f4       	brne	.+26     	; 0x534 <DIO_vconnectPullup+0xea>
		{
			SetBit(PORTD,pinnumber);
     51a:	22 b3       	in	r18, 0x12	; 18
     51c:	81 e0       	ldi	r24, 0x01	; 1
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	ac 01       	movw	r20, r24
     522:	02 c0       	rjmp	.+4      	; 0x528 <DIO_vconnectPullup+0xde>
     524:	44 0f       	add	r20, r20
     526:	55 1f       	adc	r21, r21
     528:	6a 95       	dec	r22
     52a:	e2 f7       	brpl	.-8      	; 0x524 <DIO_vconnectPullup+0xda>
     52c:	ba 01       	movw	r22, r20
     52e:	62 2b       	or	r22, r18
     530:	62 bb       	out	0x12, r22	; 18
     532:	08 95       	ret
			
		}
		else
		{
			ClearBit(PORTD,pinnumber);
     534:	22 b3       	in	r18, 0x12	; 18
     536:	81 e0       	ldi	r24, 0x01	; 1
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	ac 01       	movw	r20, r24
     53c:	02 c0       	rjmp	.+4      	; 0x542 <DIO_vconnectPullup+0xf8>
     53e:	44 0f       	add	r20, r20
     540:	55 1f       	adc	r21, r21
     542:	6a 95       	dec	r22
     544:	e2 f7       	brpl	.-8      	; 0x53e <DIO_vconnectPullup+0xf4>
     546:	ba 01       	movw	r22, r20
     548:	60 95       	com	r22
     54a:	62 23       	and	r22, r18
     54c:	62 bb       	out	0x12, r22	; 18
     54e:	08 95       	ret

00000550 <DIO_vwrite_low_nibble>:
 *Function Description :    write a value to the low nibble of the port  
 */

void DIO_vwrite_low_nibble(unsigned char portname,unsigned char value)
{
	value&=0x0f;      //  mask low nibble of value nnnn,nnnn and 0000,1111 =0000,nnnn
     550:	6f 70       	andi	r22, 0x0F	; 15
	switch(portname)
     552:	82 34       	cpi	r24, 0x42	; 66
     554:	81 f0       	breq	.+32     	; 0x576 <DIO_vwrite_low_nibble+0x26>
     556:	83 34       	cpi	r24, 0x43	; 67
     558:	18 f4       	brcc	.+6      	; 0x560 <DIO_vwrite_low_nibble+0x10>
     55a:	81 34       	cpi	r24, 0x41	; 65
     55c:	f1 f4       	brne	.+60     	; 0x59a <DIO_vwrite_low_nibble+0x4a>
     55e:	05 c0       	rjmp	.+10     	; 0x56a <DIO_vwrite_low_nibble+0x1a>
     560:	83 34       	cpi	r24, 0x43	; 67
     562:	79 f0       	breq	.+30     	; 0x582 <DIO_vwrite_low_nibble+0x32>
     564:	84 34       	cpi	r24, 0x44	; 68
     566:	c9 f4       	brne	.+50     	; 0x59a <DIO_vwrite_low_nibble+0x4a>
     568:	12 c0       	rjmp	.+36     	; 0x58e <DIO_vwrite_low_nibble+0x3e>
	{
		case 'A':
		PORTA&=0xf0;   //  aaaa,aaaa and 1111,0000 = aaaa
     56a:	8b b3       	in	r24, 0x1b	; 27
     56c:	80 7f       	andi	r24, 0xF0	; 240
     56e:	8b bb       	out	0x1b, r24	; 27
		PORTA|=value;  // aaaa,0000 or oooo,nnnn = aaaa,nnnn
     570:	8b b3       	in	r24, 0x1b	; 27
     572:	86 2b       	or	r24, r22
     574:	8b bb       	out	0x1b, r24	; 27
		case 'B':
		PORTB&=0xf0;
     576:	88 b3       	in	r24, 0x18	; 24
     578:	80 7f       	andi	r24, 0xF0	; 240
     57a:	88 bb       	out	0x18, r24	; 24
		PORTB|=value;
     57c:	88 b3       	in	r24, 0x18	; 24
     57e:	86 2b       	or	r24, r22
     580:	88 bb       	out	0x18, r24	; 24
		case 'C':
		PORTC&=0xf0;
     582:	85 b3       	in	r24, 0x15	; 21
     584:	80 7f       	andi	r24, 0xF0	; 240
     586:	85 bb       	out	0x15, r24	; 21
		PORTC|=value;
     588:	85 b3       	in	r24, 0x15	; 21
     58a:	86 2b       	or	r24, r22
     58c:	85 bb       	out	0x15, r24	; 21
		case 'D':
		PORTD&=0xf0;
     58e:	82 b3       	in	r24, 0x12	; 18
     590:	80 7f       	andi	r24, 0xF0	; 240
     592:	82 bb       	out	0x12, r24	; 18
		PORTD|=value;
     594:	82 b3       	in	r24, 0x12	; 18
     596:	68 2b       	or	r22, r24
     598:	62 bb       	out	0x12, r22	; 18
     59a:	08 95       	ret

0000059c <DIO_vwrite_high_nibble>:
 */


void DIO_vwrite_high_nibble(unsigned char portname,unsigned char value)
{
	value<<=4;			// or value&=0xf0  mask high nibble of value nnnn,nnnn and 1111,0000 = nnnn,0000
     59c:	62 95       	swap	r22
     59e:	60 7f       	andi	r22, 0xF0	; 240
	switch(portname)
     5a0:	82 34       	cpi	r24, 0x42	; 66
     5a2:	81 f0       	breq	.+32     	; 0x5c4 <DIO_vwrite_high_nibble+0x28>
     5a4:	83 34       	cpi	r24, 0x43	; 67
     5a6:	18 f4       	brcc	.+6      	; 0x5ae <DIO_vwrite_high_nibble+0x12>
     5a8:	81 34       	cpi	r24, 0x41	; 65
     5aa:	f1 f4       	brne	.+60     	; 0x5e8 <DIO_vwrite_high_nibble+0x4c>
     5ac:	05 c0       	rjmp	.+10     	; 0x5b8 <DIO_vwrite_high_nibble+0x1c>
     5ae:	83 34       	cpi	r24, 0x43	; 67
     5b0:	79 f0       	breq	.+30     	; 0x5d0 <DIO_vwrite_high_nibble+0x34>
     5b2:	84 34       	cpi	r24, 0x44	; 68
     5b4:	c9 f4       	brne	.+50     	; 0x5e8 <DIO_vwrite_high_nibble+0x4c>
     5b6:	12 c0       	rjmp	.+36     	; 0x5dc <DIO_vwrite_high_nibble+0x40>
	{
		case 'A':
		PORTA&=0x0f;		//  aaaa,aaaa and 0000,1111 = 0000,aaaa 
     5b8:	8b b3       	in	r24, 0x1b	; 27
     5ba:	8f 70       	andi	r24, 0x0F	; 15
     5bc:	8b bb       	out	0x1b, r24	; 27
		PORTA|=value;		// 0000,aaaa  or nnnn,0000 = nnnn,aaaa
     5be:	8b b3       	in	r24, 0x1b	; 27
     5c0:	86 2b       	or	r24, r22
     5c2:	8b bb       	out	0x1b, r24	; 27
		case 'B':
		PORTB&=0x0f;
     5c4:	88 b3       	in	r24, 0x18	; 24
     5c6:	8f 70       	andi	r24, 0x0F	; 15
     5c8:	88 bb       	out	0x18, r24	; 24
		PORTB|=value;
     5ca:	88 b3       	in	r24, 0x18	; 24
     5cc:	86 2b       	or	r24, r22
     5ce:	88 bb       	out	0x18, r24	; 24
		case 'C':
		PORTC&=0x0f;
     5d0:	85 b3       	in	r24, 0x15	; 21
     5d2:	8f 70       	andi	r24, 0x0F	; 15
     5d4:	85 bb       	out	0x15, r24	; 21
		PORTC|=value;
     5d6:	85 b3       	in	r24, 0x15	; 21
     5d8:	86 2b       	or	r24, r22
     5da:	85 bb       	out	0x15, r24	; 21
		case 'D':
		PORTD&=0x0f;
     5dc:	82 b3       	in	r24, 0x12	; 18
     5de:	8f 70       	andi	r24, 0x0F	; 15
     5e0:	82 bb       	out	0x12, r24	; 18
		PORTD|=value;
     5e2:	82 b3       	in	r24, 0x12	; 18
     5e4:	68 2b       	or	r22, r24
     5e6:	62 bb       	out	0x12, r22	; 18
     5e8:	08 95       	ret

000005ea <EEPROM_vwrite>:
 */

void EEPROM_vwrite(unsigned short address , unsigned char data)
{
// set uo address Register
	EEARL = (unsigned char) address;
     5ea:	8e bb       	out	0x1e, r24	; 30
	EEARH = (unsigned char)(address>>8);
     5ec:	9f bb       	out	0x1f, r25	; 31
	
// set uo data Register
	EEDR = data;
     5ee:	6d bb       	out	0x1d, r22	; 29
	
// set EEMWE bit number 2  and EEWE bit number 1    or    EECR|= SetBit(1<<EEMWE)|SetBit(1<<EEWE)
	SetBit(EECR,EEMWE);
     5f0:	e2 9a       	sbi	0x1c, 2	; 28
	SetBit(EECR,EEWE);
     5f2:	e1 9a       	sbi	0x1c, 1	; 28
	
/* wait for complete write operation     or   while( !( ReadBit(EECR,EEWE)) )*/
	
	/* wait for completion of write operation  */
	while(ReadBit(EECR,EEWE)==1);
     5f4:	e1 99       	sbic	0x1c, 1	; 28
     5f6:	fe cf       	rjmp	.-4      	; 0x5f4 <EEPROM_vwrite+0xa>
}
     5f8:	08 95       	ret

000005fa <EEPROM_u8read>:
 */

unsigned char EEPROM_u8read(unsigned short address)
{
// set uo address Register
	EEARL = (unsigned char) address;
     5fa:	8e bb       	out	0x1e, r24	; 30
	EEARH = (unsigned char)(address>>8);
     5fc:	9f bb       	out	0x1f, r25	; 31
	
// start EEPROM Read by setting EEMWE bit number 0      or    EECR|= SetBit(1<<EERE)
	SetBit(EECR,EERE);
     5fe:	e0 9a       	sbi	0x1c, 0	; 28
// return data from data register
	return EEDR;	
     600:	8d b3       	in	r24, 0x1d	; 29
}
     602:	08 95       	ret

00000604 <keypad_vInit>:
 *Function Description : Initialize the Keypad
 */

void keypad_vInit()
{
	DIO_vsetPinDir('D',0,1); // make first 4 pins as output
     604:	84 e4       	ldi	r24, 0x44	; 68
     606:	60 e0       	ldi	r22, 0x00	; 0
     608:	41 e0       	ldi	r20, 0x01	; 1
     60a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPinDir>
	DIO_vsetPinDir('D',1,1); 
     60e:	84 e4       	ldi	r24, 0x44	; 68
     610:	61 e0       	ldi	r22, 0x01	; 1
     612:	41 e0       	ldi	r20, 0x01	; 1
     614:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPinDir>
	DIO_vsetPinDir('D',2,1); 
     618:	84 e4       	ldi	r24, 0x44	; 68
     61a:	62 e0       	ldi	r22, 0x02	; 2
     61c:	41 e0       	ldi	r20, 0x01	; 1
     61e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPinDir>
	DIO_vsetPinDir('D',3,1); 
     622:	84 e4       	ldi	r24, 0x44	; 68
     624:	63 e0       	ldi	r22, 0x03	; 3
     626:	41 e0       	ldi	r20, 0x01	; 1
     628:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPinDir>
	DIO_vsetPinDir('D',4,0); // make first 4 pins as input
     62c:	84 e4       	ldi	r24, 0x44	; 68
     62e:	64 e0       	ldi	r22, 0x04	; 4
     630:	40 e0       	ldi	r20, 0x00	; 0
     632:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPinDir>
	DIO_vsetPinDir('D',5,0); 
     636:	84 e4       	ldi	r24, 0x44	; 68
     638:	65 e0       	ldi	r22, 0x05	; 5
     63a:	40 e0       	ldi	r20, 0x00	; 0
     63c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPinDir>
	DIO_vsetPinDir('D',6,0); 
     640:	84 e4       	ldi	r24, 0x44	; 68
     642:	66 e0       	ldi	r22, 0x06	; 6
     644:	40 e0       	ldi	r20, 0x00	; 0
     646:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPinDir>
	DIO_vsetPinDir('D',7,0); 
     64a:	84 e4       	ldi	r24, 0x44	; 68
     64c:	67 e0       	ldi	r22, 0x07	; 7
     64e:	40 e0       	ldi	r20, 0x00	; 0
     650:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPinDir>
	DIO_vconnectPullup('D',4,1);     //  make all input pin as a pullup as microcontroller has internal pullup   
     654:	84 e4       	ldi	r24, 0x44	; 68
     656:	64 e0       	ldi	r22, 0x04	; 4
     658:	41 e0       	ldi	r20, 0x01	; 1
     65a:	0e 94 25 02 	call	0x44a	; 0x44a <DIO_vconnectPullup>
	DIO_vconnectPullup('D',5,1);       
     65e:	84 e4       	ldi	r24, 0x44	; 68
     660:	65 e0       	ldi	r22, 0x05	; 5
     662:	41 e0       	ldi	r20, 0x01	; 1
     664:	0e 94 25 02 	call	0x44a	; 0x44a <DIO_vconnectPullup>
	DIO_vconnectPullup('D',6,1);
     668:	84 e4       	ldi	r24, 0x44	; 68
     66a:	66 e0       	ldi	r22, 0x06	; 6
     66c:	41 e0       	ldi	r20, 0x01	; 1
     66e:	0e 94 25 02 	call	0x44a	; 0x44a <DIO_vconnectPullup>
	DIO_vconnectPullup('D',7,1);
     672:	84 e4       	ldi	r24, 0x44	; 68
     674:	67 e0       	ldi	r22, 0x07	; 7
     676:	41 e0       	ldi	r20, 0x01	; 1
     678:	0e 94 25 02 	call	0x44a	; 0x44a <DIO_vconnectPullup>
	
}
     67c:	08 95       	ret

0000067e <keypad_u8check_press>:


char keypad_u8check_press()
{
     67e:	ff 92       	push	r15
     680:	0f 93       	push	r16
     682:	1f 93       	push	r17
     684:	cf 93       	push	r28
     686:	df 93       	push	r29
     688:	cd b7       	in	r28, 0x3d	; 61
     68a:	de b7       	in	r29, 0x3e	; 62
     68c:	60 97       	sbiw	r28, 0x10	; 16
     68e:	0f b6       	in	r0, 0x3f	; 63
     690:	f8 94       	cli
     692:	de bf       	out	0x3e, r29	; 62
     694:	0f be       	out	0x3f, r0	; 63
     696:	cd bf       	out	0x3d, r28	; 61
	char arr[4][4]={{'7','8','9','/'},
     698:	de 01       	movw	r26, r28
     69a:	11 96       	adiw	r26, 0x01	; 1
     69c:	e0 e6       	ldi	r30, 0x60	; 96
     69e:	f0 e0       	ldi	r31, 0x00	; 0
     6a0:	80 e1       	ldi	r24, 0x10	; 16
     6a2:	01 90       	ld	r0, Z+
     6a4:	0d 92       	st	X+, r0
     6a6:	81 50       	subi	r24, 0x01	; 1
     6a8:	e1 f7       	brne	.-8      	; 0x6a2 <keypad_u8check_press+0x24>
					{'C','0','=','+'}
		       	   };					 // Array represent buttons of Keypad
	
	char row,column,x ,returnval= NOTPRESSED;
	
	for(row=0;row<4;row++)
     6aa:	ff 24       	eor	r15, r15
	{
		DIO_vwritePin('D',0,1);
     6ac:	84 e4       	ldi	r24, 0x44	; 68
     6ae:	60 e0       	ldi	r22, 0x00	; 0
     6b0:	41 e0       	ldi	r20, 0x01	; 1
     6b2:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <DIO_vwritePin>
		DIO_vwritePin('D',1,1);
     6b6:	84 e4       	ldi	r24, 0x44	; 68
     6b8:	61 e0       	ldi	r22, 0x01	; 1
     6ba:	41 e0       	ldi	r20, 0x01	; 1
     6bc:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <DIO_vwritePin>
		DIO_vwritePin('D',2,1);
     6c0:	84 e4       	ldi	r24, 0x44	; 68
     6c2:	62 e0       	ldi	r22, 0x02	; 2
     6c4:	41 e0       	ldi	r20, 0x01	; 1
     6c6:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <DIO_vwritePin>
		DIO_vwritePin('D',3,1);
     6ca:	84 e4       	ldi	r24, 0x44	; 68
     6cc:	63 e0       	ldi	r22, 0x03	; 3
     6ce:	41 e0       	ldi	r20, 0x01	; 1
     6d0:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <DIO_vwritePin>
		DIO_vwritePin('D',row,0);    // to make only one row=0 and the rest rows one to determine in which rows button is pressed
     6d4:	84 e4       	ldi	r24, 0x44	; 68
     6d6:	6f 2d       	mov	r22, r15
     6d8:	40 e0       	ldi	r20, 0x00	; 0
     6da:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <DIO_vwritePin>
		
		for(column=0;column<4;column++)
     6de:	10 e0       	ldi	r17, 0x00	; 0
	DIO_vconnectPullup('D',7,1);
	
}


char keypad_u8check_press()
     6e0:	01 2f       	mov	r16, r17
     6e2:	0c 5f       	subi	r16, 0xFC	; 252
		DIO_vwritePin('D',3,1);
		DIO_vwritePin('D',row,0);    // to make only one row=0 and the rest rows one to determine in which rows button is pressed
		
		for(column=0;column<4;column++)
		{
			x=DIO_u8readPin('D',(column+4));   // to determine in which columns button is pressed
     6e4:	84 e4       	ldi	r24, 0x44	; 68
     6e6:	60 2f       	mov	r22, r16
     6e8:	0e 94 77 01 	call	0x2ee	; 0x2ee <DIO_u8readPin>
			if (x==0)					 // check switch is pressed . Zero due to pull-up
     6ec:	88 23       	and	r24, r24
     6ee:	c1 f4       	brne	.+48     	; 0x720 <keypad_u8check_press+0xa2>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6f0:	8f e3       	ldi	r24, 0x3F	; 63
     6f2:	9c e9       	ldi	r25, 0x9C	; 156
     6f4:	01 97       	sbiw	r24, 0x01	; 1
     6f6:	f1 f7       	brne	.-4      	; 0x6f4 <keypad_u8check_press+0x76>
     6f8:	00 c0       	rjmp	.+0      	; 0x6fa <keypad_u8check_press+0x7c>
     6fa:	00 00       	nop
			{
				_delay_ms(20);      // for bouncing  
				while(DIO_u8readPin('D',(column+4)) == 0);  //for scan press only one time .....the delay of pressing
     6fc:	84 e4       	ldi	r24, 0x44	; 68
     6fe:	60 2f       	mov	r22, r16
     700:	0e 94 77 01 	call	0x2ee	; 0x2ee <DIO_u8readPin>
     704:	88 23       	and	r24, r24
     706:	d1 f3       	breq	.-12     	; 0x6fc <keypad_u8check_press+0x7e>
				
				returnval=arr[row][column];
     708:	ef 2d       	mov	r30, r15
     70a:	f0 e0       	ldi	r31, 0x00	; 0
     70c:	ee 0f       	add	r30, r30
     70e:	ff 1f       	adc	r31, r31
     710:	ee 0f       	add	r30, r30
     712:	ff 1f       	adc	r31, r31
     714:	e1 0f       	add	r30, r17
     716:	f1 1d       	adc	r31, r1
     718:	ec 0f       	add	r30, r28
     71a:	fd 1f       	adc	r31, r29
     71c:	81 81       	ldd	r24, Z+1	; 0x01
     71e:	04 c0       	rjmp	.+8      	; 0x728 <keypad_u8check_press+0xaa>
		DIO_vwritePin('D',1,1);
		DIO_vwritePin('D',2,1);
		DIO_vwritePin('D',3,1);
		DIO_vwritePin('D',row,0);    // to make only one row=0 and the rest rows one to determine in which rows button is pressed
		
		for(column=0;column<4;column++)
     720:	1f 5f       	subi	r17, 0xFF	; 255
     722:	14 30       	cpi	r17, 0x04	; 4
     724:	e9 f6       	brne	.-70     	; 0x6e0 <keypad_u8check_press+0x62>
     726:	0c c0       	rjmp	.+24     	; 0x740 <keypad_u8check_press+0xc2>
		{
			break;
		}						
	}
	return returnval ; 		
     728:	60 96       	adiw	r28, 0x10	; 16
     72a:	0f b6       	in	r0, 0x3f	; 63
     72c:	f8 94       	cli
     72e:	de bf       	out	0x3e, r29	; 62
     730:	0f be       	out	0x3f, r0	; 63
     732:	cd bf       	out	0x3d, r28	; 61
     734:	df 91       	pop	r29
     736:	cf 91       	pop	r28
     738:	1f 91       	pop	r17
     73a:	0f 91       	pop	r16
     73c:	ff 90       	pop	r15
     73e:	08 95       	ret
					{'C','0','=','+'}
		       	   };					 // Array represent buttons of Keypad
	
	char row,column,x ,returnval= NOTPRESSED;
	
	for(row=0;row<4;row++)
     740:	f3 94       	inc	r15
     742:	94 e0       	ldi	r25, 0x04	; 4
     744:	f9 16       	cp	r15, r25
     746:	09 f0       	breq	.+2      	; 0x74a <keypad_u8check_press+0xcc>
     748:	b1 cf       	rjmp	.-158    	; 0x6ac <keypad_u8check_press+0x2e>
     74a:	8f ef       	ldi	r24, 0xFF	; 255
     74c:	ed cf       	rjmp	.-38     	; 0x728 <keypad_u8check_press+0xaa>

0000074e <vsend_falling_edge>:
 *function to enable LCD display
 */

static  void vsend_falling_edge(void)
{
	DIO_vwritePin('B',EN,1);        // create high edge
     74e:	82 e4       	ldi	r24, 0x42	; 66
     750:	60 e0       	ldi	r22, 0x00	; 0
     752:	41 e0       	ldi	r20, 0x01	; 1
     754:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <DIO_vwritePin>
     758:	8f e9       	ldi	r24, 0x9F	; 159
     75a:	9f e0       	ldi	r25, 0x0F	; 15
     75c:	01 97       	sbiw	r24, 0x01	; 1
     75e:	f1 f7       	brne	.-4      	; 0x75c <vsend_falling_edge+0xe>
     760:	00 c0       	rjmp	.+0      	; 0x762 <vsend_falling_edge+0x14>
     762:	00 00       	nop
	_delay_ms(2);
	DIO_vwritePin('B',EN,0);      // create high edge
     764:	82 e4       	ldi	r24, 0x42	; 66
     766:	60 e0       	ldi	r22, 0x00	; 0
     768:	40 e0       	ldi	r20, 0x00	; 0
     76a:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <DIO_vwritePin>
     76e:	8f e9       	ldi	r24, 0x9F	; 159
     770:	9f e0       	ldi	r25, 0x0F	; 15
     772:	01 97       	sbiw	r24, 0x01	; 1
     774:	f1 f7       	brne	.-4      	; 0x772 <vsend_falling_edge+0x24>
     776:	00 c0       	rjmp	.+0      	; 0x778 <vsend_falling_edge+0x2a>
     778:	00 00       	nop
	_delay_ms(2);
}
     77a:	08 95       	ret

0000077c <LCD_vsend_cmd>:
/*
 *Function Description :  Send Command to  LCD
 */

void LCD_vsend_cmd(char cmd)
{
     77c:	68 2f       	mov	r22, r24
	/****************************************** for  8_bits Mode   *********************************************************/
	#if defined eight_bits_mode
	
	DIO_vwritePort('A',cmd);			//  Send the command value to the LCD data port .
     77e:	81 e4       	ldi	r24, 0x41	; 65
     780:	0e 94 63 01 	call	0x2c6	; 0x2c6 <DIO_vwritePort>
	DIO_vwritePin('B',RS,0);			// Make RS pin low, RS = 0 (command reg.)
     784:	82 e4       	ldi	r24, 0x42	; 66
     786:	62 e0       	ldi	r22, 0x02	; 2
     788:	40 e0       	ldi	r20, 0x00	; 0
     78a:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <DIO_vwritePin>
	vsend_falling_edge();				// enable LCD display
     78e:	0e 94 a7 03 	call	0x74e	; 0x74e <vsend_falling_edge>
	DIO_vwritePin('B',RS,0);			//  Make RS pin low, RS = 0 (command reg.)
	vsend_falling_edge();				// enable LCD display
	
	// _delay_ms(1);
	#endif	  	
}
     792:	08 95       	ret

00000794 <LCD_vInit>:
     794:	8f ef       	ldi	r24, 0xFF	; 255
     796:	91 ee       	ldi	r25, 0xE1	; 225
     798:	a4 e0       	ldi	r26, 0x04	; 4
     79a:	81 50       	subi	r24, 0x01	; 1
     79c:	90 40       	sbci	r25, 0x00	; 0
     79e:	a0 40       	sbci	r26, 0x00	; 0
     7a0:	e1 f7       	brne	.-8      	; 0x79a <LCD_vInit+0x6>
     7a2:	00 c0       	rjmp	.+0      	; 0x7a4 <LCD_vInit+0x10>
     7a4:	00 00       	nop
{
	_delay_ms(200);										  // delay more than 30 ms after power ON  AS  data sheet
	/****************************************** for  8_bits Mode   *********************************************************/
	#if defined eight_bits_mode							 
	
	DIO_vsetPortDir('A',1);							   // make the direction of whole port C as output port  
     7a6:	81 e4       	ldi	r24, 0x41	; 65
     7a8:	61 e0       	ldi	r22, 0x01	; 1
     7aa:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_vsetPortDir>
	DIO_vsetPinDir('B',EN,1);					      // make the direction of pin0 (EN)  as output port
     7ae:	82 e4       	ldi	r24, 0x42	; 66
     7b0:	60 e0       	ldi	r22, 0x00	; 0
     7b2:	41 e0       	ldi	r20, 0x01	; 1
     7b4:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPinDir>
	DIO_vsetPinDir('B',RW,1);						  // make the direction of pin1 (RW)  as output port
     7b8:	82 e4       	ldi	r24, 0x42	; 66
     7ba:	61 e0       	ldi	r22, 0x01	; 1
     7bc:	41 e0       	ldi	r20, 0x01	; 1
     7be:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPinDir>
	DIO_vsetPinDir('B',RS,1);						 // make the direction of pin2 (RS)  as output port
     7c2:	82 e4       	ldi	r24, 0x42	; 66
     7c4:	62 e0       	ldi	r22, 0x02	; 2
     7c6:	41 e0       	ldi	r20, 0x01	; 1
     7c8:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPinDir>
	
	
	DIO_vwritePin('B',RW,0);					     //always we select  write mode 
     7cc:	82 e4       	ldi	r24, 0x42	; 66
     7ce:	61 e0       	ldi	r22, 0x01	; 1
     7d0:	40 e0       	ldi	r20, 0x00	; 0
     7d2:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <DIO_vwritePin>

	LCD_vsend_cmd(EIGHT_BITS);						 //predefined  0x38=0b0011,1000  from function set mode
     7d6:	88 e3       	ldi	r24, 0x38	; 56
     7d8:	0e 94 be 03 	call	0x77c	; 0x77c <LCD_vsend_cmd>
     7dc:	af ec       	ldi	r26, 0xCF	; 207
     7de:	b7 e0       	ldi	r27, 0x07	; 7
     7e0:	11 97       	sbiw	r26, 0x01	; 1
     7e2:	f1 f7       	brne	.-4      	; 0x7e0 <LCD_vInit+0x4c>
     7e4:	00 c0       	rjmp	.+0      	; 0x7e6 <LCD_vInit+0x52>
     7e6:	00 00       	nop
	_delay_ms(1);									 // delay more than 39 us after function set mode AS data sheet
	LCD_vsend_cmd(CURSOR_ON_DISPLAY_ON);			//predefined 0b0000,1110 from Display on-off control mode
     7e8:	8e e0       	ldi	r24, 0x0E	; 14
     7ea:	0e 94 be 03 	call	0x77c	; 0x77c <LCD_vsend_cmd>
     7ee:	8f ec       	ldi	r24, 0xCF	; 207
     7f0:	97 e0       	ldi	r25, 0x07	; 7
     7f2:	01 97       	sbiw	r24, 0x01	; 1
     7f4:	f1 f7       	brne	.-4      	; 0x7f2 <LCD_vInit+0x5e>
     7f6:	00 c0       	rjmp	.+0      	; 0x7f8 <LCD_vInit+0x64>
     7f8:	00 00       	nop
	_delay_ms(1);									// delay more than 39 us after Display on-off control mode AS data sheet
	LCD_vsend_cmd(CLR_SCREEN);						//predefined  0b0000,0010 from Display clear mode  AS data sheet
     7fa:	81 e0       	ldi	r24, 0x01	; 1
     7fc:	0e 94 be 03 	call	0x77c	; 0x77c <LCD_vsend_cmd>
     800:	af e1       	ldi	r26, 0x1F	; 31
     802:	be e4       	ldi	r27, 0x4E	; 78
     804:	11 97       	sbiw	r26, 0x01	; 1
     806:	f1 f7       	brne	.-4      	; 0x804 <LCD_vInit+0x70>
     808:	00 c0       	rjmp	.+0      	; 0x80a <LCD_vInit+0x76>
     80a:	00 00       	nop
	_delay_ms(10);									// delay more than 1.52 ms after Display clear mode AS data sheet
	LCD_vsend_cmd(ENTRY_MODE);						//predefined 0b0000,0110 from Entry mode as data sheet
     80c:	86 e0       	ldi	r24, 0x06	; 6
     80e:	0e 94 be 03 	call	0x77c	; 0x77c <LCD_vsend_cmd>
	_delay_ms(5);									// delay more than 1.52 ms after Display clear mode AS data sheet
	LCD_vsend_cmd(ENTRY_MODE);						//predefined 0b0000,0110 from Entry mode as data sheet
	
	#endif
	
}
     812:	08 95       	ret

00000814 <LCD_vsend_char>:

/*
 *Function Description :  Send Character to  LCD
 */
void LCD_vsend_char(char data)
{
     814:	68 2f       	mov	r22, r24
	/****************************************** for  8_bits Mode   *********************************************************/
	#if defined eight_bits_mode
	
	DIO_vwritePort('A',data);				 //  Send the command value to the LCD data port 
     816:	81 e4       	ldi	r24, 0x41	; 65
     818:	0e 94 63 01 	call	0x2c6	; 0x2c6 <DIO_vwritePort>
	DIO_vwritePin('B',RS,1);			//  Make RS pin high, RS = 1 (data reg.)
     81c:	82 e4       	ldi	r24, 0x42	; 66
     81e:	62 e0       	ldi	r22, 0x02	; 2
     820:	41 e0       	ldi	r20, 0x01	; 1
     822:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <DIO_vwritePin>
	vsend_falling_edge();					// enable LCD display
     826:	0e 94 a7 03 	call	0x74e	; 0x74e <vsend_falling_edge>
	DIO_vwritePin('B',RS,1);			//  Make RS pin high, RS = 1 (data reg.)
	vsend_falling_edge();				// enable LCD display
		
	// _delay_ms(1);
	#endif
}
     82a:	08 95       	ret

0000082c <LCD_vsend_string>:
/*
 *Function Description :  Send String to  LCD
 */

void LCD_vsend_string(char *data)
{
     82c:	cf 93       	push	r28
     82e:	df 93       	push	r29
     830:	ec 01       	movw	r28, r24
	while( (*data) != '\0')							// Null=='\0'
     832:	88 81       	ld	r24, Y
     834:	88 23       	and	r24, r24
     836:	31 f0       	breq	.+12     	; 0x844 <LCD_vsend_string+0x18>

/*
 *Function Description :  Send String to  LCD
 */

void LCD_vsend_string(char *data)
     838:	21 96       	adiw	r28, 0x01	; 1
{
	while( (*data) != '\0')							// Null=='\0'
	{
		LCD_vsend_char(*data);
     83a:	0e 94 0a 04 	call	0x814	; 0x814 <LCD_vsend_char>
 *Function Description :  Send String to  LCD
 */

void LCD_vsend_string(char *data)
{
	while( (*data) != '\0')							// Null=='\0'
     83e:	89 91       	ld	r24, Y+
     840:	88 23       	and	r24, r24
     842:	d9 f7       	brne	.-10     	; 0x83a <LCD_vsend_string+0xe>
	{
		LCD_vsend_char(*data);
		data++;
		
	}	
}
     844:	df 91       	pop	r29
     846:	cf 91       	pop	r28
     848:	08 95       	ret

0000084a <LCD_vclearscreen>:
 *Function Description :   clear screen of  LCD
 */

void LCD_vclearscreen()
{
	LCD_vsend_cmd(CLR_SCREEN);	
     84a:	81 e0       	ldi	r24, 0x01	; 1
     84c:	0e 94 be 03 	call	0x77c	; 0x77c <LCD_vsend_cmd>
     850:	8f e1       	ldi	r24, 0x1F	; 31
     852:	9e e4       	ldi	r25, 0x4E	; 78
     854:	01 97       	sbiw	r24, 0x01	; 1
     856:	f1 f7       	brne	.-4      	; 0x854 <LCD_vclearscreen+0xa>
     858:	00 c0       	rjmp	.+0      	; 0x85a <LCD_vclearscreen+0x10>
     85a:	00 00       	nop
	_delay_ms(10);
}
     85c:	08 95       	ret

0000085e <LCD_vmovecursor>:
 *Function Description :  move the cursor of  LCD
 */

void LCD_vmovecursor(char row,char coloumn)
{
	if( coloumn>=0 && coloumn<=39 )
     85e:	68 32       	cpi	r22, 0x28	; 40
     860:	70 f4       	brcc	.+28     	; 0x87e <__stack+0x1f>
	{
		switch(row)
     862:	81 30       	cpi	r24, 0x01	; 1
     864:	19 f0       	breq	.+6      	; 0x86c <__stack+0xd>
     866:	82 30       	cpi	r24, 0x02	; 2
     868:	51 f4       	brne	.+20     	; 0x87e <__stack+0x1f>
     86a:	05 c0       	rjmp	.+10     	; 0x876 <__stack+0x17>
		{
			case 1:
			LCD_vsend_cmd(0x80 + (coloumn-1) );			// To put cursor of LCD on: Address of first row column 1 : 0x80 + 0  .......
     86c:	86 2f       	mov	r24, r22
     86e:	81 58       	subi	r24, 0x81	; 129
     870:	0e 94 be 03 	call	0x77c	; 0x77c <LCD_vsend_cmd>

			break;
     874:	08 95       	ret
			
			case 2:
			LCD_vsend_cmd(0xC0 + (coloumn-1) );			// To put cursor of LCD on: Address of second row column 1 : 0xC0 + 0  .......
     876:	86 2f       	mov	r24, r22
     878:	81 54       	subi	r24, 0x41	; 65
     87a:	0e 94 be 03 	call	0x77c	; 0x77c <LCD_vsend_cmd>
     87e:	08 95       	ret

00000880 <LED_vInit>:
*  Author: Bahaa Tawfik
*/
#include "DIO.h"
void LED_vInit(unsigned char portname,unsigned char pinnumber)
{
	DIO_vsetPinDir(portname,pinnumber,1);//Set the given pin in the given port as an output
     880:	41 e0       	ldi	r20, 0x01	; 1
     882:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPinDir>
}
     886:	08 95       	ret

00000888 <LED_vTurnOn>:
void LED_vTurnOn(unsigned char portname,unsigned char pinnumber)
{
	DIO_vwritePin(portname,pinnumber,1);//Set the given pin in the given port to one(on)
     888:	41 e0       	ldi	r20, 0x01	; 1
     88a:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <DIO_vwritePin>
}
     88e:	08 95       	ret

00000890 <LED_vTurnOff>:
void LED_vTurnOff(unsigned char portname,unsigned char pinnumber)
{
	DIO_vwritePin(portname,pinnumber,0);//Set the given pin in the given port to zero(off)
     890:	40 e0       	ldi	r20, 0x00	; 0
     892:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <DIO_vwritePin>
}
     896:	08 95       	ret

00000898 <LED_vToggle>:
void LED_vToggle(unsigned char portname,unsigned char pinnumber)
{
	DIO_vtogglePin(portname,pinnumber);//Set the given pin in the given port to zero if it is one or set it to one if it is zero
     898:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_vtogglePin>
}
     89c:	08 95       	ret

0000089e <main>:
	char flag=0,i;
	char block_mode_flag = 0; //is 1 if the login is blocked or 0 if not blocked
	char tries=MAX_TRIES;
	
	/*****************  INITIALIZE  ***********************/
	LED_vInit('C',0);	//initializes the led of admin
     89e:	83 e4       	ldi	r24, 0x43	; 67
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	60 e0       	ldi	r22, 0x00	; 0
     8a4:	70 e0       	ldi	r23, 0x00	; 0
     8a6:	0e 94 40 04 	call	0x880	; 0x880 <LED_vInit>
	LED_vInit('C',1);	//initializes the led of guest
     8aa:	83 e4       	ldi	r24, 0x43	; 67
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	61 e0       	ldi	r22, 0x01	; 1
     8b0:	70 e0       	ldi	r23, 0x00	; 0
     8b2:	0e 94 40 04 	call	0x880	; 0x880 <LED_vInit>
	LED_vInit('C',2);	//initializes the led of block
     8b6:	83 e4       	ldi	r24, 0x43	; 67
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	62 e0       	ldi	r22, 0x02	; 2
     8bc:	70 e0       	ldi	r23, 0x00	; 0
     8be:	0e 94 40 04 	call	0x880	; 0x880 <LED_vInit>
	LCD_vInit();	//initializes the LCD screen
     8c2:	0e 94 ca 03 	call	0x794	; 0x794 <LCD_vInit>
	keypad_vInit();	//initializes the keypad
     8c6:	0e 94 02 03 	call	0x604	; 0x604 <keypad_vInit>
	SPI_MasterInit();	//initializes the communication protocol of SPI
     8ca:	0e 94 95 0b 	call	0x172a	; 0x172a <SPI_MasterInit>
	/******************************************************/
	
	/* Printing Welcome screen */	
	LCD_vsend_string("Welcome To Home");
     8ce:	80 e7       	ldi	r24, 0x70	; 112
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_vsend_string>
	LCD_vmovecursor(2,1);
     8d6:	82 e0       	ldi	r24, 0x02	; 2
     8d8:	61 e0       	ldi	r22, 0x01	; 1
     8da:	0e 94 2f 04 	call	0x85e	; 0x85e <LCD_vmovecursor>
	LCD_vsend_string("Home System");
     8de:	80 e8       	ldi	r24, 0x80	; 128
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_vsend_string>
     8e6:	2f ef       	ldi	r18, 0xFF	; 255
     8e8:	39 e6       	ldi	r19, 0x69	; 105
     8ea:	48 e1       	ldi	r20, 0x18	; 24
     8ec:	21 50       	subi	r18, 0x01	; 1
     8ee:	30 40       	sbci	r19, 0x00	; 0
     8f0:	40 40       	sbci	r20, 0x00	; 0
     8f2:	e1 f7       	brne	.-8      	; 0x8ec <main+0x4e>
     8f4:	00 c0       	rjmp	.+0      	; 0x8f6 <main+0x58>
     8f6:	00 00       	nop
	_delay_ms(1000);	// delay the system for time in (ms)   
	LCD_vclearscreen();
     8f8:	0e 94 25 04 	call	0x84a	; 0x84a <LCD_vclearscreen>
/***************************/
/*Setting Admin and Guest passwords if not set */
//read the state of the the passwords of the admin and guest if both are set or not set
// if read a EEPROM_STATUS_LOCATION as a default 0xff = 0b1111,1111  that mean no thing is written HERE
	if ( (EEPROM_u8read(EEPROM_ADMIN_STATUS_LOCATION)== NOTPRESSED) || (EEPROM_u8read(EEPROM_GUEST_STATUS_LOCATION)== NOTPRESSED) )
     8fc:	80 e2       	ldi	r24, 0x20	; 32
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	0e 94 fd 02 	call	0x5fa	; 0x5fa <EEPROM_u8read>
     904:	8f 3f       	cpi	r24, 0xFF	; 255
     906:	39 f0       	breq	.+14     	; 0x916 <main+0x78>
     908:	85 e2       	ldi	r24, 0x25	; 37
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	0e 94 fd 02 	call	0x5fa	; 0x5fa <EEPROM_u8read>
     910:	8f 3f       	cpi	r24, 0xFF	; 255
     912:	09 f0       	breq	.+2      	; 0x916 <main+0x78>
     914:	d9 c0       	rjmp	.+434    	; 0xac8 <main+0x22a>
	{
		LCD_vsend_string("Login for");	//printing login menu
     916:	8c e8       	ldi	r24, 0x8C	; 140
     918:	90 e0       	ldi	r25, 0x00	; 0
     91a:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_vsend_string>
		LCD_vmovecursor(2,1);	//move the cursor to the second line
     91e:	82 e0       	ldi	r24, 0x02	; 2
     920:	61 e0       	ldi	r22, 0x01	; 1
     922:	0e 94 2f 04 	call	0x85e	; 0x85e <LCD_vmovecursor>
		LCD_vsend_string("first time");
     926:	86 e9       	ldi	r24, 0x96	; 150
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_vsend_string>
     92e:	8f ef       	ldi	r24, 0xFF	; 255
     930:	99 e6       	ldi	r25, 0x69	; 105
     932:	a8 e1       	ldi	r26, 0x18	; 24
     934:	81 50       	subi	r24, 0x01	; 1
     936:	90 40       	sbci	r25, 0x00	; 0
     938:	a0 40       	sbci	r26, 0x00	; 0
     93a:	e1 f7       	brne	.-8      	; 0x934 <main+0x96>
     93c:	00 c0       	rjmp	.+0      	; 0x93e <main+0xa0>
     93e:	00 00       	nop
		_delay_ms(1000);	//delay the system for time in (ms)
		LCD_vclearscreen();		//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     940:	0e 94 25 04 	call	0x84a	; 0x84a <LCD_vclearscreen>
		LCD_vsend_string("Set Admin Pass");  //printing the set admin password menu
     944:	81 ea       	ldi	r24, 0xA1	; 161
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_vsend_string>
		LCD_vmovecursor(2,1);
     94c:	82 e0       	ldi	r24, 0x02	; 2
     94e:	61 e0       	ldi	r22, 0x01	; 1
     950:	0e 94 2f 04 	call	0x85e	; 0x85e <LCD_vmovecursor>
		LCD_vsend_string("Admin Pass:");  // set pass:- consist of 4 Digit that enter via for loop
     954:	80 eb       	ldi	r24, 0xB0	; 176
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_vsend_string>
     95c:	c1 e2       	ldi	r28, 0x21	; 33
     95e:	d0 e0       	ldi	r29, 0x00	; 0
		/********************************* setting Admin password **********************************************/
		for (i=0;i<=3;i++)
		{
			do
			{
				value=keypad_u8check_press();
     960:	0e 94 3f 03 	call	0x67e	; 0x67e <keypad_u8check_press>
     964:	18 2f       	mov	r17, r24
			} while (value==NOTPRESSED);
     966:	8f 3f       	cpi	r24, 0xFF	; 255
     968:	d9 f3       	breq	.-10     	; 0x960 <main+0xc2>
			LCD_vsend_char(value);
     96a:	0e 94 0a 04 	call	0x814	; 0x814 <LCD_vsend_char>
     96e:	2f ef       	ldi	r18, 0xFF	; 255
     970:	32 e5       	ldi	r19, 0x52	; 82
     972:	47 e0       	ldi	r20, 0x07	; 7
     974:	21 50       	subi	r18, 0x01	; 1
     976:	30 40       	sbci	r19, 0x00	; 0
     978:	40 40       	sbci	r20, 0x00	; 0
     97a:	e1 f7       	brne	.-8      	; 0x974 <main+0xd6>
     97c:	00 c0       	rjmp	.+0      	; 0x97e <main+0xe0>
     97e:	00 00       	nop





int main(void)
     980:	6c 2f       	mov	r22, r28
     982:	65 51       	subi	r22, 0x15	; 21
			{
				value=keypad_u8check_press();
			} while (value==NOTPRESSED);
			LCD_vsend_char(value);
			_delay_ms(300);
			LCD_vmovecursor(2,12+i);			// column12 as start count from zero 12+i as "Admin Pass:" string 11 character and no.12 is the 1st digit of it's pass
     984:	82 e0       	ldi	r24, 0x02	; 2
     986:	0e 94 2f 04 	call	0x85e	; 0x85e <LCD_vmovecursor>
			LCD_vsend_char('*');				// put "*" in the 1st digit of it's pass
     98a:	8a e2       	ldi	r24, 0x2A	; 42
     98c:	0e 94 0a 04 	call	0x814	; 0x814 <LCD_vsend_char>
     990:	8f ef       	ldi	r24, 0xFF	; 255
     992:	90 e7       	ldi	r25, 0x70	; 112
     994:	a2 e0       	ldi	r26, 0x02	; 2
     996:	81 50       	subi	r24, 0x01	; 1
     998:	90 40       	sbci	r25, 0x00	; 0
     99a:	a0 40       	sbci	r26, 0x00	; 0
     99c:	e1 f7       	brne	.-8      	; 0x996 <main+0xf8>
     99e:	00 c0       	rjmp	.+0      	; 0x9a0 <main+0x102>
     9a0:	00 00       	nop
			_delay_ms(100);
			EEPROM_vwrite(EEPROM_ADMIN_PASSWORD_LOCATION1+i,value);		// put the value of the 1st digit of it's pass in location of EEPROM to keep it after power off
     9a2:	ce 01       	movw	r24, r28
     9a4:	61 2f       	mov	r22, r17
     9a6:	0e 94 f5 02 	call	0x5ea	; 0x5ea <EEPROM_vwrite>
     9aa:	21 96       	adiw	r28, 0x01	; 1
		LCD_vsend_string("Set Admin Pass");  //printing the set admin password menu
		LCD_vmovecursor(2,1);
		LCD_vsend_string("Admin Pass:");  // set pass:- consist of 4 Digit that enter via for loop
	
		/********************************* setting Admin password **********************************************/
		for (i=0;i<=3;i++)
     9ac:	c5 32       	cpi	r28, 0x25	; 37
     9ae:	d1 05       	cpc	r29, r1
     9b0:	b9 f6       	brne	.-82     	; 0x960 <main+0xc2>
			LCD_vmovecursor(2,12+i);			// column12 as start count from zero 12+i as "Admin Pass:" string 11 character and no.12 is the 1st digit of it's pass
			LCD_vsend_char('*');				// put "*" in the 1st digit of it's pass
			_delay_ms(100);
			EEPROM_vwrite(EEPROM_ADMIN_PASSWORD_LOCATION1+i,value);		// put the value of the 1st digit of it's pass in location of EEPROM to keep it after power off
		}//end for
		EEPROM_vwrite(EEPROM_ADMIN_STATUS_LOCATION,0x00);		//  to indicate that EEPROM_ADMIN_STATUS_LOCATION is written   not as a default 0xff = 0b1111,1111  that mean no thing is writen HERE
     9b2:	80 e2       	ldi	r24, 0x20	; 32
     9b4:	90 e0       	ldi	r25, 0x00	; 0
     9b6:	60 e0       	ldi	r22, 0x00	; 0
     9b8:	0e 94 f5 02 	call	0x5ea	; 0x5ea <EEPROM_vwrite>
		LCD_vclearscreen();
     9bc:	0e 94 25 04 	call	0x84a	; 0x84a <LCD_vclearscreen>
		LCD_vsend_string("Pass Saved");// show pass saved message
     9c0:	8c eb       	ldi	r24, 0xBC	; 188
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_vsend_string>
     9c8:	2f ef       	ldi	r18, 0xFF	; 255
     9ca:	34 e3       	ldi	r19, 0x34	; 52
     9cc:	4c e0       	ldi	r20, 0x0C	; 12
     9ce:	21 50       	subi	r18, 0x01	; 1
     9d0:	30 40       	sbci	r19, 0x00	; 0
     9d2:	40 40       	sbci	r20, 0x00	; 0
     9d4:	e1 f7       	brne	.-8      	; 0x9ce <main+0x130>
     9d6:	00 c0       	rjmp	.+0      	; 0x9d8 <main+0x13a>
     9d8:	00 00       	nop
		_delay_ms(500);//delay the system for time in (ms)
		LCD_vclearscreen();
     9da:	0e 94 25 04 	call	0x84a	; 0x84a <LCD_vclearscreen>



		/********************************* setting guest password **********************************************/

		LCD_vsend_string("Set Guest Pass");//printing the set GUEST password menu
     9de:	87 ec       	ldi	r24, 0xC7	; 199
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_vsend_string>
		LCD_vmovecursor(2,1);
     9e6:	82 e0       	ldi	r24, 0x02	; 2
     9e8:	61 e0       	ldi	r22, 0x01	; 1
     9ea:	0e 94 2f 04 	call	0x85e	; 0x85e <LCD_vmovecursor>
		LCD_vsend_string("Guest Pass:");
     9ee:	86 ed       	ldi	r24, 0xD6	; 214
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_vsend_string>
     9f6:	06 e2       	ldi	r16, 0x26	; 38
     9f8:	10 e0       	ldi	r17, 0x00	; 0

		for (i=0;i<=3;i++)
		{
			do
			{
				value=keypad_u8check_press();
     9fa:	0e 94 3f 03 	call	0x67e	; 0x67e <keypad_u8check_press>
     9fe:	d8 2f       	mov	r29, r24
			} while (value==NOTPRESSED);
     a00:	8f 3f       	cpi	r24, 0xFF	; 255
     a02:	d9 f3       	breq	.-10     	; 0x9fa <main+0x15c>
			LCD_vsend_char(value);
     a04:	0e 94 0a 04 	call	0x814	; 0x814 <LCD_vsend_char>
     a08:	8f ef       	ldi	r24, 0xFF	; 255
     a0a:	92 e5       	ldi	r25, 0x52	; 82
     a0c:	a7 e0       	ldi	r26, 0x07	; 7
     a0e:	81 50       	subi	r24, 0x01	; 1
     a10:	90 40       	sbci	r25, 0x00	; 0
     a12:	a0 40       	sbci	r26, 0x00	; 0
     a14:	e1 f7       	brne	.-8      	; 0xa0e <main+0x170>
     a16:	00 c0       	rjmp	.+0      	; 0xa18 <main+0x17a>
     a18:	00 00       	nop





int main(void)
     a1a:	60 2f       	mov	r22, r16
     a1c:	6a 51       	subi	r22, 0x1A	; 26
			{
				value=keypad_u8check_press();
			} while (value==NOTPRESSED);
			LCD_vsend_char(value);
			_delay_ms(300);
			LCD_vmovecursor(2,12+i);			// column12 as start count from zero 12+i as "Guest Pass:" string 11 character and no.12 is the 1st digit of it's pass
     a1e:	82 e0       	ldi	r24, 0x02	; 2
     a20:	0e 94 2f 04 	call	0x85e	; 0x85e <LCD_vmovecursor>
			LCD_vsend_char('*');				// put "*" in the 1st digit of it's pass
     a24:	8a e2       	ldi	r24, 0x2A	; 42
     a26:	0e 94 0a 04 	call	0x814	; 0x814 <LCD_vsend_char>
     a2a:	2f ef       	ldi	r18, 0xFF	; 255
     a2c:	30 e7       	ldi	r19, 0x70	; 112
     a2e:	42 e0       	ldi	r20, 0x02	; 2
     a30:	21 50       	subi	r18, 0x01	; 1
     a32:	30 40       	sbci	r19, 0x00	; 0
     a34:	40 40       	sbci	r20, 0x00	; 0
     a36:	e1 f7       	brne	.-8      	; 0xa30 <main+0x192>
     a38:	00 c0       	rjmp	.+0      	; 0xa3a <main+0x19c>
     a3a:	00 00       	nop
			_delay_ms(100);
			EEPROM_vwrite(EEPROM_GUEST_PASSWORD_LOCATION1+i,value);		// put the value of the 1st digit of it's pass in location of EEPROM to keep it after power off
     a3c:	c8 01       	movw	r24, r16
     a3e:	6d 2f       	mov	r22, r29
     a40:	0e 94 f5 02 	call	0x5ea	; 0x5ea <EEPROM_vwrite>
     a44:	0f 5f       	subi	r16, 0xFF	; 255
     a46:	1f 4f       	sbci	r17, 0xFF	; 255

		LCD_vsend_string("Set Guest Pass");//printing the set GUEST password menu
		LCD_vmovecursor(2,1);
		LCD_vsend_string("Guest Pass:");

		for (i=0;i<=3;i++)
     a48:	0a 32       	cpi	r16, 0x2A	; 42
     a4a:	11 05       	cpc	r17, r1
     a4c:	b1 f6       	brne	.-84     	; 0x9fa <main+0x15c>
			LCD_vmovecursor(2,12+i);			// column12 as start count from zero 12+i as "Guest Pass:" string 11 character and no.12 is the 1st digit of it's pass
			LCD_vsend_char('*');				// put "*" in the 1st digit of it's pass
			_delay_ms(100);
			EEPROM_vwrite(EEPROM_GUEST_PASSWORD_LOCATION1+i,value);		// put the value of the 1st digit of it's pass in location of EEPROM to keep it after power off
		}//end for
		EEPROM_vwrite(EEPROM_GUEST_STATUS_LOCATION,0x00);		//  to indicate that EEPROM_GUEST_STATUS_LOCATION is writen     not as a default 0xff = 0b1111,1111  that mean no thing is writen HERE
     a4e:	85 e2       	ldi	r24, 0x25	; 37
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	60 e0       	ldi	r22, 0x00	; 0
     a54:	0e 94 f5 02 	call	0x5ea	; 0x5ea <EEPROM_vwrite>
		LCD_vclearscreen();
     a58:	0e 94 25 04 	call	0x84a	; 0x84a <LCD_vclearscreen>
		LCD_vsend_string("Pass Saved");// show pass saved message
     a5c:	8c eb       	ldi	r24, 0xBC	; 188
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_vsend_string>
     a64:	8f ef       	ldi	r24, 0xFF	; 255
     a66:	94 e3       	ldi	r25, 0x34	; 52
     a68:	ac e0       	ldi	r26, 0x0C	; 12
     a6a:	81 50       	subi	r24, 0x01	; 1
     a6c:	90 40       	sbci	r25, 0x00	; 0
     a6e:	a0 40       	sbci	r26, 0x00	; 0
     a70:	e1 f7       	brne	.-8      	; 0xa6a <main+0x1cc>
     a72:	00 c0       	rjmp	.+0      	; 0xa74 <main+0x1d6>
     a74:	00 00       	nop
		_delay_ms(500);//delay the system for time in (ms)
		LCD_vclearscreen();
     a76:	0e 94 25 04 	call	0x84a	; 0x84a <LCD_vclearscreen>
{
	
	char value=NOTPRESSED;  	 //  default value 0xff = 0b1111,1111 of all locations in EEPROM
	char mode = NOTPRESSED;
	char flag=0,i;
	char block_mode_flag = 0; //is 1 if the login is blocked or 0 if not blocked
     a7a:	10 e0       	ldi	r17, 0x00	; 0


int main(void)
{
	
	char value=NOTPRESSED;  	 //  default value 0xff = 0b1111,1111 of all locations in EEPROM
     a7c:	03 e0       	ldi	r16, 0x03	; 3
			{   /********************************* User Select Admin login Mode **********************************************/
				case '0' :  // indicate to user select '0' Admin Mode
				LCD_vclearscreen();
				LCD_vsend_string("Admin mode");
				LCD_vmovecursor(2,1);
				LCD_vsend_string("Check Pass:");
     a7e:	0f 2e       	mov	r0, r31
     a80:	f4 e3       	ldi	r31, 0x34	; 52
     a82:	af 2e       	mov	r10, r31
     a84:	f1 e0       	ldi	r31, 0x01	; 1
     a86:	bf 2e       	mov	r11, r31
     a88:	f0 2d       	mov	r31, r0
     a8a:	0f 2e       	mov	r0, r31
     a8c:	fb e7       	ldi	r31, 0x7B	; 123
     a8e:	ef 2e       	mov	r14, r31
     a90:	f2 e0       	ldi	r31, 0x02	; 2
     a92:	ff 2e       	mov	r15, r31
     a94:	f0 2d       	mov	r31, r0
				{
					tries=tries-1;    // decrease no of tries by 1 and then check 
					if (tries>0)
					{
						LCD_vclearscreen();
						LCD_vsend_string("wrong password");
     a96:	0f 2e       	mov	r0, r31
     a98:	f9 e5       	ldi	r31, 0x59	; 89
     a9a:	8f 2e       	mov	r8, r31
     a9c:	f1 e0       	ldi	r31, 0x01	; 1
     a9e:	9f 2e       	mov	r9, r31
     aa0:	f0 2d       	mov	r31, r0
						LCD_vmovecursor(2,1);
						LCD_vsend_string("tries left:");
     aa2:	0f 2e       	mov	r0, r31
     aa4:	f8 e6       	ldi	r31, 0x68	; 104
     aa6:	6f 2e       	mov	r6, r31
     aa8:	f1 e0       	ldi	r31, 0x01	; 1
     aaa:	7f 2e       	mov	r7, r31
     aac:	f0 2d       	mov	r31, r0
					LCD_vsend_char('*');
					_delay_ms(100);
				}//end for
				
				/*********************************************  match pass that saved in EEPROM via "Admin pass" with pass that entered via "Enter pass"  ******************************************************/
				if(EEPROM_u8read(EEPROM_ADMIN_PASSWORD_LOCATION1)==arr[0] &&  EEPROM_u8read(EEPROM_ADMIN_PASSWORD_LOCATION2)==arr[1] && EEPROM_u8read(EEPROM_ADMIN_PASSWORD_LOCATION3)==arr[2] && EEPROM_u8read(EEPROM_ADMIN_PASSWORD_LOCATION4)==arr[3] )
     aae:	0f 2e       	mov	r0, r31
     ab0:	fc e7       	ldi	r31, 0x7C	; 124
     ab2:	4f 2e       	mov	r4, r31
     ab4:	f2 e0       	ldi	r31, 0x02	; 2
     ab6:	5f 2e       	mov	r5, r31
     ab8:	f0 2d       	mov	r31, r0
     aba:	0f 2e       	mov	r0, r31
     abc:	fd e7       	ldi	r31, 0x7D	; 125
     abe:	2f 2e       	mov	r2, r31
     ac0:	f2 e0       	ldi	r31, 0x02	; 2
     ac2:	3f 2e       	mov	r3, r31
     ac4:	f0 2d       	mov	r31, r0
     ac6:	07 c0       	rjmp	.+14     	; 0xad6 <main+0x238>
	}//end if admin and guest password is set

/* this code of else run only if the system is not running for the first time (ADMIN and GUEST passwords are set )*/
	else
	{
		block_mode_flag = EEPROM_u8read(EEPROM_LOGIN_BLOCKED_LOCATION); //read the blocked location from EEPROM
     ac8:	80 e3       	ldi	r24, 0x30	; 48
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	0e 94 fd 02 	call	0x5fa	; 0x5fa <EEPROM_u8read>
     ad0:	18 2f       	mov	r17, r24


int main(void)
{
	
	char value=NOTPRESSED;  	 //  default value 0xff = 0b1111,1111 of all locations in EEPROM
     ad2:	df ef       	ldi	r29, 0xFF	; 255
     ad4:	d3 cf       	rjmp	.-90     	; 0xa7c <main+0x1de>

	while(flag==0)		//if (EEPROM_u8read(EEPROM_ADMIN_STATUS_LOCATION)==0x00) if read a EEPROM_ADMIN_STATUS_LOCATION as NOT AS a default 0xff = 0b1111,1111  that mean thing is writen HERE
	{	//arr[0]=arr[1]=arr[2]=arr[3]=NOTPRESSED;
	
	/* ===================  Code active in case block mode flag Active =1  and off = 0   =========================== */
		if(block_mode_flag==1)//if the login process was blocked wait till the end of the block period
     ad6:	11 30       	cpi	r17, 0x01	; 1
     ad8:	09 f0       	breq	.+2      	; 0xadc <main+0x23e>
     ada:	49 c0       	rjmp	.+146    	; 0xb6e <main+0x2d0>
		{
			LCD_vclearscreen();
     adc:	0e 94 25 04 	call	0x84a	; 0x84a <LCD_vclearscreen>
			LCD_vsend_string("Login blocked");
     ae0:	82 ee       	ldi	r24, 0xE2	; 226
     ae2:	90 e0       	ldi	r25, 0x00	; 0
     ae4:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_vsend_string>
			LCD_vmovecursor(2,1);
     ae8:	82 e0       	ldi	r24, 0x02	; 2
     aea:	61 e0       	ldi	r22, 0x01	; 1
     aec:	0e 94 2f 04 	call	0x85e	; 0x85e <LCD_vmovecursor>
			LED_vTurnOn('C',2);  //Turn on the led of Block Mode		
     af0:	83 e4       	ldi	r24, 0x43	; 67
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	62 e0       	ldi	r22, 0x02	; 2
     af6:	70 e0       	ldi	r23, 0x00	; 0
     af8:	0e 94 44 04 	call	0x888	; 0x888 <LED_vTurnOn>
			LCD_vsend_string("wait ");
     afc:	80 ef       	ldi	r24, 0xF0	; 240
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_vsend_string>
			// count 20 seconds Descending  i.e 20,19,18,... and so on till 1
			for (int i=20;i>=1;i--)
     b04:	04 e1       	ldi	r16, 0x14	; 20
     b06:	10 e0       	ldi	r17, 0x00	; 0
			{
				LCD_vmovecursor(2,6);
				LCD_vsend_char( (i/10) +48);
     b08:	0f 2e       	mov	r0, r31
     b0a:	fa e0       	ldi	r31, 0x0A	; 10
     b0c:	cf 2e       	mov	r12, r31
     b0e:	dd 24       	eor	r13, r13
     b10:	f0 2d       	mov	r31, r0
			LED_vTurnOn('C',2);  //Turn on the led of Block Mode		
			LCD_vsend_string("wait ");
			// count 20 seconds Descending  i.e 20,19,18,... and so on till 1
			for (int i=20;i>=1;i--)
			{
				LCD_vmovecursor(2,6);
     b12:	82 e0       	ldi	r24, 0x02	; 2
     b14:	66 e0       	ldi	r22, 0x06	; 6
     b16:	0e 94 2f 04 	call	0x85e	; 0x85e <LCD_vmovecursor>
				LCD_vsend_char( (i/10) +48);
     b1a:	c8 01       	movw	r24, r16
     b1c:	b6 01       	movw	r22, r12
     b1e:	0e 94 de 0b 	call	0x17bc	; 0x17bc <__divmodhi4>
     b22:	c8 2f       	mov	r28, r24
     b24:	86 2f       	mov	r24, r22
     b26:	80 5d       	subi	r24, 0xD0	; 208
     b28:	0e 94 0a 04 	call	0x814	; 0x814 <LCD_vsend_char>
				LCD_vsend_char( (i%10) +48);
     b2c:	8c 2f       	mov	r24, r28
     b2e:	80 5d       	subi	r24, 0xD0	; 208
     b30:	0e 94 0a 04 	call	0x814	; 0x814 <LCD_vsend_char>
				LCD_vsend_string(" seconds");
     b34:	86 ef       	ldi	r24, 0xF6	; 246
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_vsend_string>
     b3c:	2f ef       	ldi	r18, 0xFF	; 255
     b3e:	39 e6       	ldi	r19, 0x69	; 105
     b40:	48 e1       	ldi	r20, 0x18	; 24
     b42:	21 50       	subi	r18, 0x01	; 1
     b44:	30 40       	sbci	r19, 0x00	; 0
     b46:	40 40       	sbci	r20, 0x00	; 0
     b48:	e1 f7       	brne	.-8      	; 0xb42 <main+0x2a4>
     b4a:	00 c0       	rjmp	.+0      	; 0xb4c <main+0x2ae>
     b4c:	00 00       	nop
			LCD_vsend_string("Login blocked");
			LCD_vmovecursor(2,1);
			LED_vTurnOn('C',2);  //Turn on the led of Block Mode		
			LCD_vsend_string("wait ");
			// count 20 seconds Descending  i.e 20,19,18,... and so on till 1
			for (int i=20;i>=1;i--)
     b4e:	01 50       	subi	r16, 0x01	; 1
     b50:	10 40       	sbci	r17, 0x00	; 0
     b52:	f9 f6       	brne	.-66     	; 0xb12 <main+0x274>
				_delay_ms(1000);//delay  the system for 1 Second time in (ms)
			}
	        // _delay_ms(BLOCK_MODE_TIME);//delay  the system for the time in (ms)
			tries = 0;    //Clear the count on number of wrong tries
			block_mode_flag = 0;//Disable block of runtime
			LED_vTurnOff('C',2);//Turn off the led of Blocked
     b54:	83 e4       	ldi	r24, 0x43	; 67
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	62 e0       	ldi	r22, 0x02	; 2
     b5a:	70 e0       	ldi	r23, 0x00	; 0
     b5c:	0e 94 48 04 	call	0x890	; 0x890 <LED_vTurnOff>
			EEPROM_vwrite(EEPROM_LOGIN_BLOCKED_LOCATION,0x00);//write "0x00" at blocked location in EEPROM .. so make it as NOT AS a default 0xff = 0b1111,1111  that mean thing is writen HERE
     b60:	80 e3       	ldi	r24, 0x30	; 48
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	60 e0       	ldi	r22, 0x00	; 0
     b66:	0e 94 f5 02 	call	0x5ea	; 0x5ea <EEPROM_vwrite>
				LCD_vsend_char( (i%10) +48);
				LCD_vsend_string(" seconds");
				_delay_ms(1000);//delay  the system for 1 Second time in (ms)
			}
	        // _delay_ms(BLOCK_MODE_TIME);//delay  the system for the time in (ms)
			tries = 0;    //Clear the count on number of wrong tries
     b6a:	00 e0       	ldi	r16, 0x00	; 0
			block_mode_flag = 0;//Disable block of runtime
     b6c:	10 e0       	ldi	r17, 0x00	; 0
			LED_vTurnOff('C',2);//Turn off the led of Blocked
			EEPROM_vwrite(EEPROM_LOGIN_BLOCKED_LOCATION,0x00);//write "0x00" at blocked location in EEPROM .. so make it as NOT AS a default 0xff = 0b1111,1111  that mean thing is writen HERE
		}	//end if 
	
		LCD_vclearscreen();
     b6e:	0e 94 25 04 	call	0x84a	; 0x84a <LCD_vclearscreen>
		LCD_vsend_string("Select Mode:");
     b72:	8f ef       	ldi	r24, 0xFF	; 255
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_vsend_string>
		LCD_vmovecursor(2,1);
     b7a:	82 e0       	ldi	r24, 0x02	; 2
     b7c:	61 e0       	ldi	r22, 0x01	; 1
     b7e:	0e 94 2f 04 	call	0x85e	; 0x85e <LCD_vmovecursor>
		LCD_vsend_string("0:Admin 1:Guest");
     b82:	8c e0       	ldi	r24, 0x0C	; 12
     b84:	91 e0       	ldi	r25, 0x01	; 1
     b86:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_vsend_string>
	
	
		while(value == NOTPRESSED )//wait for select which mode?
     b8a:	df 3f       	cpi	r29, 0xFF	; 255
     b8c:	29 f4       	brne	.+10     	; 0xb98 <main+0x2fa>
		{
			value = keypad_u8check_press();//if the user pressed any button in keypad save it's value in Value Variable
     b8e:	0e 94 3f 03 	call	0x67e	; 0x67e <keypad_u8check_press>
		LCD_vsend_string("Select Mode:");
		LCD_vmovecursor(2,1);
		LCD_vsend_string("0:Admin 1:Guest");
	
	
		while(value == NOTPRESSED )//wait for select which mode?
     b92:	8f 3f       	cpi	r24, 0xFF	; 255
     b94:	e1 f3       	breq	.-8      	; 0xb8e <main+0x2f0>
     b96:	d8 2f       	mov	r29, r24
		{
			value = keypad_u8check_press();//if the user pressed any button in keypad save it's value in Value Variable
		}
	
		if ( value!= '0' && value!= '1' )  // if value!= "0:Admin 1:Guest" -->handle wrong input from user
     b98:	8d 2f       	mov	r24, r29
     b9a:	80 53       	subi	r24, 0x30	; 48
     b9c:	82 30       	cpi	r24, 0x02	; 2
     b9e:	88 f0       	brcs	.+34     	; 0xbc2 <main+0x324>
		{
			LCD_vclearscreen();
     ba0:	0e 94 25 04 	call	0x84a	; 0x84a <LCD_vclearscreen>
			LCD_vsend_string("Wrong input.");	//Prints error message on the LCD
     ba4:	8c e1       	ldi	r24, 0x1C	; 28
     ba6:	91 e0       	ldi	r25, 0x01	; 1
     ba8:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_vsend_string>
     bac:	8f ef       	ldi	r24, 0xFF	; 255
     bae:	99 e6       	ldi	r25, 0x69	; 105
     bb0:	a8 e1       	ldi	r26, 0x18	; 24
     bb2:	81 50       	subi	r24, 0x01	; 1
     bb4:	90 40       	sbci	r25, 0x00	; 0
     bb6:	a0 40       	sbci	r26, 0x00	; 0
     bb8:	e1 f7       	brne	.-8      	; 0xbb2 <main+0x314>
     bba:	00 c0       	rjmp	.+0      	; 0xbbc <main+0x31e>
     bbc:	00 00       	nop
			value = NOTPRESSED;	//return the variable"value" that holds the pressed key from keypad to its initial value
     bbe:	df ef       	ldi	r29, 0xFF	; 255
			_delay_ms(1000);	//delay  the system for the time in (ms)
			continue;	//return to the loop of login #while (login_mode==NO_MODE)# line 128
     bc0:	8a cf       	rjmp	.-236    	; 0xad6 <main+0x238>
		}
		
		
		
		switch(value)
     bc2:	d0 33       	cpi	r29, 0x30	; 48
     bc4:	21 f0       	breq	.+8      	; 0xbce <main+0x330>
     bc6:	d1 33       	cpi	r29, 0x31	; 49
     bc8:	09 f0       	breq	.+2      	; 0xbcc <main+0x32e>
     bca:	85 cf       	rjmp	.-246    	; 0xad6 <main+0x238>
     bcc:	a6 c0       	rjmp	.+332    	; 0xd1a <main+0x47c>
			{   /********************************* User Select Admin login Mode **********************************************/
				case '0' :  // indicate to user select '0' Admin Mode
				LCD_vclearscreen();
     bce:	0e 94 25 04 	call	0x84a	; 0x84a <LCD_vclearscreen>
				LCD_vsend_string("Admin mode");
     bd2:	89 e2       	ldi	r24, 0x29	; 41
     bd4:	91 e0       	ldi	r25, 0x01	; 1
     bd6:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_vsend_string>
				LCD_vmovecursor(2,1);
     bda:	82 e0       	ldi	r24, 0x02	; 2
     bdc:	61 e0       	ldi	r22, 0x01	; 1
     bde:	0e 94 2f 04 	call	0x85e	; 0x85e <LCD_vmovecursor>
				LCD_vsend_string("Check Pass:");
     be2:	c5 01       	movw	r24, r10
     be4:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_vsend_string>
     be8:	2f ef       	ldi	r18, 0xFF	; 255
     bea:	31 ee       	ldi	r19, 0xE1	; 225
     bec:	44 e0       	ldi	r20, 0x04	; 4
     bee:	21 50       	subi	r18, 0x01	; 1
     bf0:	30 40       	sbci	r19, 0x00	; 0
     bf2:	40 40       	sbci	r20, 0x00	; 0
     bf4:	e1 f7       	brne	.-8      	; 0xbee <main+0x350>
     bf6:	00 c0       	rjmp	.+0      	; 0xbf8 <main+0x35a>
     bf8:	00 00       	nop
     bfa:	67 01       	movw	r12, r14
     bfc:	cc e0       	ldi	r28, 0x0C	; 12
				
				for (i=0;i<=3;i++)
				{
					do
					{
						arr[i]=keypad_u8check_press();		// check pass:- enter your admin pass that consist of 4 Digit that entered when "Admin Pass:" in the first time open the smart home system
     bfe:	0e 94 3f 03 	call	0x67e	; 0x67e <keypad_u8check_press>
     c02:	d6 01       	movw	r26, r12
     c04:	8c 93       	st	X, r24
					} while (arr[i]==NOTPRESSED);
     c06:	8f 3f       	cpi	r24, 0xFF	; 255
     c08:	d1 f3       	breq	.-12     	; 0xbfe <main+0x360>
					LCD_vsend_char(arr[i]);
     c0a:	0e 94 0a 04 	call	0x814	; 0x814 <LCD_vsend_char>
     c0e:	2f ef       	ldi	r18, 0xFF	; 255
     c10:	32 e5       	ldi	r19, 0x52	; 82
     c12:	47 e0       	ldi	r20, 0x07	; 7
     c14:	21 50       	subi	r18, 0x01	; 1
     c16:	30 40       	sbci	r19, 0x00	; 0
     c18:	40 40       	sbci	r20, 0x00	; 0
     c1a:	e1 f7       	brne	.-8      	; 0xc14 <main+0x376>
     c1c:	00 c0       	rjmp	.+0      	; 0xc1e <main+0x380>
     c1e:	00 00       	nop
					_delay_ms(300);
					LCD_vmovecursor(2,12+i);		// column11 as start count from zero  12+i as "Enter Pass:" string 11 character and no.12 is the 1st digit of it's pass
     c20:	82 e0       	ldi	r24, 0x02	; 2
     c22:	6c 2f       	mov	r22, r28
     c24:	0e 94 2f 04 	call	0x85e	; 0x85e <LCD_vmovecursor>
					LCD_vsend_char('*');
     c28:	8a e2       	ldi	r24, 0x2A	; 42
     c2a:	0e 94 0a 04 	call	0x814	; 0x814 <LCD_vsend_char>
     c2e:	8f ef       	ldi	r24, 0xFF	; 255
     c30:	90 e7       	ldi	r25, 0x70	; 112
     c32:	a2 e0       	ldi	r26, 0x02	; 2
     c34:	81 50       	subi	r24, 0x01	; 1
     c36:	90 40       	sbci	r25, 0x00	; 0
     c38:	a0 40       	sbci	r26, 0x00	; 0
     c3a:	e1 f7       	brne	.-8      	; 0xc34 <main+0x396>
     c3c:	00 c0       	rjmp	.+0      	; 0xc3e <main+0x3a0>
     c3e:	00 00       	nop
     c40:	cf 5f       	subi	r28, 0xFF	; 255
     c42:	08 94       	sec
     c44:	c1 1c       	adc	r12, r1
     c46:	d1 1c       	adc	r13, r1
				LCD_vsend_string("Admin mode");
				LCD_vmovecursor(2,1);
				LCD_vsend_string("Check Pass:");
				_delay_ms(200);   
				
				for (i=0;i<=3;i++)
     c48:	c0 31       	cpi	r28, 0x10	; 16
     c4a:	c9 f6       	brne	.-78     	; 0xbfe <main+0x360>
					LCD_vsend_char('*');
					_delay_ms(100);
				}//end for
				
				/*********************************************  match pass that saved in EEPROM via "Admin pass" with pass that entered via "Enter pass"  ******************************************************/
				if(EEPROM_u8read(EEPROM_ADMIN_PASSWORD_LOCATION1)==arr[0] &&  EEPROM_u8read(EEPROM_ADMIN_PASSWORD_LOCATION2)==arr[1] && EEPROM_u8read(EEPROM_ADMIN_PASSWORD_LOCATION3)==arr[2] && EEPROM_u8read(EEPROM_ADMIN_PASSWORD_LOCATION4)==arr[3] )
     c4c:	81 e2       	ldi	r24, 0x21	; 33
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	0e 94 fd 02 	call	0x5fa	; 0x5fa <EEPROM_u8read>
     c54:	d7 01       	movw	r26, r14
     c56:	9c 91       	ld	r25, X
     c58:	89 17       	cp	r24, r25
     c5a:	b9 f5       	brne	.+110    	; 0xcca <main+0x42c>
     c5c:	82 e2       	ldi	r24, 0x22	; 34
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	0e 94 fd 02 	call	0x5fa	; 0x5fa <EEPROM_u8read>
     c64:	f2 01       	movw	r30, r4
     c66:	90 81       	ld	r25, Z
     c68:	89 17       	cp	r24, r25
     c6a:	79 f5       	brne	.+94     	; 0xcca <main+0x42c>
     c6c:	83 e2       	ldi	r24, 0x23	; 35
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	0e 94 fd 02 	call	0x5fa	; 0x5fa <EEPROM_u8read>
     c74:	d1 01       	movw	r26, r2
     c76:	9c 91       	ld	r25, X
     c78:	89 17       	cp	r24, r25
     c7a:	39 f5       	brne	.+78     	; 0xcca <main+0x42c>
     c7c:	84 e2       	ldi	r24, 0x24	; 36
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	0e 94 fd 02 	call	0x5fa	; 0x5fa <EEPROM_u8read>
     c84:	90 91 7e 02 	lds	r25, 0x027E
     c88:	89 17       	cp	r24, r25
     c8a:	f9 f4       	brne	.+62     	; 0xcca <main+0x42c>
				{
					LCD_vclearscreen();
     c8c:	0e 94 25 04 	call	0x84a	; 0x84a <LCD_vclearscreen>
					LCD_vsend_string("true password");
     c90:	80 e4       	ldi	r24, 0x40	; 64
     c92:	91 e0       	ldi	r25, 0x01	; 1
     c94:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_vsend_string>
					LCD_vmovecursor(2,1);
     c98:	82 e0       	ldi	r24, 0x02	; 2
     c9a:	61 e0       	ldi	r22, 0x01	; 1
     c9c:	0e 94 2f 04 	call	0x85e	; 0x85e <LCD_vmovecursor>
					LCD_vsend_string("Admin Mode");
     ca0:	8e e4       	ldi	r24, 0x4E	; 78
     ca2:	91 e0       	ldi	r25, 0x01	; 1
     ca4:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_vsend_string>
     ca8:	2f ef       	ldi	r18, 0xFF	; 255
     caa:	34 e3       	ldi	r19, 0x34	; 52
     cac:	4c e0       	ldi	r20, 0x0C	; 12
     cae:	21 50       	subi	r18, 0x01	; 1
     cb0:	30 40       	sbci	r19, 0x00	; 0
     cb2:	40 40       	sbci	r20, 0x00	; 0
     cb4:	e1 f7       	brne	.-8      	; 0xcae <main+0x410>
     cb6:	00 c0       	rjmp	.+0      	; 0xcb8 <main+0x41a>
     cb8:	00 00       	nop
					_delay_ms(500);
					LED_vTurnOn('C', 0 );//turn on the led of admin
     cba:	83 e4       	ldi	r24, 0x43	; 67
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	60 e0       	ldi	r22, 0x00	; 0
     cc0:	70 e0       	ldi	r23, 0x00	; 0
     cc2:	0e 94 44 04 	call	0x888	; 0x888 <LED_vTurnOn>
					mode=0;// indicate to user in '0' Admin Mode
     cc6:	d0 e0       	ldi	r29, 0x00	; 0
					_delay_ms(100);
				}//end for
				
				/*********************************************  match pass that saved in EEPROM via "Admin pass" with pass that entered via "Enter pass"  ******************************************************/
				if(EEPROM_u8read(EEPROM_ADMIN_PASSWORD_LOCATION1)==arr[0] &&  EEPROM_u8read(EEPROM_ADMIN_PASSWORD_LOCATION2)==arr[1] && EEPROM_u8read(EEPROM_ADMIN_PASSWORD_LOCATION3)==arr[2] && EEPROM_u8read(EEPROM_ADMIN_PASSWORD_LOCATION4)==arr[3] )
				{
     cc8:	e2 c4       	rjmp	.+2500   	; 0x168e <main+0xdf0>
					mode=0;// indicate to user in '0' Admin Mode
					flag=1;			
				}
				else//in case of wrong password
				{
					tries=tries-1;    // decrease no of tries by 1 and then check 
     cca:	c0 2f       	mov	r28, r16
     ccc:	c1 50       	subi	r28, 0x01	; 1
					if (tries>0)
     cce:	e9 f0       	breq	.+58     	; 0xd0a <main+0x46c>
					{
						LCD_vclearscreen();
     cd0:	0e 94 25 04 	call	0x84a	; 0x84a <LCD_vclearscreen>
						LCD_vsend_string("wrong password");
     cd4:	c4 01       	movw	r24, r8
     cd6:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_vsend_string>
						LCD_vmovecursor(2,1);
     cda:	82 e0       	ldi	r24, 0x02	; 2
     cdc:	61 e0       	ldi	r22, 0x01	; 1
     cde:	0e 94 2f 04 	call	0x85e	; 0x85e <LCD_vmovecursor>
						LCD_vsend_string("tries left:");
     ce2:	c3 01       	movw	r24, r6
     ce4:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_vsend_string>
						LCD_vsend_char(tries+48);
     ce8:	80 2f       	mov	r24, r16
     cea:	81 5d       	subi	r24, 0xD1	; 209
     cec:	0e 94 0a 04 	call	0x814	; 0x814 <LCD_vsend_char>
     cf0:	8f ef       	ldi	r24, 0xFF	; 255
     cf2:	99 e6       	ldi	r25, 0x69	; 105
     cf4:	a8 e1       	ldi	r26, 0x18	; 24
     cf6:	81 50       	subi	r24, 0x01	; 1
     cf8:	90 40       	sbci	r25, 0x00	; 0
     cfa:	a0 40       	sbci	r26, 0x00	; 0
     cfc:	e1 f7       	brne	.-8      	; 0xcf6 <main+0x458>
     cfe:	00 c0       	rjmp	.+0      	; 0xd00 <main+0x462>
     d00:	00 00       	nop
						_delay_ms(1000);
						LCD_vclearscreen();
     d02:	0e 94 25 04 	call	0x84a	; 0x84a <LCD_vclearscreen>
					mode=0;// indicate to user in '0' Admin Mode
					flag=1;			
				}
				else//in case of wrong password
				{
					tries=tries-1;    // decrease no of tries by 1 and then check 
     d06:	0c 2f       	mov	r16, r28
     d08:	e6 ce       	rjmp	.-564    	; 0xad6 <main+0x238>
						LCD_vclearscreen();
					}
					else
					{
						
						EEPROM_vwrite(EEPROM_LOGIN_BLOCKED_LOCATION,0x00); //Need To active Block Mode for 20 Sec
     d0a:	80 e3       	ldi	r24, 0x30	; 48
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	60 e0       	ldi	r22, 0x00	; 0
     d10:	0e 94 f5 02 	call	0x5ea	; 0x5ea <EEPROM_vwrite>
					mode=0;// indicate to user in '0' Admin Mode
					flag=1;			
				}
				else//in case of wrong password
				{
					tries=tries-1;    // decrease no of tries by 1 and then check 
     d14:	0c 2f       	mov	r16, r28
					}
					else
					{
						
						EEPROM_vwrite(EEPROM_LOGIN_BLOCKED_LOCATION,0x00); //Need To active Block Mode for 20 Sec
						block_mode_flag=1;
     d16:	11 e0       	ldi	r17, 0x01	; 1
						break;//break the loop of admin login # while(flag==0) @ line 138
     d18:	de ce       	rjmp	.-580    	; 0xad6 <main+0x238>
				}
				break;   // break switch case of admin mode
					
				/********************************* User Select Guest login Mode **********************************************/
				case '1' :
				LCD_vclearscreen();
     d1a:	0e 94 25 04 	call	0x84a	; 0x84a <LCD_vclearscreen>
				LCD_vsend_string("Guest mode");
     d1e:	84 e7       	ldi	r24, 0x74	; 116
     d20:	91 e0       	ldi	r25, 0x01	; 1
     d22:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_vsend_string>
				LCD_vmovecursor(2,1);
     d26:	82 e0       	ldi	r24, 0x02	; 2
     d28:	61 e0       	ldi	r22, 0x01	; 1
     d2a:	0e 94 2f 04 	call	0x85e	; 0x85e <LCD_vmovecursor>
				LCD_vsend_string("Check Pass:");
     d2e:	c5 01       	movw	r24, r10
     d30:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_vsend_string>
     d34:	2f ef       	ldi	r18, 0xFF	; 255
     d36:	31 ee       	ldi	r19, 0xE1	; 225
     d38:	44 e0       	ldi	r20, 0x04	; 4
     d3a:	21 50       	subi	r18, 0x01	; 1
     d3c:	30 40       	sbci	r19, 0x00	; 0
     d3e:	40 40       	sbci	r20, 0x00	; 0
     d40:	e1 f7       	brne	.-8      	; 0xd3a <main+0x49c>
     d42:	00 c0       	rjmp	.+0      	; 0xd44 <main+0x4a6>
     d44:	00 00       	nop
     d46:	67 01       	movw	r12, r14
     d48:	cc e0       	ldi	r28, 0x0C	; 12
					 
				for (i=0;i<=3;i++)
				{
					do
					{
						arr[i]=keypad_u8check_press();		// check pass:- enter your guest pass that consist of 4 Digit that entered when "Guest Pass:" in the first time open the smart home system
     d4a:	0e 94 3f 03 	call	0x67e	; 0x67e <keypad_u8check_press>
     d4e:	d6 01       	movw	r26, r12
     d50:	8c 93       	st	X, r24
					} while (arr[i]==NOTPRESSED);
     d52:	8f 3f       	cpi	r24, 0xFF	; 255
     d54:	d1 f3       	breq	.-12     	; 0xd4a <main+0x4ac>
					LCD_vsend_char(arr[i]);
     d56:	0e 94 0a 04 	call	0x814	; 0x814 <LCD_vsend_char>
     d5a:	2f ef       	ldi	r18, 0xFF	; 255
     d5c:	32 e5       	ldi	r19, 0x52	; 82
     d5e:	47 e0       	ldi	r20, 0x07	; 7
     d60:	21 50       	subi	r18, 0x01	; 1
     d62:	30 40       	sbci	r19, 0x00	; 0
     d64:	40 40       	sbci	r20, 0x00	; 0
     d66:	e1 f7       	brne	.-8      	; 0xd60 <main+0x4c2>
     d68:	00 c0       	rjmp	.+0      	; 0xd6a <main+0x4cc>
     d6a:	00 00       	nop
					_delay_ms(300);
					LCD_vmovecursor(2,12+i);		// column11 as start count from zero  12+i as "Check Pass:" string 11 character and no.12 is the 1st digit of it's pass
     d6c:	82 e0       	ldi	r24, 0x02	; 2
     d6e:	6c 2f       	mov	r22, r28
     d70:	0e 94 2f 04 	call	0x85e	; 0x85e <LCD_vmovecursor>
					LCD_vsend_char('*');
     d74:	8a e2       	ldi	r24, 0x2A	; 42
     d76:	0e 94 0a 04 	call	0x814	; 0x814 <LCD_vsend_char>
     d7a:	8f ef       	ldi	r24, 0xFF	; 255
     d7c:	90 e7       	ldi	r25, 0x70	; 112
     d7e:	a2 e0       	ldi	r26, 0x02	; 2
     d80:	81 50       	subi	r24, 0x01	; 1
     d82:	90 40       	sbci	r25, 0x00	; 0
     d84:	a0 40       	sbci	r26, 0x00	; 0
     d86:	e1 f7       	brne	.-8      	; 0xd80 <main+0x4e2>
     d88:	00 c0       	rjmp	.+0      	; 0xd8a <main+0x4ec>
     d8a:	00 00       	nop
     d8c:	cf 5f       	subi	r28, 0xFF	; 255
     d8e:	08 94       	sec
     d90:	c1 1c       	adc	r12, r1
     d92:	d1 1c       	adc	r13, r1
				LCD_vsend_string("Guest mode");
				LCD_vmovecursor(2,1);
				LCD_vsend_string("Check Pass:");
				_delay_ms(200);
					 
				for (i=0;i<=3;i++)
     d94:	c0 31       	cpi	r28, 0x10	; 16
     d96:	c9 f6       	brne	.-78     	; 0xd4a <main+0x4ac>
					LCD_vsend_char('*');
					_delay_ms(100);
				}//end for
					 
				/*********************************************  match pass that saved in EEPROM via "Guest pass" with pass that entered via "Check pass"  ******************************************************/
				if(EEPROM_u8read(EEPROM_GUEST_PASSWORD_LOCATION1)==arr[0] &&  EEPROM_u8read(EEPROM_GUEST_PASSWORD_LOCATION2)==arr[1] && EEPROM_u8read(EEPROM_GUEST_PASSWORD_LOCATION3)==arr[2] && EEPROM_u8read(EEPROM_GUEST_PASSWORD_LOCATION4)==arr[3] )
     d98:	86 e2       	ldi	r24, 0x26	; 38
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	0e 94 fd 02 	call	0x5fa	; 0x5fa <EEPROM_u8read>
     da0:	d7 01       	movw	r26, r14
     da2:	9c 91       	ld	r25, X
     da4:	89 17       	cp	r24, r25
     da6:	b9 f5       	brne	.+110    	; 0xe16 <main+0x578>
     da8:	87 e2       	ldi	r24, 0x27	; 39
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	0e 94 fd 02 	call	0x5fa	; 0x5fa <EEPROM_u8read>
     db0:	f2 01       	movw	r30, r4
     db2:	90 81       	ld	r25, Z
     db4:	89 17       	cp	r24, r25
     db6:	79 f5       	brne	.+94     	; 0xe16 <main+0x578>
     db8:	88 e2       	ldi	r24, 0x28	; 40
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	0e 94 fd 02 	call	0x5fa	; 0x5fa <EEPROM_u8read>
     dc0:	d1 01       	movw	r26, r2
     dc2:	9c 91       	ld	r25, X
     dc4:	89 17       	cp	r24, r25
     dc6:	39 f5       	brne	.+78     	; 0xe16 <main+0x578>
     dc8:	89 e2       	ldi	r24, 0x29	; 41
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	0e 94 fd 02 	call	0x5fa	; 0x5fa <EEPROM_u8read>
     dd0:	90 91 7e 02 	lds	r25, 0x027E
     dd4:	89 17       	cp	r24, r25
     dd6:	f9 f4       	brne	.+62     	; 0xe16 <main+0x578>
				{
					LCD_vclearscreen();
     dd8:	0e 94 25 04 	call	0x84a	; 0x84a <LCD_vclearscreen>
					LCD_vsend_string("true password");
     ddc:	80 e4       	ldi	r24, 0x40	; 64
     dde:	91 e0       	ldi	r25, 0x01	; 1
     de0:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_vsend_string>
					LCD_vmovecursor(2,1);
     de4:	82 e0       	ldi	r24, 0x02	; 2
     de6:	61 e0       	ldi	r22, 0x01	; 1
     de8:	0e 94 2f 04 	call	0x85e	; 0x85e <LCD_vmovecursor>
					LCD_vsend_string("Guest Mode");
     dec:	8f e7       	ldi	r24, 0x7F	; 127
     dee:	91 e0       	ldi	r25, 0x01	; 1
     df0:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_vsend_string>
     df4:	2f ef       	ldi	r18, 0xFF	; 255
     df6:	34 e3       	ldi	r19, 0x34	; 52
     df8:	4c e0       	ldi	r20, 0x0C	; 12
     dfa:	21 50       	subi	r18, 0x01	; 1
     dfc:	30 40       	sbci	r19, 0x00	; 0
     dfe:	40 40       	sbci	r20, 0x00	; 0
     e00:	e1 f7       	brne	.-8      	; 0xdfa <main+0x55c>
     e02:	00 c0       	rjmp	.+0      	; 0xe04 <main+0x566>
     e04:	00 00       	nop
					_delay_ms(500);
					LED_vTurnOn('C', 1 );//turn on the led of Guest
     e06:	83 e4       	ldi	r24, 0x43	; 67
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	61 e0       	ldi	r22, 0x01	; 1
     e0c:	70 e0       	ldi	r23, 0x00	; 0
     e0e:	0e 94 44 04 	call	0x888	; 0x888 <LED_vTurnOn>
					mode=1;// indicate to user in '0' Admin Mode
     e12:	d1 e0       	ldi	r29, 0x01	; 1
					_delay_ms(100);
				}//end for
					 
				/*********************************************  match pass that saved in EEPROM via "Guest pass" with pass that entered via "Check pass"  ******************************************************/
				if(EEPROM_u8read(EEPROM_GUEST_PASSWORD_LOCATION1)==arr[0] &&  EEPROM_u8read(EEPROM_GUEST_PASSWORD_LOCATION2)==arr[1] && EEPROM_u8read(EEPROM_GUEST_PASSWORD_LOCATION3)==arr[2] && EEPROM_u8read(EEPROM_GUEST_PASSWORD_LOCATION4)==arr[3] )
				{
     e14:	3c c4       	rjmp	.+2168   	; 0x168e <main+0xdf0>
					mode=1;// indicate to user in '0' Admin Mode
					flag=1;
				}
				else//in case of wrong password
				{
					tries=tries-1;    // decrease no of tries by 1 and then check
     e16:	c0 2f       	mov	r28, r16
     e18:	c1 50       	subi	r28, 0x01	; 1
					if (tries>0)
     e1a:	e9 f0       	breq	.+58     	; 0xe56 <main+0x5b8>
					{
						LCD_vclearscreen();
     e1c:	0e 94 25 04 	call	0x84a	; 0x84a <LCD_vclearscreen>
						LCD_vsend_string("wrong password");
     e20:	c4 01       	movw	r24, r8
     e22:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_vsend_string>
						LCD_vmovecursor(2,1);
     e26:	82 e0       	ldi	r24, 0x02	; 2
     e28:	61 e0       	ldi	r22, 0x01	; 1
     e2a:	0e 94 2f 04 	call	0x85e	; 0x85e <LCD_vmovecursor>
						LCD_vsend_string("tries left:");
     e2e:	c3 01       	movw	r24, r6
     e30:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_vsend_string>
						LCD_vsend_char(tries+48);
     e34:	80 2f       	mov	r24, r16
     e36:	81 5d       	subi	r24, 0xD1	; 209
     e38:	0e 94 0a 04 	call	0x814	; 0x814 <LCD_vsend_char>
     e3c:	8f ef       	ldi	r24, 0xFF	; 255
     e3e:	99 e6       	ldi	r25, 0x69	; 105
     e40:	a8 e1       	ldi	r26, 0x18	; 24
     e42:	81 50       	subi	r24, 0x01	; 1
     e44:	90 40       	sbci	r25, 0x00	; 0
     e46:	a0 40       	sbci	r26, 0x00	; 0
     e48:	e1 f7       	brne	.-8      	; 0xe42 <main+0x5a4>
     e4a:	00 c0       	rjmp	.+0      	; 0xe4c <main+0x5ae>
     e4c:	00 00       	nop
						_delay_ms(1000);
						LCD_vclearscreen();
     e4e:	0e 94 25 04 	call	0x84a	; 0x84a <LCD_vclearscreen>
					mode=1;// indicate to user in '0' Admin Mode
					flag=1;
				}
				else//in case of wrong password
				{
					tries=tries-1;    // decrease no of tries by 1 and then check
     e52:	0c 2f       	mov	r16, r28
     e54:	40 ce       	rjmp	.-896    	; 0xad6 <main+0x238>
						_delay_ms(1000);
						LCD_vclearscreen();
					}
					else
					{
						LCD_vclearscreen();
     e56:	0e 94 25 04 	call	0x84a	; 0x84a <LCD_vclearscreen>
						EEPROM_vwrite(EEPROM_LOGIN_BLOCKED_LOCATION,0x00); //Need To active Block Mode for 20 Sec
     e5a:	80 e3       	ldi	r24, 0x30	; 48
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	60 e0       	ldi	r22, 0x00	; 0
     e60:	0e 94 f5 02 	call	0x5ea	; 0x5ea <EEPROM_vwrite>
					mode=1;// indicate to user in '0' Admin Mode
					flag=1;
				}
				else//in case of wrong password
				{
					tries=tries-1;    // decrease no of tries by 1 and then check
     e64:	0c 2f       	mov	r16, r28
					}
					else
					{
						LCD_vclearscreen();
						EEPROM_vwrite(EEPROM_LOGIN_BLOCKED_LOCATION,0x00); //Need To active Block Mode for 20 Sec
						block_mode_flag=1;
     e66:	11 e0       	ldi	r17, 0x01	; 1
						break;//break the loop of admin login # while(flag==0) @ line 138
     e68:	36 ce       	rjmp	.-916    	; 0xad6 <main+0x238>
		{
			show_menu = 0;//Set the next menu to be shown to [[[main menu]]]
		}
		else//in case of admin is logged in
		{
			show_menu = 40;//Set the next menu to be shown to [[[more menu]]]
     e6a:	08 e2       	ldi	r16, 0x28	; 40
     e6c:	10 e0       	ldi	r17, 0x00	; 0
	
while(1)
{	
	
    value = NOTPRESSED;   //Set the key pressed by the user to its default value
	switch (show_menu)
     e6e:	08 32       	cpi	r16, 0x28	; 40
     e70:	11 05       	cpc	r17, r1
     e72:	09 f4       	brne	.+2      	; 0xe76 <main+0x5d8>
     e74:	ca c1       	rjmp	.+916    	; 0x120a <main+0x96c>
     e76:	09 32       	cpi	r16, 0x29	; 41
     e78:	11 05       	cpc	r17, r1
     e7a:	78 f4       	brcc	.+30     	; 0xe9a <main+0x5fc>
     e7c:	01 30       	cpi	r16, 0x01	; 1
     e7e:	11 05       	cpc	r17, r1
     e80:	09 f4       	brne	.+2      	; 0xe84 <main+0x5e6>
     e82:	7c c0       	rjmp	.+248    	; 0xf7c <main+0x6de>
     e84:	01 30       	cpi	r16, 0x01	; 1
     e86:	11 05       	cpc	r17, r1
     e88:	08 f1       	brcs	.+66     	; 0xecc <main+0x62e>
     e8a:	02 30       	cpi	r16, 0x02	; 2
     e8c:	11 05       	cpc	r17, r1
     e8e:	09 f4       	brne	.+2      	; 0xe92 <main+0x5f4>
     e90:	e2 c0       	rjmp	.+452    	; 0x1056 <main+0x7b8>
     e92:	03 30       	cpi	r16, 0x03	; 3
     e94:	11 05       	cpc	r17, r1
     e96:	59 f7       	brne	.-42     	; 0xe6e <main+0x5d0>
     e98:	4b c1       	rjmp	.+662    	; 0x1130 <main+0x892>
     e9a:	0b 32       	cpi	r16, 0x2B	; 43
     e9c:	11 05       	cpc	r17, r1
     e9e:	09 f4       	brne	.+2      	; 0xea2 <main+0x604>
     ea0:	ca c2       	rjmp	.+1428   	; 0x1436 <main+0xb98>
     ea2:	0c 32       	cpi	r16, 0x2C	; 44
     ea4:	11 05       	cpc	r17, r1
     ea6:	40 f4       	brcc	.+16     	; 0xeb8 <main+0x61a>
     ea8:	09 32       	cpi	r16, 0x29	; 41
     eaa:	11 05       	cpc	r17, r1
     eac:	09 f4       	brne	.+2      	; 0xeb0 <main+0x612>
     eae:	e7 c1       	rjmp	.+974    	; 0x127e <main+0x9e0>
     eb0:	0a 32       	cpi	r16, 0x2A	; 42
     eb2:	11 05       	cpc	r17, r1
     eb4:	e1 f6       	brne	.-72     	; 0xe6e <main+0x5d0>
     eb6:	52 c2       	rjmp	.+1188   	; 0x135c <main+0xabe>
     eb8:	91 e0       	ldi	r25, 0x01	; 1
     eba:	0f 3a       	cpi	r16, 0xAF	; 175
     ebc:	19 07       	cpc	r17, r25
     ebe:	09 f4       	brne	.+2      	; 0xec2 <main+0x624>
     ec0:	f3 c2       	rjmp	.+1510   	; 0x14a8 <main+0xc0a>
     ec2:	a1 e0       	ldi	r26, 0x01	; 1
     ec4:	00 3b       	cpi	r16, 0xB0	; 176
     ec6:	1a 07       	cpc	r17, r26
     ec8:	91 f6       	brne	.-92     	; 0xe6e <main+0x5d0>
     eca:	74 c3       	rjmp	.+1768   	; 0x15b4 <main+0xd16>
		case 0:
		do
		{
			/******************** print main Menu ******************/
			LCD_vclearscreen();
			LCD_vsend_string("1:Room1 2:Room2");
     ecc:	0f 2e       	mov	r0, r31
     ece:	fa e8       	ldi	r31, 0x8A	; 138
     ed0:	ef 2e       	mov	r14, r31
     ed2:	f1 e0       	ldi	r31, 0x01	; 1
     ed4:	ff 2e       	mov	r15, r31
     ed6:	f0 2d       	mov	r31, r0
			LCD_vmovecursor(2,1);
			if(mode==0)  //check login mode
			{
				LCD_vsend_string("3:Room3 4:More");//this menu options only printed if the logged in user as admin
     ed8:	0f 2e       	mov	r0, r31
     eda:	fa e9       	ldi	r31, 0x9A	; 154
     edc:	af 2e       	mov	r10, r31
     ede:	f1 e0       	ldi	r31, 0x01	; 1
     ee0:	bf 2e       	mov	r11, r31
     ee2:	f0 2d       	mov	r31, r0
			}
			else if(mode==1)//check login mode
			{
				LCD_vsend_string("3:Room3 4:Room4");//this menu options only printed if the logged in user as guest
     ee4:	0f 2e       	mov	r0, r31
     ee6:	f9 ea       	ldi	r31, 0xA9	; 169
     ee8:	8f 2e       	mov	r8, r31
     eea:	f1 e0       	ldi	r31, 0x01	; 1
     eec:	9f 2e       	mov	r9, r31
     eee:	f0 2d       	mov	r31, r0
	{
		case 0:
		do
		{
			/******************** print main Menu ******************/
			LCD_vclearscreen();
     ef0:	0e 94 25 04 	call	0x84a	; 0x84a <LCD_vclearscreen>
			LCD_vsend_string("1:Room1 2:Room2");
     ef4:	c7 01       	movw	r24, r14
     ef6:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_vsend_string>
			LCD_vmovecursor(2,1);
     efa:	82 e0       	ldi	r24, 0x02	; 2
     efc:	61 e0       	ldi	r22, 0x01	; 1
     efe:	0e 94 2f 04 	call	0x85e	; 0x85e <LCD_vmovecursor>
			if(mode==0)  //check login mode
     f02:	dd 23       	and	r29, r29
     f04:	21 f4       	brne	.+8      	; 0xf0e <main+0x670>
			{
				LCD_vsend_string("3:Room3 4:More");//this menu options only printed if the logged in user as admin
     f06:	c5 01       	movw	r24, r10
     f08:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_vsend_string>
     f0c:	05 c0       	rjmp	.+10     	; 0xf18 <main+0x67a>
			}
			else if(mode==1)//check login mode
     f0e:	d1 30       	cpi	r29, 0x01	; 1
     f10:	19 f4       	brne	.+6      	; 0xf18 <main+0x67a>
			{
				LCD_vsend_string("3:Room3 4:Room4");//this menu options only printed if the logged in user as guest
     f12:	c4 01       	movw	r24, r8
     f14:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_vsend_string>
			}
			/*******************************************************/
			value=NOTPRESSED;
			while( value == NOTPRESSED )    //repeat till the user press any key
			{ //wait for the user till key is pressed select from menu 
		    value=keypad_u8check_press();
     f18:	0e 94 3f 03 	call	0x67e	; 0x67e <keypad_u8check_press>
     f1c:	c8 2f       	mov	r28, r24
			{
				LCD_vsend_string("3:Room3 4:Room4");//this menu options only printed if the logged in user as guest
			}
			/*******************************************************/
			value=NOTPRESSED;
			while( value == NOTPRESSED )    //repeat till the user press any key
     f1e:	8f 3f       	cpi	r24, 0xFF	; 255
     f20:	d9 f3       	breq	.-10     	; 0xf18 <main+0x67a>
     f22:	2f ef       	ldi	r18, 0xFF	; 255
     f24:	30 e7       	ldi	r19, 0x70	; 112
     f26:	42 e0       	ldi	r20, 0x02	; 2
     f28:	21 50       	subi	r18, 0x01	; 1
     f2a:	30 40       	sbci	r19, 0x00	; 0
     f2c:	40 40       	sbci	r20, 0x00	; 0
     f2e:	e1 f7       	brne	.-8      	; 0xf28 <main+0x68a>
     f30:	00 c0       	rjmp	.+0      	; 0xf32 <main+0x694>
     f32:	00 00       	nop
				continue;	//return to the loop of login #	do  line 326
			}
	*/	
			
			
			if (value == '1')//If key pressed is 1 i.e. select room1
     f34:	81 33       	cpi	r24, 0x31	; 49
     f36:	09 f4       	brne	.+2      	; 0xf3a <main+0x69c>
     f38:	c5 c3       	rjmp	.+1930   	; 0x16c4 <main+0xe26>
			{
				show_menu = 1;//Set the next menu to be shown to room1 menu

			}
			else if (value == '2')//If key pressed is 2
     f3a:	82 33       	cpi	r24, 0x32	; 50
     f3c:	09 f4       	brne	.+2      	; 0xf40 <main+0x6a2>
     f3e:	c5 c3       	rjmp	.+1930   	; 0x16ca <main+0xe2c>
			{
				show_menu = 2;//Set the next menu to be shown to room2 menu
			}
			else if (value == '3')//If key pressed is 3
     f40:	83 33       	cpi	r24, 0x33	; 51
     f42:	09 f4       	brne	.+2      	; 0xf46 <main+0x6a8>
     f44:	c5 c3       	rjmp	.+1930   	; 0x16d0 <main+0xe32>
			{
				show_menu = 3;//Set the next menu to be shown to room3 menu
			}
			else if (value == '4' && mode == 1)//If key pressed is 4 and the logged in user is guest
     f46:	84 33       	cpi	r24, 0x34	; 52
     f48:	31 f4       	brne	.+12     	; 0xf56 <main+0x6b8>
     f4a:	d1 30       	cpi	r29, 0x01	; 1
     f4c:	09 f4       	brne	.+2      	; 0xf50 <main+0x6b2>
     f4e:	c3 c3       	rjmp	.+1926   	; 0x16d6 <main+0xe38>
			{
				show_menu = 41;//Set the next menu to be shown to [[[[ room4 menu]]]
			}
			else if (value == '4' && mode == 0)//If key pressed is 4 and the logged in user is admin
     f50:	dd 23       	and	r29, r29
     f52:	09 f4       	brne	.+2      	; 0xf56 <main+0x6b8>
     f54:	c3 c3       	rjmp	.+1926   	; 0x16dc <main+0xe3e>
			{
				show_menu = 40;//Set the next menu to be shown to [[[more menu]]]
			}
			else if(value != NOTPRESSED)//show wrong input message if the user pressed wrong key
			{
				LCD_vclearscreen();
     f56:	0e 94 25 04 	call	0x84a	; 0x84a <LCD_vclearscreen>
				LCD_vsend_string("Wrong input");//print error message
     f5a:	c6 01       	movw	r24, r12
     f5c:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_vsend_string>
     f60:	8f ef       	ldi	r24, 0xFF	; 255
     f62:	94 e3       	ldi	r25, 0x34	; 52
     f64:	ac e0       	ldi	r26, 0x0C	; 12
     f66:	81 50       	subi	r24, 0x01	; 1
     f68:	90 40       	sbci	r25, 0x00	; 0
     f6a:	a0 40       	sbci	r26, 0x00	; 0
     f6c:	e1 f7       	brne	.-8      	; 0xf66 <main+0x6c8>
     f6e:	00 c0       	rjmp	.+0      	; 0xf70 <main+0x6d2>
     f70:	00 00       	nop
				_delay_ms(500);//Halt the system for the given time in (ms)
			}
			
		} while ( (value < '1') || (value > '4')   );//break the loop in case of valid key or time is out
     f72:	c1 53       	subi	r28, 0x31	; 49
     f74:	c4 30       	cpi	r28, 0x04	; 4
     f76:	08 f0       	brcs	.+2      	; 0xf7a <main+0x6dc>
     f78:	bb cf       	rjmp	.-138    	; 0xef0 <main+0x652>
     f7a:	79 cf       	rjmp	.-270    	; 0xe6e <main+0x5d0>
				Status = ROOM1_STATUS;
				TurnOn = ROOM1_TURN_ON;
				TurnOff = ROOM1_TURN_OFF;
		
				LCD_vclearscreen();
				LCD_vsend_string("Room1 S:");
     f7c:	05 ec       	ldi	r16, 0xC5	; 197
     f7e:	11 e0       	ldi	r17, 0x01	; 1
				{
					LCD_vsend_string("ON");//print the status on
				}
				else//if the response from the slave was off status
				{
					LCD_vsend_string("OFF");//print the status off
     f80:	0f 2e       	mov	r0, r31
     f82:	f1 ed       	ldi	r31, 0xD1	; 209
     f84:	af 2e       	mov	r10, r31
     f86:	f1 e0       	ldi	r31, 0x01	; 1
     f88:	bf 2e       	mov	r11, r31
     f8a:	f0 2d       	mov	r31, r0
				receive = SPI_Receivechar(Master_ACK);//the master micro controller asks for the status
				
				
				if (receive== 1)//if the response from the slave was on status
				{
					LCD_vsend_string("ON");//print the status on
     f8c:	0f 2e       	mov	r0, r31
     f8e:	fe ec       	ldi	r31, 0xCE	; 206
     f90:	8f 2e       	mov	r8, r31
     f92:	f1 e0       	ldi	r31, 0x01	; 1
     f94:	9f 2e       	mov	r9, r31
     f96:	f0 2d       	mov	r31, r0
				else//if the response from the slave was off status
				{
					LCD_vsend_string("OFF");//print the status off
				}
				LCD_vmovecursor(2,1);//move the cursor to the start of the second line
				LCD_vsend_string("1-On 2-Off 0-RET");//print the sub menu
     f98:	0f 2e       	mov	r0, r31
     f9a:	f5 ed       	ldi	r31, 0xD5	; 213
     f9c:	ef 2e       	mov	r14, r31
     f9e:	f1 e0       	ldi	r31, 0x01	; 1
     fa0:	ff 2e       	mov	r15, r31
     fa2:	f0 2d       	mov	r31, r0
		do{
				Status = ROOM1_STATUS;
				TurnOn = ROOM1_TURN_ON;
				TurnOff = ROOM1_TURN_OFF;
		
				LCD_vclearscreen();
     fa4:	0e 94 25 04 	call	0x84a	; 0x84a <LCD_vclearscreen>
				LCD_vsend_string("Room1 S:");
     fa8:	c8 01       	movw	r24, r16
     faa:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_vsend_string>
				SPI_Transmitchar(Status);//demand the status from the slave
     fae:	81 e1       	ldi	r24, 0x11	; 17
     fb0:	0e 94 b4 0b 	call	0x1768	; 0x1768 <SPI_Transmitchar>
     fb4:	2f ef       	ldi	r18, 0xFF	; 255
     fb6:	30 e7       	ldi	r19, 0x70	; 112
     fb8:	42 e0       	ldi	r20, 0x02	; 2
     fba:	21 50       	subi	r18, 0x01	; 1
     fbc:	30 40       	sbci	r19, 0x00	; 0
     fbe:	40 40       	sbci	r20, 0x00	; 0
     fc0:	e1 f7       	brne	.-8      	; 0xfba <main+0x71c>
     fc2:	00 c0       	rjmp	.+0      	; 0xfc4 <main+0x726>
     fc4:	00 00       	nop
				_delay_ms(100);//Halt the system for the given time in (ms)
				receive = SPI_Receivechar(Master_ACK);//the master micro controller asks for the status
     fc6:	8f ef       	ldi	r24, 0xFF	; 255
     fc8:	0e 94 c1 0b 	call	0x1782	; 0x1782 <SPI_Receivechar>
				
				
				if (receive== 1)//if the response from the slave was on status
     fcc:	81 30       	cpi	r24, 0x01	; 1
     fce:	21 f4       	brne	.+8      	; 0xfd8 <main+0x73a>
				{
					LCD_vsend_string("ON");//print the status on
     fd0:	c4 01       	movw	r24, r8
     fd2:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_vsend_string>
     fd6:	03 c0       	rjmp	.+6      	; 0xfde <main+0x740>
				}
				else//if the response from the slave was off status
				{
					LCD_vsend_string("OFF");//print the status off
     fd8:	c5 01       	movw	r24, r10
     fda:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_vsend_string>
				}
				LCD_vmovecursor(2,1);//move the cursor to the start of the second line
     fde:	82 e0       	ldi	r24, 0x02	; 2
     fe0:	61 e0       	ldi	r22, 0x01	; 1
     fe2:	0e 94 2f 04 	call	0x85e	; 0x85e <LCD_vmovecursor>
				LCD_vsend_string("1-On 2-Off 0-RET");//print the sub menu
     fe6:	c7 01       	movw	r24, r14
     fe8:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_vsend_string>
				
								
				value=NOTPRESSED;
				while( value == NOTPRESSED )    //repeat till the user press any key
				{ //wait for the user till key is pressed select from menu
					value=keypad_u8check_press();
     fec:	0e 94 3f 03 	call	0x67e	; 0x67e <keypad_u8check_press>
     ff0:	c8 2f       	mov	r28, r24
				LCD_vmovecursor(2,1);//move the cursor to the start of the second line
				LCD_vsend_string("1-On 2-Off 0-RET");//print the sub menu
				
								
				value=NOTPRESSED;
				while( value == NOTPRESSED )    //repeat till the user press any key
     ff2:	8f 3f       	cpi	r24, 0xFF	; 255
     ff4:	d9 f3       	breq	.-10     	; 0xfec <main+0x74e>
     ff6:	8f ef       	ldi	r24, 0xFF	; 255
     ff8:	90 e7       	ldi	r25, 0x70	; 112
     ffa:	a2 e0       	ldi	r26, 0x02	; 2
     ffc:	81 50       	subi	r24, 0x01	; 1
     ffe:	90 40       	sbci	r25, 0x00	; 0
    1000:	a0 40       	sbci	r26, 0x00	; 0
    1002:	e1 f7       	brne	.-8      	; 0xffc <main+0x75e>
    1004:	00 c0       	rjmp	.+0      	; 0x1006 <main+0x768>
    1006:	00 00       	nop
				
				
				/*there is no need to take any action in case of the user pressed 0(RET) key
				breaking the loop will be enough since it will be handled in the main*/
					
				if (value == '1')
    1008:	c1 33       	cpi	r28, 0x31	; 49
    100a:	21 f4       	brne	.+8      	; 0x1014 <main+0x776>
				{
					SPI_Transmitchar(TurnOn);//Send turn on signal from master to slave
    100c:	81 e2       	ldi	r24, 0x21	; 33
    100e:	0e 94 b4 0b 	call	0x1768	; 0x1768 <SPI_Transmitchar>
    1012:	67 c3       	rjmp	.+1742   	; 0x16e2 <main+0xe44>
				}
				else if (value == '2')
    1014:	c2 33       	cpi	r28, 0x32	; 50
    1016:	21 f4       	brne	.+8      	; 0x1020 <main+0x782>
				{
					SPI_Transmitchar(TurnOff);//Send turn off signal from master to slave
    1018:	81 e3       	ldi	r24, 0x31	; 49
    101a:	0e 94 b4 0b 	call	0x1768	; 0x1768 <SPI_Transmitchar>
    101e:	61 c3       	rjmp	.+1730   	; 0x16e2 <main+0xe44>
				}
		    	else if( (value != NOTPRESSED) && (value != '0') )//show wrong input message if the user entered non numeric value
    1020:	cf 3f       	cpi	r28, 0xFF	; 255
    1022:	09 f4       	brne	.+2      	; 0x1026 <main+0x788>
    1024:	bf cf       	rjmp	.-130    	; 0xfa4 <main+0x706>
    1026:	c0 33       	cpi	r28, 0x30	; 48
    1028:	09 f4       	brne	.+2      	; 0x102c <main+0x78e>
    102a:	5b c3       	rjmp	.+1718   	; 0x16e2 <main+0xe44>
				{
					LCD_vclearscreen();
    102c:	0e 94 25 04 	call	0x84a	; 0x84a <LCD_vclearscreen>
					LCD_vsend_string("Wrong input");//print error message
    1030:	c6 01       	movw	r24, r12
    1032:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_vsend_string>
    1036:	2f ef       	ldi	r18, 0xFF	; 255
    1038:	34 e3       	ldi	r19, 0x34	; 52
    103a:	4c e0       	ldi	r20, 0x0C	; 12
    103c:	21 50       	subi	r18, 0x01	; 1
    103e:	30 40       	sbci	r19, 0x00	; 0
    1040:	40 40       	sbci	r20, 0x00	; 0
    1042:	e1 f7       	brne	.-8      	; 0x103c <main+0x79e>
    1044:	00 c0       	rjmp	.+0      	; 0x1046 <main+0x7a8>
    1046:	00 00       	nop
					_delay_ms(500);//Halt the system for the given time in (ms)
				}
			//show_menu=0;	
		}while( (value < '0') || (value > '2')  );//break the loop in case of valid key or time is out	
    1048:	c0 53       	subi	r28, 0x30	; 48
    104a:	c3 30       	cpi	r28, 0x03	; 3
    104c:	08 f0       	brcs	.+2      	; 0x1050 <main+0x7b2>
    104e:	aa cf       	rjmp	.-172    	; 0xfa4 <main+0x706>
		show_menu=0;
    1050:	00 e0       	ldi	r16, 0x00	; 0
    1052:	10 e0       	ldi	r17, 0x00	; 0
    1054:	0c cf       	rjmp	.-488    	; 0xe6e <main+0x5d0>
				Status = ROOM2_STATUS;
				TurnOn = ROOM2_TURN_ON;
				TurnOff = ROOM2_TURN_OFF;
		
				LCD_vclearscreen();
				LCD_vsend_string("Room2 S:");
    1056:	06 ee       	ldi	r16, 0xE6	; 230
    1058:	11 e0       	ldi	r17, 0x01	; 1
				{
					LCD_vsend_string("ON");//print the current status on
				}
				else//if the response from the slave was off status
				{
					LCD_vsend_string("OFF");//print the current status off
    105a:	0f 2e       	mov	r0, r31
    105c:	f1 ed       	ldi	r31, 0xD1	; 209
    105e:	af 2e       	mov	r10, r31
    1060:	f1 e0       	ldi	r31, 0x01	; 1
    1062:	bf 2e       	mov	r11, r31
    1064:	f0 2d       	mov	r31, r0
				receive = SPI_Receivechar(Master_ACK);//the master micro controller asks for the status
				
				
				if (receive== 1)//if the response from the slave was on status
				{
					LCD_vsend_string("ON");//print the current status on
    1066:	0f 2e       	mov	r0, r31
    1068:	fe ec       	ldi	r31, 0xCE	; 206
    106a:	8f 2e       	mov	r8, r31
    106c:	f1 e0       	ldi	r31, 0x01	; 1
    106e:	9f 2e       	mov	r9, r31
    1070:	f0 2d       	mov	r31, r0
				else//if the response from the slave was off status
				{
					LCD_vsend_string("OFF");//print the current status off
				}
				LCD_vmovecursor(2,1);//move the cursor to the start of the second line
				LCD_vsend_string("1-On 2-Off 0-RET");//print the sub menu
    1072:	0f 2e       	mov	r0, r31
    1074:	f5 ed       	ldi	r31, 0xD5	; 213
    1076:	ef 2e       	mov	r14, r31
    1078:	f1 e0       	ldi	r31, 0x01	; 1
    107a:	ff 2e       	mov	r15, r31
    107c:	f0 2d       	mov	r31, r0
		do{
				Status = ROOM2_STATUS;
				TurnOn = ROOM2_TURN_ON;
				TurnOff = ROOM2_TURN_OFF;
		
				LCD_vclearscreen();
    107e:	0e 94 25 04 	call	0x84a	; 0x84a <LCD_vclearscreen>
				LCD_vsend_string("Room2 S:");
    1082:	c8 01       	movw	r24, r16
    1084:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_vsend_string>
				SPI_Transmitchar(Status);//demand the status from the slave
    1088:	82 e1       	ldi	r24, 0x12	; 18
    108a:	0e 94 b4 0b 	call	0x1768	; 0x1768 <SPI_Transmitchar>
    108e:	8f ef       	ldi	r24, 0xFF	; 255
    1090:	90 e7       	ldi	r25, 0x70	; 112
    1092:	a2 e0       	ldi	r26, 0x02	; 2
    1094:	81 50       	subi	r24, 0x01	; 1
    1096:	90 40       	sbci	r25, 0x00	; 0
    1098:	a0 40       	sbci	r26, 0x00	; 0
    109a:	e1 f7       	brne	.-8      	; 0x1094 <main+0x7f6>
    109c:	00 c0       	rjmp	.+0      	; 0x109e <main+0x800>
    109e:	00 00       	nop
				_delay_ms(100);//Halt the system for the given time in (ms)
				receive = SPI_Receivechar(Master_ACK);//the master micro controller asks for the status
    10a0:	8f ef       	ldi	r24, 0xFF	; 255
    10a2:	0e 94 c1 0b 	call	0x1782	; 0x1782 <SPI_Receivechar>
				
				
				if (receive== 1)//if the response from the slave was on status
    10a6:	81 30       	cpi	r24, 0x01	; 1
    10a8:	21 f4       	brne	.+8      	; 0x10b2 <main+0x814>
				{
					LCD_vsend_string("ON");//print the current status on
    10aa:	c4 01       	movw	r24, r8
    10ac:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_vsend_string>
    10b0:	03 c0       	rjmp	.+6      	; 0x10b8 <main+0x81a>
				}
				else//if the response from the slave was off status
				{
					LCD_vsend_string("OFF");//print the current status off
    10b2:	c5 01       	movw	r24, r10
    10b4:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_vsend_string>
				}
				LCD_vmovecursor(2,1);//move the cursor to the start of the second line
    10b8:	82 e0       	ldi	r24, 0x02	; 2
    10ba:	61 e0       	ldi	r22, 0x01	; 1
    10bc:	0e 94 2f 04 	call	0x85e	; 0x85e <LCD_vmovecursor>
				LCD_vsend_string("1-On 2-Off 0-RET");//print the sub menu
    10c0:	c7 01       	movw	r24, r14
    10c2:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_vsend_string>
				
								
				value=NOTPRESSED;
				while( value == NOTPRESSED )    //repeat till the user press any key
				{ //wait for the user till key is pressed select from menu
					value=keypad_u8check_press();
    10c6:	0e 94 3f 03 	call	0x67e	; 0x67e <keypad_u8check_press>
    10ca:	c8 2f       	mov	r28, r24
				LCD_vmovecursor(2,1);//move the cursor to the start of the second line
				LCD_vsend_string("1-On 2-Off 0-RET");//print the sub menu
				
								
				value=NOTPRESSED;
				while( value == NOTPRESSED )    //repeat till the user press any key
    10cc:	8f 3f       	cpi	r24, 0xFF	; 255
    10ce:	d9 f3       	breq	.-10     	; 0x10c6 <main+0x828>
    10d0:	2f ef       	ldi	r18, 0xFF	; 255
    10d2:	30 e7       	ldi	r19, 0x70	; 112
    10d4:	42 e0       	ldi	r20, 0x02	; 2
    10d6:	21 50       	subi	r18, 0x01	; 1
    10d8:	30 40       	sbci	r19, 0x00	; 0
    10da:	40 40       	sbci	r20, 0x00	; 0
    10dc:	e1 f7       	brne	.-8      	; 0x10d6 <main+0x838>
    10de:	00 c0       	rjmp	.+0      	; 0x10e0 <main+0x842>
    10e0:	00 00       	nop
				
				
				/*there is no need to take any action in case of the user pressed 0(RET) key
				breaking the loop will be enough since it will be handled in the main*/
					
				if (value == '1')
    10e2:	81 33       	cpi	r24, 0x31	; 49
    10e4:	21 f4       	brne	.+8      	; 0x10ee <main+0x850>
				{
					SPI_Transmitchar(TurnOn);//Send turn on signal from master to slave
    10e6:	82 e2       	ldi	r24, 0x22	; 34
    10e8:	0e 94 b4 0b 	call	0x1768	; 0x1768 <SPI_Transmitchar>
    10ec:	fd c2       	rjmp	.+1530   	; 0x16e8 <main+0xe4a>
				}
				else if (value == '2')
    10ee:	82 33       	cpi	r24, 0x32	; 50
    10f0:	21 f4       	brne	.+8      	; 0x10fa <main+0x85c>
				{
					SPI_Transmitchar(TurnOff);//Send turn off signal from master to slave
    10f2:	82 e3       	ldi	r24, 0x32	; 50
    10f4:	0e 94 b4 0b 	call	0x1768	; 0x1768 <SPI_Transmitchar>
    10f8:	f7 c2       	rjmp	.+1518   	; 0x16e8 <main+0xe4a>
				}
		    	else if( (value != NOTPRESSED) && (value != '0') )//show wrong input message if the user entered non numeric value
    10fa:	8f 3f       	cpi	r24, 0xFF	; 255
    10fc:	09 f4       	brne	.+2      	; 0x1100 <main+0x862>
    10fe:	bf cf       	rjmp	.-130    	; 0x107e <main+0x7e0>
    1100:	80 33       	cpi	r24, 0x30	; 48
    1102:	09 f4       	brne	.+2      	; 0x1106 <main+0x868>
    1104:	f1 c2       	rjmp	.+1506   	; 0x16e8 <main+0xe4a>
				{
					LCD_vclearscreen();
    1106:	0e 94 25 04 	call	0x84a	; 0x84a <LCD_vclearscreen>
					LCD_vsend_string("Wrong input");//print error message
    110a:	c6 01       	movw	r24, r12
    110c:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_vsend_string>
    1110:	8f ef       	ldi	r24, 0xFF	; 255
    1112:	94 e3       	ldi	r25, 0x34	; 52
    1114:	ac e0       	ldi	r26, 0x0C	; 12
    1116:	81 50       	subi	r24, 0x01	; 1
    1118:	90 40       	sbci	r25, 0x00	; 0
    111a:	a0 40       	sbci	r26, 0x00	; 0
    111c:	e1 f7       	brne	.-8      	; 0x1116 <main+0x878>
    111e:	00 c0       	rjmp	.+0      	; 0x1120 <main+0x882>
    1120:	00 00       	nop
					_delay_ms(500);//Halt the system for the given time in (ms)
				}
			//show_menu=0;	
		}while( (value < '0') || (value > '2')  );//break the loop in case of valid key or time is out	
    1122:	c0 53       	subi	r28, 0x30	; 48
    1124:	c3 30       	cpi	r28, 0x03	; 3
    1126:	08 f0       	brcs	.+2      	; 0x112a <main+0x88c>
    1128:	aa cf       	rjmp	.-172    	; 0x107e <main+0x7e0>
		show_menu=0;
    112a:	00 e0       	ldi	r16, 0x00	; 0
    112c:	10 e0       	ldi	r17, 0x00	; 0
    112e:	9f ce       	rjmp	.-706    	; 0xe6e <main+0x5d0>
				Status = ROOM3_STATUS;
				TurnOn = ROOM3_TURN_ON;
				TurnOff = ROOM3_TURN_OFF;
		
				LCD_vclearscreen();
				LCD_vsend_string("Room3 S:");
    1130:	0f ee       	ldi	r16, 0xEF	; 239
    1132:	11 e0       	ldi	r17, 0x01	; 1
				{
					LCD_vsend_string("ON");//print the status on
				}
				else//if the response from the slave was off status
				{
					LCD_vsend_string("OFF");//print the status off
    1134:	0f 2e       	mov	r0, r31
    1136:	f1 ed       	ldi	r31, 0xD1	; 209
    1138:	af 2e       	mov	r10, r31
    113a:	f1 e0       	ldi	r31, 0x01	; 1
    113c:	bf 2e       	mov	r11, r31
    113e:	f0 2d       	mov	r31, r0
				receive = SPI_Receivechar(Master_ACK);//the master micro controller asks for the status
				
				
				if (receive== 1)//if the response from the slave was on status
				{
					LCD_vsend_string("ON");//print the status on
    1140:	0f 2e       	mov	r0, r31
    1142:	fe ec       	ldi	r31, 0xCE	; 206
    1144:	8f 2e       	mov	r8, r31
    1146:	f1 e0       	ldi	r31, 0x01	; 1
    1148:	9f 2e       	mov	r9, r31
    114a:	f0 2d       	mov	r31, r0
				else//if the response from the slave was off status
				{
					LCD_vsend_string("OFF");//print the status off
				}
				LCD_vmovecursor(2,1);//move the cursor to the start of the second line
				LCD_vsend_string("1-On 2-Off 0-RET");//print the sub menu
    114c:	0f 2e       	mov	r0, r31
    114e:	f5 ed       	ldi	r31, 0xD5	; 213
    1150:	ef 2e       	mov	r14, r31
    1152:	f1 e0       	ldi	r31, 0x01	; 1
    1154:	ff 2e       	mov	r15, r31
    1156:	f0 2d       	mov	r31, r0
		do{
				Status = ROOM3_STATUS;
				TurnOn = ROOM3_TURN_ON;
				TurnOff = ROOM3_TURN_OFF;
		
				LCD_vclearscreen();
    1158:	0e 94 25 04 	call	0x84a	; 0x84a <LCD_vclearscreen>
				LCD_vsend_string("Room3 S:");
    115c:	c8 01       	movw	r24, r16
    115e:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_vsend_string>
				SPI_Transmitchar(Status);//demand the status from the slave
    1162:	83 e1       	ldi	r24, 0x13	; 19
    1164:	0e 94 b4 0b 	call	0x1768	; 0x1768 <SPI_Transmitchar>
    1168:	2f ef       	ldi	r18, 0xFF	; 255
    116a:	30 e7       	ldi	r19, 0x70	; 112
    116c:	42 e0       	ldi	r20, 0x02	; 2
    116e:	21 50       	subi	r18, 0x01	; 1
    1170:	30 40       	sbci	r19, 0x00	; 0
    1172:	40 40       	sbci	r20, 0x00	; 0
    1174:	e1 f7       	brne	.-8      	; 0x116e <main+0x8d0>
    1176:	00 c0       	rjmp	.+0      	; 0x1178 <main+0x8da>
    1178:	00 00       	nop
				_delay_ms(100);//Halt the system for the given time in (ms)
				receive = SPI_Receivechar(Master_ACK);//the master micro controller asks for the status
    117a:	8f ef       	ldi	r24, 0xFF	; 255
    117c:	0e 94 c1 0b 	call	0x1782	; 0x1782 <SPI_Receivechar>
				
				
				if (receive== 1)//if the response from the slave was on status
    1180:	81 30       	cpi	r24, 0x01	; 1
    1182:	21 f4       	brne	.+8      	; 0x118c <main+0x8ee>
				{
					LCD_vsend_string("ON");//print the status on
    1184:	c4 01       	movw	r24, r8
    1186:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_vsend_string>
    118a:	03 c0       	rjmp	.+6      	; 0x1192 <main+0x8f4>
				}
				else//if the response from the slave was off status
				{
					LCD_vsend_string("OFF");//print the status off
    118c:	c5 01       	movw	r24, r10
    118e:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_vsend_string>
				}
				LCD_vmovecursor(2,1);//move the cursor to the start of the second line
    1192:	82 e0       	ldi	r24, 0x02	; 2
    1194:	61 e0       	ldi	r22, 0x01	; 1
    1196:	0e 94 2f 04 	call	0x85e	; 0x85e <LCD_vmovecursor>
				LCD_vsend_string("1-On 2-Off 0-RET");//print the sub menu
    119a:	c7 01       	movw	r24, r14
    119c:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_vsend_string>
				
								
				value=NOTPRESSED;
				while( value == NOTPRESSED )    //repeat till the user press any key
				{ //wait for the user till key is pressed select from menu
					value=keypad_u8check_press();
    11a0:	0e 94 3f 03 	call	0x67e	; 0x67e <keypad_u8check_press>
    11a4:	c8 2f       	mov	r28, r24
				LCD_vmovecursor(2,1);//move the cursor to the start of the second line
				LCD_vsend_string("1-On 2-Off 0-RET");//print the sub menu
				
								
				value=NOTPRESSED;
				while( value == NOTPRESSED )    //repeat till the user press any key
    11a6:	8f 3f       	cpi	r24, 0xFF	; 255
    11a8:	d9 f3       	breq	.-10     	; 0x11a0 <main+0x902>
    11aa:	8f ef       	ldi	r24, 0xFF	; 255
    11ac:	90 e7       	ldi	r25, 0x70	; 112
    11ae:	a2 e0       	ldi	r26, 0x02	; 2
    11b0:	81 50       	subi	r24, 0x01	; 1
    11b2:	90 40       	sbci	r25, 0x00	; 0
    11b4:	a0 40       	sbci	r26, 0x00	; 0
    11b6:	e1 f7       	brne	.-8      	; 0x11b0 <main+0x912>
    11b8:	00 c0       	rjmp	.+0      	; 0x11ba <main+0x91c>
    11ba:	00 00       	nop
				
				
				/*there is no need to take any action in case of the user pressed 0(RET) key
				breaking the loop will be enough since it will be handled in the main*/
					
				if (value == '1')
    11bc:	c1 33       	cpi	r28, 0x31	; 49
    11be:	21 f4       	brne	.+8      	; 0x11c8 <main+0x92a>
				{
					SPI_Transmitchar(TurnOn);//Send turn on signal from master to slave
    11c0:	83 e2       	ldi	r24, 0x23	; 35
    11c2:	0e 94 b4 0b 	call	0x1768	; 0x1768 <SPI_Transmitchar>
    11c6:	93 c2       	rjmp	.+1318   	; 0x16ee <main+0xe50>
				}
				else if (value == '2')
    11c8:	c2 33       	cpi	r28, 0x32	; 50
    11ca:	21 f4       	brne	.+8      	; 0x11d4 <main+0x936>
				{
					SPI_Transmitchar(TurnOff);//Send turn off signal from master to slave
    11cc:	83 e3       	ldi	r24, 0x33	; 51
    11ce:	0e 94 b4 0b 	call	0x1768	; 0x1768 <SPI_Transmitchar>
    11d2:	8d c2       	rjmp	.+1306   	; 0x16ee <main+0xe50>
				}
		    	else if( (value != NOTPRESSED) && (value != '0') )//show wrong input message if the user entered non numeric value
    11d4:	cf 3f       	cpi	r28, 0xFF	; 255
    11d6:	09 f4       	brne	.+2      	; 0x11da <main+0x93c>
    11d8:	bf cf       	rjmp	.-130    	; 0x1158 <main+0x8ba>
    11da:	c0 33       	cpi	r28, 0x30	; 48
    11dc:	09 f4       	brne	.+2      	; 0x11e0 <main+0x942>
    11de:	87 c2       	rjmp	.+1294   	; 0x16ee <main+0xe50>
				{
					LCD_vclearscreen();
    11e0:	0e 94 25 04 	call	0x84a	; 0x84a <LCD_vclearscreen>
					LCD_vsend_string("Wrong input");//print error message
    11e4:	c6 01       	movw	r24, r12
    11e6:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_vsend_string>
    11ea:	2f ef       	ldi	r18, 0xFF	; 255
    11ec:	34 e3       	ldi	r19, 0x34	; 52
    11ee:	4c e0       	ldi	r20, 0x0C	; 12
    11f0:	21 50       	subi	r18, 0x01	; 1
    11f2:	30 40       	sbci	r19, 0x00	; 0
    11f4:	40 40       	sbci	r20, 0x00	; 0
    11f6:	e1 f7       	brne	.-8      	; 0x11f0 <main+0x952>
    11f8:	00 c0       	rjmp	.+0      	; 0x11fa <main+0x95c>
    11fa:	00 00       	nop
					_delay_ms(500);//Halt the system for the given time in (ms)
				}
			//show_menu=0;	
		}while( (value < '0') || (value > '2')  );//break the loop in case of valid key or time is out	
    11fc:	c0 53       	subi	r28, 0x30	; 48
    11fe:	c3 30       	cpi	r28, 0x03	; 3
    1200:	08 f0       	brcs	.+2      	; 0x1204 <main+0x966>
    1202:	aa cf       	rjmp	.-172    	; 0x1158 <main+0x8ba>
		show_menu=0;
    1204:	00 e0       	ldi	r16, 0x00	; 0
    1206:	10 e0       	ldi	r17, 0x00	; 0
    1208:	32 ce       	rjmp	.-924    	; 0xe6e <main+0x5d0>
		/************************************************************************/
		
		case 40:// pressed 4 to select 4-more menu
		do{
				/******************** print more Menu ******************/
				LCD_vclearscreen();
    120a:	0e 94 25 04 	call	0x84a	; 0x84a <LCD_vclearscreen>
				LCD_vsend_string("1:Room4    2:TV   ");
    120e:	c2 01       	movw	r24, r4
    1210:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_vsend_string>
				LCD_vmovecursor(2,1);
    1214:	82 e0       	ldi	r24, 0x02	; 2
    1216:	61 e0       	ldi	r22, 0x01	; 1
    1218:	0e 94 2f 04 	call	0x85e	; 0x85e <LCD_vmovecursor>
				LCD_vsend_string("3:AirCond .4:RET");
    121c:	c1 01       	movw	r24, r2
    121e:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_vsend_string>
				/*******************************************************/
		
				value=NOTPRESSED;
				while( value == NOTPRESSED )    //repeat till the user press any key
				{ //wait for the user till key is pressed select from menu
					value=keypad_u8check_press();
    1222:	0e 94 3f 03 	call	0x67e	; 0x67e <keypad_u8check_press>
    1226:	c8 2f       	mov	r28, r24
				LCD_vmovecursor(2,1);
				LCD_vsend_string("3:AirCond .4:RET");
				/*******************************************************/
		
				value=NOTPRESSED;
				while( value == NOTPRESSED )    //repeat till the user press any key
    1228:	8f 3f       	cpi	r24, 0xFF	; 255
    122a:	d9 f3       	breq	.-10     	; 0x1222 <main+0x984>
    122c:	8f ef       	ldi	r24, 0xFF	; 255
    122e:	90 e7       	ldi	r25, 0x70	; 112
    1230:	a2 e0       	ldi	r26, 0x02	; 2
    1232:	81 50       	subi	r24, 0x01	; 1
    1234:	90 40       	sbci	r25, 0x00	; 0
    1236:	a0 40       	sbci	r26, 0x00	; 0
    1238:	e1 f7       	brne	.-8      	; 0x1232 <main+0x994>
    123a:	00 c0       	rjmp	.+0      	; 0x123c <main+0x99e>
    123c:	00 00       	nop
				{ //wait for the user till key is pressed select from menu
					value=keypad_u8check_press();
				}
				_delay_ms(100);//to avoid the duplication of the pressed key
				
				if (value == '1')//If key pressed is 1 - Set the next menu to be shown to room4 menu
    123e:	c1 33       	cpi	r28, 0x31	; 49
    1240:	09 f4       	brne	.+2      	; 0x1244 <main+0x9a6>
    1242:	58 c2       	rjmp	.+1200   	; 0x16f4 <main+0xe56>
				{
					show_menu = 41;//Set the next menu to be shown to [[[room4 menu]]]
				}
				else if (value == '2')//If key pressed is 2- Set the next menu to be shown to TV menu
    1244:	c2 33       	cpi	r28, 0x32	; 50
    1246:	09 f4       	brne	.+2      	; 0x124a <main+0x9ac>
    1248:	58 c2       	rjmp	.+1200   	; 0x16fa <main+0xe5c>
				{
					show_menu = 42;//Set the next menu to be shown to [[[TV menu]]]
				}
				else if (value == '3')//If key pressed is 3
    124a:	c3 33       	cpi	r28, 0x33	; 51
    124c:	09 f4       	brne	.+2      	; 0x1250 <main+0x9b2>
    124e:	58 c2       	rjmp	.+1200   	; 0x1700 <main+0xe62>
				{
					show_menu = 43;//Set the next menu to be shown to [[[Air conditioning menu]]]
				}
				else if (value == '4')//If key pressed is 4 (RET)
    1250:	c4 33       	cpi	r28, 0x34	; 52
    1252:	09 f4       	brne	.+2      	; 0x1256 <main+0x9b8>
    1254:	58 c2       	rjmp	.+1200   	; 0x1706 <main+0xe68>
				{
					show_menu = 0;//Set the next menu to be shown to [[[main menu]]]
				}
				else if(value != NOTPRESSED)//show wrong input message if the user pressed wrong key
    1256:	cf 3f       	cpi	r28, 0xFF	; 255
    1258:	c1 f2       	breq	.-80     	; 0x120a <main+0x96c>
				{
					LCD_vclearscreen();
    125a:	0e 94 25 04 	call	0x84a	; 0x84a <LCD_vclearscreen>
					LCD_vsend_string("Wrong input");//print error message
    125e:	c6 01       	movw	r24, r12
    1260:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_vsend_string>
    1264:	2f ef       	ldi	r18, 0xFF	; 255
    1266:	34 e3       	ldi	r19, 0x34	; 52
    1268:	4c e0       	ldi	r20, 0x0C	; 12
    126a:	21 50       	subi	r18, 0x01	; 1
    126c:	30 40       	sbci	r19, 0x00	; 0
    126e:	40 40       	sbci	r20, 0x00	; 0
    1270:	e1 f7       	brne	.-8      	; 0x126a <main+0x9cc>
    1272:	00 c0       	rjmp	.+0      	; 0x1274 <main+0x9d6>
    1274:	00 00       	nop
					_delay_ms(500);//Halt the system for the given time in (ms)
				}
			} while ( (value < '1') || (value > '4') );//break the loop in case of valid key or time is out
    1276:	c1 53       	subi	r28, 0x31	; 49
    1278:	c4 30       	cpi	r28, 0x04	; 4
    127a:	38 f6       	brcc	.-114    	; 0x120a <main+0x96c>
    127c:	f8 cd       	rjmp	.-1040   	; 0xe6e <main+0x5d0>
				Status = ROOM4_STATUS;
				TurnOn = ROOM4_TURN_ON;
				TurnOff = ROOM4_TURN_OFF;
		
				LCD_vclearscreen();
				LCD_vsend_string("Room4 S:");
    127e:	0c e1       	ldi	r16, 0x1C	; 28
    1280:	12 e0       	ldi	r17, 0x02	; 2
				{
					LCD_vsend_string("ON");//print the status on
				}
				else//if the response from the slave was off status
				{
					LCD_vsend_string("OFF");//print the status off
    1282:	0f 2e       	mov	r0, r31
    1284:	f1 ed       	ldi	r31, 0xD1	; 209
    1286:	af 2e       	mov	r10, r31
    1288:	f1 e0       	ldi	r31, 0x01	; 1
    128a:	bf 2e       	mov	r11, r31
    128c:	f0 2d       	mov	r31, r0
				receive = SPI_Receivechar(Master_ACK);//the master micro controller asks for the status
				
				
				if (receive== 1)//if the response from the slave was on status
				{
					LCD_vsend_string("ON");//print the status on
    128e:	0f 2e       	mov	r0, r31
    1290:	fe ec       	ldi	r31, 0xCE	; 206
    1292:	8f 2e       	mov	r8, r31
    1294:	f1 e0       	ldi	r31, 0x01	; 1
    1296:	9f 2e       	mov	r9, r31
    1298:	f0 2d       	mov	r31, r0
				else//if the response from the slave was off status
				{
					LCD_vsend_string("OFF");//print the status off
				}
				LCD_vmovecursor(2,1);//move the cursor to the start of the second line
				LCD_vsend_string("1-On 2-Off 0-RET");//print the sub menu
    129a:	0f 2e       	mov	r0, r31
    129c:	f5 ed       	ldi	r31, 0xD5	; 213
    129e:	ef 2e       	mov	r14, r31
    12a0:	f1 e0       	ldi	r31, 0x01	; 1
    12a2:	ff 2e       	mov	r15, r31
    12a4:	f0 2d       	mov	r31, r0
		do{
				Status = ROOM4_STATUS;
				TurnOn = ROOM4_TURN_ON;
				TurnOff = ROOM4_TURN_OFF;
		
				LCD_vclearscreen();
    12a6:	0e 94 25 04 	call	0x84a	; 0x84a <LCD_vclearscreen>
				LCD_vsend_string("Room4 S:");
    12aa:	c8 01       	movw	r24, r16
    12ac:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_vsend_string>
				SPI_Transmitchar(Status);//demand the status from the slave
    12b0:	84 e1       	ldi	r24, 0x14	; 20
    12b2:	0e 94 b4 0b 	call	0x1768	; 0x1768 <SPI_Transmitchar>
    12b6:	8f ef       	ldi	r24, 0xFF	; 255
    12b8:	90 e7       	ldi	r25, 0x70	; 112
    12ba:	a2 e0       	ldi	r26, 0x02	; 2
    12bc:	81 50       	subi	r24, 0x01	; 1
    12be:	90 40       	sbci	r25, 0x00	; 0
    12c0:	a0 40       	sbci	r26, 0x00	; 0
    12c2:	e1 f7       	brne	.-8      	; 0x12bc <main+0xa1e>
    12c4:	00 c0       	rjmp	.+0      	; 0x12c6 <main+0xa28>
    12c6:	00 00       	nop
				_delay_ms(100);//Halt the system for the given time in (ms)
				receive = SPI_Receivechar(Master_ACK);//the master micro controller asks for the status
    12c8:	8f ef       	ldi	r24, 0xFF	; 255
    12ca:	0e 94 c1 0b 	call	0x1782	; 0x1782 <SPI_Receivechar>
				
				
				if (receive== 1)//if the response from the slave was on status
    12ce:	81 30       	cpi	r24, 0x01	; 1
    12d0:	21 f4       	brne	.+8      	; 0x12da <main+0xa3c>
				{
					LCD_vsend_string("ON");//print the status on
    12d2:	c4 01       	movw	r24, r8
    12d4:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_vsend_string>
    12d8:	03 c0       	rjmp	.+6      	; 0x12e0 <main+0xa42>
				}
				else//if the response from the slave was off status
				{
					LCD_vsend_string("OFF");//print the status off
    12da:	c5 01       	movw	r24, r10
    12dc:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_vsend_string>
				}
				LCD_vmovecursor(2,1);//move the cursor to the start of the second line
    12e0:	82 e0       	ldi	r24, 0x02	; 2
    12e2:	61 e0       	ldi	r22, 0x01	; 1
    12e4:	0e 94 2f 04 	call	0x85e	; 0x85e <LCD_vmovecursor>
				LCD_vsend_string("1-On 2-Off 0-RET");//print the sub menu
    12e8:	c7 01       	movw	r24, r14
    12ea:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_vsend_string>
				
								
				value=NOTPRESSED;
				while( value == NOTPRESSED )    //repeat till the user press any key
				{ //wait for the user till key is pressed select from menu
					value=keypad_u8check_press();
    12ee:	0e 94 3f 03 	call	0x67e	; 0x67e <keypad_u8check_press>
    12f2:	c8 2f       	mov	r28, r24
				LCD_vmovecursor(2,1);//move the cursor to the start of the second line
				LCD_vsend_string("1-On 2-Off 0-RET");//print the sub menu
				
								
				value=NOTPRESSED;
				while( value == NOTPRESSED )    //repeat till the user press any key
    12f4:	8f 3f       	cpi	r24, 0xFF	; 255
    12f6:	d9 f3       	breq	.-10     	; 0x12ee <main+0xa50>
    12f8:	2f ef       	ldi	r18, 0xFF	; 255
    12fa:	30 e7       	ldi	r19, 0x70	; 112
    12fc:	42 e0       	ldi	r20, 0x02	; 2
    12fe:	21 50       	subi	r18, 0x01	; 1
    1300:	30 40       	sbci	r19, 0x00	; 0
    1302:	40 40       	sbci	r20, 0x00	; 0
    1304:	e1 f7       	brne	.-8      	; 0x12fe <main+0xa60>
    1306:	00 c0       	rjmp	.+0      	; 0x1308 <main+0xa6a>
    1308:	00 00       	nop
				
				
				/*there is no need to take any action in case of the user pressed 0(RET) key
				breaking the loop will be enough since it will be handled in the main*/
					
				if (value == '1')
    130a:	81 33       	cpi	r24, 0x31	; 49
    130c:	21 f4       	brne	.+8      	; 0x1316 <main+0xa78>
				{
					SPI_Transmitchar(TurnOn);//Send turn on signal from master to slave
    130e:	84 e2       	ldi	r24, 0x24	; 36
    1310:	0e 94 b4 0b 	call	0x1768	; 0x1768 <SPI_Transmitchar>
    1314:	1d c0       	rjmp	.+58     	; 0x1350 <main+0xab2>
				}
				else if (value == '2')
    1316:	82 33       	cpi	r24, 0x32	; 50
    1318:	21 f4       	brne	.+8      	; 0x1322 <main+0xa84>
				{
					SPI_Transmitchar(TurnOff);//Send turn off signal from master to slave
    131a:	84 e3       	ldi	r24, 0x34	; 52
    131c:	0e 94 b4 0b 	call	0x1768	; 0x1768 <SPI_Transmitchar>
    1320:	17 c0       	rjmp	.+46     	; 0x1350 <main+0xab2>
				}
		    	else if( (value != NOTPRESSED) && (value != '0') )//show wrong input message if the user entered non numeric value
    1322:	8f 3f       	cpi	r24, 0xFF	; 255
    1324:	09 f4       	brne	.+2      	; 0x1328 <main+0xa8a>
    1326:	bf cf       	rjmp	.-130    	; 0x12a6 <main+0xa08>
    1328:	80 33       	cpi	r24, 0x30	; 48
    132a:	91 f0       	breq	.+36     	; 0x1350 <main+0xab2>
				{
					LCD_vclearscreen(); 
    132c:	0e 94 25 04 	call	0x84a	; 0x84a <LCD_vclearscreen>
					LCD_vsend_string("Wrong input");//print error message
    1330:	c6 01       	movw	r24, r12
    1332:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_vsend_string>
    1336:	8f ef       	ldi	r24, 0xFF	; 255
    1338:	94 e3       	ldi	r25, 0x34	; 52
    133a:	ac e0       	ldi	r26, 0x0C	; 12
    133c:	81 50       	subi	r24, 0x01	; 1
    133e:	90 40       	sbci	r25, 0x00	; 0
    1340:	a0 40       	sbci	r26, 0x00	; 0
    1342:	e1 f7       	brne	.-8      	; 0x133c <main+0xa9e>
    1344:	00 c0       	rjmp	.+0      	; 0x1346 <main+0xaa8>
    1346:	00 00       	nop
					_delay_ms(500);//Halt the system for the given time in (ms)
				}
		}while( (value < '0') || (value > '2')  );//break the loop in case of valid key or time is out	
    1348:	c0 53       	subi	r28, 0x30	; 48
    134a:	c3 30       	cpi	r28, 0x03	; 3
    134c:	08 f0       	brcs	.+2      	; 0x1350 <main+0xab2>
    134e:	ab cf       	rjmp	.-170    	; 0x12a6 <main+0xa08>
		
		/***************************** select ROOM4 in witch mode  *******************************************/
		if (mode == 1)//in case of guest is logged in
    1350:	d1 30       	cpi	r29, 0x01	; 1
    1352:	09 f0       	breq	.+2      	; 0x1356 <main+0xab8>
    1354:	8a cd       	rjmp	.-1260   	; 0xe6a <main+0x5cc>
		{
			show_menu = 0;//Set the next menu to be shown to [[[main menu]]]
    1356:	00 e0       	ldi	r16, 0x00	; 0
    1358:	10 e0       	ldi	r17, 0x00	; 0
    135a:	89 cd       	rjmp	.-1262   	; 0xe6e <main+0x5d0>
				Status = TV_STATUS;
				TurnOn = TV_TURN_ON;
				TurnOff = TV_TURN_OFF;
		
				LCD_vclearscreen();
				LCD_vsend_string("TV S:");
    135c:	05 e2       	ldi	r16, 0x25	; 37
    135e:	12 e0       	ldi	r17, 0x02	; 2
				{
					LCD_vsend_string("ON");//print the status on
				}
				else//if the response from the slave was off status
				{
					LCD_vsend_string("OFF");//print the status off
    1360:	0f 2e       	mov	r0, r31
    1362:	f1 ed       	ldi	r31, 0xD1	; 209
    1364:	af 2e       	mov	r10, r31
    1366:	f1 e0       	ldi	r31, 0x01	; 1
    1368:	bf 2e       	mov	r11, r31
    136a:	f0 2d       	mov	r31, r0
				receive = SPI_Receivechar(Master_ACK);//the master micro controller asks for the status
				
				
				if (receive== 1)//if the response from the slave was on status
				{
					LCD_vsend_string("ON");//print the status on
    136c:	0f 2e       	mov	r0, r31
    136e:	fe ec       	ldi	r31, 0xCE	; 206
    1370:	8f 2e       	mov	r8, r31
    1372:	f1 e0       	ldi	r31, 0x01	; 1
    1374:	9f 2e       	mov	r9, r31
    1376:	f0 2d       	mov	r31, r0
				else//if the response from the slave was off status
				{
					LCD_vsend_string("OFF");//print the status off
				}
				LCD_vmovecursor(2,1);//move the cursor to the start of the second line
				LCD_vsend_string("1-On 2-Off 0-RET");//print the sub menu
    1378:	0f 2e       	mov	r0, r31
    137a:	f5 ed       	ldi	r31, 0xD5	; 213
    137c:	ef 2e       	mov	r14, r31
    137e:	f1 e0       	ldi	r31, 0x01	; 1
    1380:	ff 2e       	mov	r15, r31
    1382:	f0 2d       	mov	r31, r0
		do{
				Status = TV_STATUS;
				TurnOn = TV_TURN_ON;
				TurnOff = TV_TURN_OFF;
		
				LCD_vclearscreen();
    1384:	0e 94 25 04 	call	0x84a	; 0x84a <LCD_vclearscreen>
				LCD_vsend_string("TV S:");
    1388:	c8 01       	movw	r24, r16
    138a:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_vsend_string>
				SPI_Transmitchar(Status);//demand the status from the slave
    138e:	85 e1       	ldi	r24, 0x15	; 21
    1390:	0e 94 b4 0b 	call	0x1768	; 0x1768 <SPI_Transmitchar>
    1394:	2f ef       	ldi	r18, 0xFF	; 255
    1396:	30 e7       	ldi	r19, 0x70	; 112
    1398:	42 e0       	ldi	r20, 0x02	; 2
    139a:	21 50       	subi	r18, 0x01	; 1
    139c:	30 40       	sbci	r19, 0x00	; 0
    139e:	40 40       	sbci	r20, 0x00	; 0
    13a0:	e1 f7       	brne	.-8      	; 0x139a <main+0xafc>
    13a2:	00 c0       	rjmp	.+0      	; 0x13a4 <main+0xb06>
    13a4:	00 00       	nop
				_delay_ms(100);//Halt the system for the given time in (ms)
				receive = SPI_Receivechar(Master_ACK);//the master micro controller asks for the status
    13a6:	8f ef       	ldi	r24, 0xFF	; 255
    13a8:	0e 94 c1 0b 	call	0x1782	; 0x1782 <SPI_Receivechar>
				
				
				if (receive== 1)//if the response from the slave was on status
    13ac:	81 30       	cpi	r24, 0x01	; 1
    13ae:	21 f4       	brne	.+8      	; 0x13b8 <main+0xb1a>
				{
					LCD_vsend_string("ON");//print the status on
    13b0:	c4 01       	movw	r24, r8
    13b2:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_vsend_string>
    13b6:	03 c0       	rjmp	.+6      	; 0x13be <main+0xb20>
				}
				else//if the response from the slave was off status
				{
					LCD_vsend_string("OFF");//print the status off
    13b8:	c5 01       	movw	r24, r10
    13ba:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_vsend_string>
				}
				LCD_vmovecursor(2,1);//move the cursor to the start of the second line
    13be:	82 e0       	ldi	r24, 0x02	; 2
    13c0:	61 e0       	ldi	r22, 0x01	; 1
    13c2:	0e 94 2f 04 	call	0x85e	; 0x85e <LCD_vmovecursor>
				LCD_vsend_string("1-On 2-Off 0-RET");//print the sub menu
    13c6:	c7 01       	movw	r24, r14
    13c8:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_vsend_string>
				
								
				value=NOTPRESSED;
				while( value == NOTPRESSED )    //repeat till the user press any key
				{ //wait for the user till key is pressed select from menu
					value=keypad_u8check_press();
    13cc:	0e 94 3f 03 	call	0x67e	; 0x67e <keypad_u8check_press>
    13d0:	c8 2f       	mov	r28, r24
				LCD_vmovecursor(2,1);//move the cursor to the start of the second line
				LCD_vsend_string("1-On 2-Off 0-RET");//print the sub menu
				
								
				value=NOTPRESSED;
				while( value == NOTPRESSED )    //repeat till the user press any key
    13d2:	8f 3f       	cpi	r24, 0xFF	; 255
    13d4:	d9 f3       	breq	.-10     	; 0x13cc <main+0xb2e>
    13d6:	8f ef       	ldi	r24, 0xFF	; 255
    13d8:	90 e7       	ldi	r25, 0x70	; 112
    13da:	a2 e0       	ldi	r26, 0x02	; 2
    13dc:	81 50       	subi	r24, 0x01	; 1
    13de:	90 40       	sbci	r25, 0x00	; 0
    13e0:	a0 40       	sbci	r26, 0x00	; 0
    13e2:	e1 f7       	brne	.-8      	; 0x13dc <main+0xb3e>
    13e4:	00 c0       	rjmp	.+0      	; 0x13e6 <main+0xb48>
    13e6:	00 00       	nop
				
				
				/*there is no need to take any action in case of the user pressed 0(RET) key
				breaking the loop will be enough since it will be handled in the main*/
					
				if (value == '1')
    13e8:	c1 33       	cpi	r28, 0x31	; 49
    13ea:	21 f4       	brne	.+8      	; 0x13f4 <main+0xb56>
				{
					SPI_Transmitchar(TurnOn);//Send turn on signal from master to slave
    13ec:	85 e2       	ldi	r24, 0x25	; 37
    13ee:	0e 94 b4 0b 	call	0x1768	; 0x1768 <SPI_Transmitchar>
    13f2:	8c c1       	rjmp	.+792    	; 0x170c <main+0xe6e>
				}
				else if (value == '2')
    13f4:	c2 33       	cpi	r28, 0x32	; 50
    13f6:	21 f4       	brne	.+8      	; 0x1400 <main+0xb62>
				{
					SPI_Transmitchar(TurnOff);//Send turn off signal from master to slave
    13f8:	85 e3       	ldi	r24, 0x35	; 53
    13fa:	0e 94 b4 0b 	call	0x1768	; 0x1768 <SPI_Transmitchar>
    13fe:	86 c1       	rjmp	.+780    	; 0x170c <main+0xe6e>
				}
		    	else if( (value != NOTPRESSED) && (value != '0') )//show wrong input message if the user entered non numeric value
    1400:	cf 3f       	cpi	r28, 0xFF	; 255
    1402:	09 f4       	brne	.+2      	; 0x1406 <main+0xb68>
    1404:	bf cf       	rjmp	.-130    	; 0x1384 <main+0xae6>
    1406:	c0 33       	cpi	r28, 0x30	; 48
    1408:	09 f4       	brne	.+2      	; 0x140c <main+0xb6e>
    140a:	80 c1       	rjmp	.+768    	; 0x170c <main+0xe6e>
				{
					LCD_vclearscreen();
    140c:	0e 94 25 04 	call	0x84a	; 0x84a <LCD_vclearscreen>
					LCD_vsend_string("Wrong input");//print error message
    1410:	c6 01       	movw	r24, r12
    1412:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_vsend_string>
    1416:	2f ef       	ldi	r18, 0xFF	; 255
    1418:	34 e3       	ldi	r19, 0x34	; 52
    141a:	4c e0       	ldi	r20, 0x0C	; 12
    141c:	21 50       	subi	r18, 0x01	; 1
    141e:	30 40       	sbci	r19, 0x00	; 0
    1420:	40 40       	sbci	r20, 0x00	; 0
    1422:	e1 f7       	brne	.-8      	; 0x141c <main+0xb7e>
    1424:	00 c0       	rjmp	.+0      	; 0x1426 <main+0xb88>
    1426:	00 00       	nop
					_delay_ms(500);//Halt the system for the given time in (ms)
				}
			//show_menu=0;	
		}while( (value < '0') || (value > '2')  );//break the loop in case of valid key or time is out	
    1428:	c0 53       	subi	r28, 0x30	; 48
    142a:	c3 30       	cpi	r28, 0x03	; 3
    142c:	08 f0       	brcs	.+2      	; 0x1430 <main+0xb92>
    142e:	aa cf       	rjmp	.-172    	; 0x1384 <main+0xae6>
		show_menu=40;// show 4-more menu  in admin mode only
    1430:	08 e2       	ldi	r16, 0x28	; 40
    1432:	10 e0       	ldi	r17, 0x00	; 0
    1434:	1c cd       	rjmp	.-1480   	; 0xe6e <main+0x5d0>
		
		case 43:
		do
		{
			/******************** print more Menu ******************/
			LCD_vclearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
    1436:	0e 94 25 04 	call	0x84a	; 0x84a <LCD_vclearscreen>
			LCD_vsend_string("1:Set temperature ");
    143a:	8b e2       	ldi	r24, 0x2B	; 43
    143c:	92 e0       	ldi	r25, 0x02	; 2
    143e:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_vsend_string>
			LCD_vmovecursor(2,1);
    1442:	82 e0       	ldi	r24, 0x02	; 2
    1444:	61 e0       	ldi	r22, 0x01	; 1
    1446:	0e 94 2f 04 	call	0x85e	; 0x85e <LCD_vmovecursor>
			LCD_vsend_string("2:Control  0:RET");
    144a:	8e e3       	ldi	r24, 0x3E	; 62
    144c:	92 e0       	ldi	r25, 0x02	; 2
    144e:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_vsend_string>
			/*******************************************************/
			value=NOTPRESSED;
			while( value == NOTPRESSED )    //repeat till the user press any key
			{ //wait for the user till key is pressed select from menu
				value=keypad_u8check_press();
    1452:	0e 94 3f 03 	call	0x67e	; 0x67e <keypad_u8check_press>
    1456:	c8 2f       	mov	r28, r24
			LCD_vsend_string("1:Set temperature ");
			LCD_vmovecursor(2,1);
			LCD_vsend_string("2:Control  0:RET");
			/*******************************************************/
			value=NOTPRESSED;
			while( value == NOTPRESSED )    //repeat till the user press any key
    1458:	8f 3f       	cpi	r24, 0xFF	; 255
    145a:	d9 f3       	breq	.-10     	; 0x1452 <main+0xbb4>
    145c:	8f ef       	ldi	r24, 0xFF	; 255
    145e:	90 e7       	ldi	r25, 0x70	; 112
    1460:	a2 e0       	ldi	r26, 0x02	; 2
    1462:	81 50       	subi	r24, 0x01	; 1
    1464:	90 40       	sbci	r25, 0x00	; 0
    1466:	a0 40       	sbci	r26, 0x00	; 0
    1468:	e1 f7       	brne	.-8      	; 0x1462 <main+0xbc4>
    146a:	00 c0       	rjmp	.+0      	; 0x146c <main+0xbce>
    146c:	00 00       	nop
			{ //wait for the user till key is pressed select from menu
				value=keypad_u8check_press();
			}
			_delay_ms(100);//to avoid the duplication of the pressed key
			
			if (value == '1')//If key pressed is 1 SELECT_SET_TEMPERATURE
    146e:	c1 33       	cpi	r28, 0x31	; 49
    1470:	09 f4       	brne	.+2      	; 0x1474 <main+0xbd6>
    1472:	4f c1       	rjmp	.+670    	; 0x1712 <main+0xe74>
			{
				show_menu = 431;//Set the next menu to be shown to set temperature menu
			}
			else if (value == '2')//If key pressed is 2 --Set the next menu to be shown to air conditioning control menu
    1474:	c2 33       	cpi	r28, 0x32	; 50
    1476:	09 f4       	brne	.+2      	; 0x147a <main+0xbdc>
    1478:	4f c1       	rjmp	.+670    	; 0x1718 <main+0xe7a>
			{
				show_menu = 432;//Set the next menu to be shown to air conditioning control menu
			}
			else if (value == '0')//If key pressed is 0 -- SELECT_AIR_COND_RET
    147a:	c0 33       	cpi	r28, 0x30	; 48
    147c:	09 f4       	brne	.+2      	; 0x1480 <main+0xbe2>
    147e:	4f c1       	rjmp	.+670    	; 0x171e <main+0xe80>
			{
				show_menu = 0;//Set the next menu to be shown to more menu
			}
			else if(value != NOTPRESSED)//show wrong input message if the user pressed wrong key
    1480:	cf 3f       	cpi	r28, 0xFF	; 255
    1482:	c9 f2       	breq	.-78     	; 0x1436 <main+0xb98>
			{
				LCD_vclearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
    1484:	0e 94 25 04 	call	0x84a	; 0x84a <LCD_vclearscreen>
				LCD_vsend_string("Wrong input");//print error message
    1488:	c6 01       	movw	r24, r12
    148a:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_vsend_string>
    148e:	2f ef       	ldi	r18, 0xFF	; 255
    1490:	34 e3       	ldi	r19, 0x34	; 52
    1492:	4c e0       	ldi	r20, 0x0C	; 12
    1494:	21 50       	subi	r18, 0x01	; 1
    1496:	30 40       	sbci	r19, 0x00	; 0
    1498:	40 40       	sbci	r20, 0x00	; 0
    149a:	e1 f7       	brne	.-8      	; 0x1494 <main+0xbf6>
    149c:	00 c0       	rjmp	.+0      	; 0x149e <main+0xc00>
    149e:	00 00       	nop
				_delay_ms(500);
			}
		}while( (value < '0') || (value > '2')  );//break the loop in case of valid key or time is out	
    14a0:	c0 53       	subi	r28, 0x30	; 48
    14a2:	c3 30       	cpi	r28, 0x03	; 3
    14a4:	40 f6       	brcc	.-112    	; 0x1436 <main+0xb98>
    14a6:	e3 cc       	rjmp	.-1594   	; 0xe6e <main+0x5d0>
		case 431:
		temperature = 0;//clear the value of temperature
		while (temperature==0 )//start the loop that asks for the temperature from the user 
		{
			value = NOTPRESSED;//set the key pressed to the default value
			LCD_vclearscreen(); 
    14a8:	0e 94 25 04 	call	0x84a	; 0x84a <LCD_vclearscreen>
			LCD_vsend_string("Set temp.:__ ");//print the format of inserting temperature
    14ac:	c3 01       	movw	r24, r6
    14ae:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_vsend_string>
			LCD_vsend_char(0xDF); // print the symbol of degree
    14b2:	8f ed       	ldi	r24, 0xDF	; 223
    14b4:	0e 94 0a 04 	call	0x814	; 0x814 <LCD_vsend_char>
			LCD_vsend_char('C'); // print the C character
    14b8:	83 e4       	ldi	r24, 0x43	; 67
    14ba:	0e 94 0a 04 	call	0x814	; 0x814 <LCD_vsend_char>
			LCD_vmovecursor(1,11);//move the cursor to the place to write the entered temperature
    14be:	81 e0       	ldi	r24, 0x01	; 1
    14c0:	6b e0       	ldi	r22, 0x0B	; 11
    14c2:	0e 94 2f 04 	call	0x85e	; 0x85e <LCD_vmovecursor>
    14c6:	8f ef       	ldi	r24, 0xFF	; 255
    14c8:	91 ee       	ldi	r25, 0xE1	; 225
    14ca:	a4 e0       	ldi	r26, 0x04	; 4
    14cc:	81 50       	subi	r24, 0x01	; 1
    14ce:	90 40       	sbci	r25, 0x00	; 0
    14d0:	a0 40       	sbci	r26, 0x00	; 0
    14d2:	e1 f7       	brne	.-8      	; 0x14cc <main+0xc2e>
    14d4:	00 c0       	rjmp	.+0      	; 0x14d6 <main+0xc38>
    14d6:	00 00       	nop
			_delay_ms(200);//Halt the system for time in (ms)
			/*******************************enter the first_digit_temp ************************************************/
			value=NOTPRESSED;
			while( value == NOTPRESSED )    //repeat till the user press any key
			{ //wait for the user till key is pressed select from menu
				value=keypad_u8check_press();
    14d8:	0e 94 3f 03 	call	0x67e	; 0x67e <keypad_u8check_press>
			LCD_vsend_char('C'); // print the C character
			LCD_vmovecursor(1,11);//move the cursor to the place to write the entered temperature
			_delay_ms(200);//Halt the system for time in (ms)
			/*******************************enter the first_digit_temp ************************************************/
			value=NOTPRESSED;
			while( value == NOTPRESSED )    //repeat till the user press any key
    14dc:	8f 3f       	cpi	r24, 0xFF	; 255
    14de:	e1 f3       	breq	.-8      	; 0x14d8 <main+0xc3a>
    14e0:	2f e7       	ldi	r18, 0x7F	; 127
    14e2:	3a e1       	ldi	r19, 0x1A	; 26
    14e4:	46 e0       	ldi	r20, 0x06	; 6
    14e6:	21 50       	subi	r18, 0x01	; 1
    14e8:	30 40       	sbci	r19, 0x00	; 0
    14ea:	40 40       	sbci	r20, 0x00	; 0
    14ec:	e1 f7       	brne	.-8      	; 0x14e6 <main+0xc48>
    14ee:	00 c0       	rjmp	.+0      	; 0x14f0 <main+0xc52>
    14f0:	00 00       	nop
			{ //wait for the user till key is pressed select from menu
				value=keypad_u8check_press();
			}
			_delay_ms(250);//to avoid the duplication of the pressed key

			if (value <'0' || value >'9')//show wrong input message if the user entered non numeric value
    14f2:	c8 2f       	mov	r28, r24
    14f4:	c0 53       	subi	r28, 0x30	; 48
    14f6:	ca 30       	cpi	r28, 0x0A	; 10
    14f8:	78 f0       	brcs	.+30     	; 0x1518 <main+0xc7a>
			{
				LCD_vclearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
    14fa:	0e 94 25 04 	call	0x84a	; 0x84a <LCD_vclearscreen>
				LCD_vsend_string("Wrong input");//print error message
    14fe:	c6 01       	movw	r24, r12
    1500:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_vsend_string>
    1504:	8f ef       	ldi	r24, 0xFF	; 255
    1506:	94 e3       	ldi	r25, 0x34	; 52
    1508:	ac e0       	ldi	r26, 0x0C	; 12
    150a:	81 50       	subi	r24, 0x01	; 1
    150c:	90 40       	sbci	r25, 0x00	; 0
    150e:	a0 40       	sbci	r26, 0x00	; 0
    1510:	e1 f7       	brne	.-8      	; 0x150a <main+0xc6c>
    1512:	00 c0       	rjmp	.+0      	; 0x1514 <main+0xc76>
    1514:	00 00       	nop
				_delay_ms(500);//Halt the system for the given time in (ms)
				continue;//return to #while (temperature==0)# line 797
    1516:	c8 cf       	rjmp	.-112    	; 0x14a8 <main+0xc0a>
			}
			else//if the value is valid
			{
				LCD_vsend_char(value);//print the value on the lcd
    1518:	0e 94 0a 04 	call	0x814	; 0x814 <LCD_vsend_char>
			}
			/*********************************enter the second_digit_temp**********************************************/
			value=NOTPRESSED;
			while( value == NOTPRESSED )    //repeat till the user press any key
			{ //wait for the user till key is pressed select from menu
				value=keypad_u8check_press();
    151c:	0e 94 3f 03 	call	0x67e	; 0x67e <keypad_u8check_press>
				first_digit_temp = value-'0';//save the entered value of first_digit_temp by subtract from ASCii of zero
				value=NOTPRESSED;				
			}
			/*********************************enter the second_digit_temp**********************************************/
			value=NOTPRESSED;
			while( value == NOTPRESSED )    //repeat till the user press any key
    1520:	8f 3f       	cpi	r24, 0xFF	; 255
    1522:	e1 f3       	breq	.-8      	; 0x151c <main+0xc7e>
    1524:	2f e7       	ldi	r18, 0x7F	; 127
    1526:	3a e1       	ldi	r19, 0x1A	; 26
    1528:	46 e0       	ldi	r20, 0x06	; 6
    152a:	21 50       	subi	r18, 0x01	; 1
    152c:	30 40       	sbci	r19, 0x00	; 0
    152e:	40 40       	sbci	r20, 0x00	; 0
    1530:	e1 f7       	brne	.-8      	; 0x152a <main+0xc8c>
    1532:	00 c0       	rjmp	.+0      	; 0x1534 <main+0xc96>
    1534:	00 00       	nop
			{ //wait for the user till key is pressed select from menu
				value=keypad_u8check_press();
			}
			_delay_ms(250);//to avoid the duplication of the pressed key

			if (value <'0' || value >'9')//show wrong input message if the user entered non numeric value
    1536:	18 2f       	mov	r17, r24
    1538:	10 53       	subi	r17, 0x30	; 48
    153a:	1a 30       	cpi	r17, 0x0A	; 10
    153c:	78 f0       	brcs	.+30     	; 0x155c <main+0xcbe>
			{
				LCD_vclearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
    153e:	0e 94 25 04 	call	0x84a	; 0x84a <LCD_vclearscreen>
				LCD_vsend_string("Wrong input");//print error message
    1542:	c6 01       	movw	r24, r12
    1544:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_vsend_string>
    1548:	8f ef       	ldi	r24, 0xFF	; 255
    154a:	94 e3       	ldi	r25, 0x34	; 52
    154c:	ac e0       	ldi	r26, 0x0C	; 12
    154e:	81 50       	subi	r24, 0x01	; 1
    1550:	90 40       	sbci	r25, 0x00	; 0
    1552:	a0 40       	sbci	r26, 0x00	; 0
    1554:	e1 f7       	brne	.-8      	; 0x154e <main+0xcb0>
    1556:	00 c0       	rjmp	.+0      	; 0x1558 <main+0xcba>
    1558:	00 00       	nop
				_delay_ms(500);//Halt the system for the given time in (ms)
				continue;//return to #while (temperature==0)# line 797
    155a:	a6 cf       	rjmp	.-180    	; 0x14a8 <main+0xc0a>
			}
			else//if the value is valid
			{
				LCD_vsend_char(value);//print the value on the lcd
    155c:	0e 94 0a 04 	call	0x814	; 0x814 <LCD_vsend_char>
				second_digit_temp = value-'0';//save the entered value of second_digit_temp by subtract from ASCii of zero
				value = NOTPRESSED;//set the key pressed to the default value
			}
			temperature = first_digit_temp*10 + second_digit_temp;//set the value of the temperature from the given separated values
    1560:	cc 0f       	add	r28, r28
    1562:	8c 2f       	mov	r24, r28
    1564:	88 0f       	add	r24, r24
    1566:	88 0f       	add	r24, r24
    1568:	c8 0f       	add	r28, r24
    156a:	c1 0f       	add	r28, r17
			SPI_Transmitchar(SET_TEMPERATURE);//Send the code of set temperature
    156c:	80 e4       	ldi	r24, 0x40	; 64
    156e:	0e 94 b4 0b 	call	0x1768	; 0x1768 <SPI_Transmitchar>
    1572:	2f ef       	ldi	r18, 0xFF	; 255
    1574:	31 ee       	ldi	r19, 0xE1	; 225
    1576:	44 e0       	ldi	r20, 0x04	; 4
    1578:	21 50       	subi	r18, 0x01	; 1
    157a:	30 40       	sbci	r19, 0x00	; 0
    157c:	40 40       	sbci	r20, 0x00	; 0
    157e:	e1 f7       	brne	.-8      	; 0x1578 <main+0xcda>
    1580:	00 c0       	rjmp	.+0      	; 0x1582 <main+0xce4>
    1582:	00 00       	nop
			_delay_ms(200);
			SPI_Transmitchar(temperature);//send the entered temperature
    1584:	8c 2f       	mov	r24, r28
    1586:	0e 94 b4 0b 	call	0x1768	; 0x1768 <SPI_Transmitchar>
			LCD_vclearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
    158a:	0e 94 25 04 	call	0x84a	; 0x84a <LCD_vclearscreen>
			LCD_vsend_string("Temperature Sent");//show the message
    158e:	8d e5       	ldi	r24, 0x5D	; 93
    1590:	92 e0       	ldi	r25, 0x02	; 2
    1592:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_vsend_string>
    1596:	8f ef       	ldi	r24, 0xFF	; 255
    1598:	94 e3       	ldi	r25, 0x34	; 52
    159a:	ac e0       	ldi	r26, 0x0C	; 12
    159c:	81 50       	subi	r24, 0x01	; 1
    159e:	90 40       	sbci	r25, 0x00	; 0
    15a0:	a0 40       	sbci	r26, 0x00	; 0
    15a2:	e1 f7       	brne	.-8      	; 0x159c <main+0xcfe>
    15a4:	00 c0       	rjmp	.+0      	; 0x15a6 <main+0xd08>
    15a6:	00 00       	nop
									AIRCONDITIONING_MENU Menu  
								[[[	1-set temperature menu ]]]                                                                  */
		/************************************************************************/
		case 431:
		temperature = 0;//clear the value of temperature
		while (temperature==0 )//start the loop that asks for the temperature from the user 
    15a8:	cc 23       	and	r28, r28
    15aa:	09 f4       	brne	.+2      	; 0x15ae <main+0xd10>
    15ac:	7d cf       	rjmp	.-262    	; 0x14a8 <main+0xc0a>
			SPI_Transmitchar(temperature);//send the entered temperature
			LCD_vclearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
			LCD_vsend_string("Temperature Sent");//show the message
			_delay_ms(500);//Halt the system for the given time in (ms)
		}
		show_menu = 43;//Set the next menu to be shown to air conditioning menu
    15ae:	0b e2       	ldi	r16, 0x2B	; 43
    15b0:	10 e0       	ldi	r17, 0x00	; 0
    15b2:	5d cc       	rjmp	.-1862   	; 0xe6e <main+0x5d0>
				Status = AIR_COND_STATUS;
				TurnOn = AIR_COND_TURN_ON;
				TurnOff = AIR_COND_TURN_OFF;
		
				LCD_vclearscreen();
				LCD_vsend_string("Air Cond. S:");
    15b4:	0e e6       	ldi	r16, 0x6E	; 110
    15b6:	12 e0       	ldi	r17, 0x02	; 2
				{
					LCD_vsend_string("ON");//print the status on
				}
				else//if the response from the slave was off status
				{
					LCD_vsend_string("OFF");//print the status off
    15b8:	0f 2e       	mov	r0, r31
    15ba:	f1 ed       	ldi	r31, 0xD1	; 209
    15bc:	af 2e       	mov	r10, r31
    15be:	f1 e0       	ldi	r31, 0x01	; 1
    15c0:	bf 2e       	mov	r11, r31
    15c2:	f0 2d       	mov	r31, r0
				receive = SPI_Receivechar(Master_ACK);//the master micro controller asks for the status
				
				
				if (receive== 1)//if the response from the slave was on status
				{
					LCD_vsend_string("ON");//print the status on
    15c4:	0f 2e       	mov	r0, r31
    15c6:	fe ec       	ldi	r31, 0xCE	; 206
    15c8:	8f 2e       	mov	r8, r31
    15ca:	f1 e0       	ldi	r31, 0x01	; 1
    15cc:	9f 2e       	mov	r9, r31
    15ce:	f0 2d       	mov	r31, r0
				else//if the response from the slave was off status
				{
					LCD_vsend_string("OFF");//print the status off
				}
				LCD_vmovecursor(2,1);//move the cursor to the start of the second line
				LCD_vsend_string("1-On 2-Off 0-RET");//print the sub menu
    15d0:	0f 2e       	mov	r0, r31
    15d2:	f5 ed       	ldi	r31, 0xD5	; 213
    15d4:	ef 2e       	mov	r14, r31
    15d6:	f1 e0       	ldi	r31, 0x01	; 1
    15d8:	ff 2e       	mov	r15, r31
    15da:	f0 2d       	mov	r31, r0
		do{
				Status = AIR_COND_STATUS;
				TurnOn = AIR_COND_TURN_ON;
				TurnOff = AIR_COND_TURN_OFF;
		
				LCD_vclearscreen();
    15dc:	0e 94 25 04 	call	0x84a	; 0x84a <LCD_vclearscreen>
				LCD_vsend_string("Air Cond. S:");
    15e0:	c8 01       	movw	r24, r16
    15e2:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_vsend_string>
				SPI_Transmitchar(Status);//demand the status from the slave
    15e6:	86 e1       	ldi	r24, 0x16	; 22
    15e8:	0e 94 b4 0b 	call	0x1768	; 0x1768 <SPI_Transmitchar>
    15ec:	2f ef       	ldi	r18, 0xFF	; 255
    15ee:	30 e7       	ldi	r19, 0x70	; 112
    15f0:	42 e0       	ldi	r20, 0x02	; 2
    15f2:	21 50       	subi	r18, 0x01	; 1
    15f4:	30 40       	sbci	r19, 0x00	; 0
    15f6:	40 40       	sbci	r20, 0x00	; 0
    15f8:	e1 f7       	brne	.-8      	; 0x15f2 <main+0xd54>
    15fa:	00 c0       	rjmp	.+0      	; 0x15fc <main+0xd5e>
    15fc:	00 00       	nop
				_delay_ms(100);//Halt the system for the given time in (ms)
				receive = SPI_Receivechar(Master_ACK);//the master micro controller asks for the status
    15fe:	8f ef       	ldi	r24, 0xFF	; 255
    1600:	0e 94 c1 0b 	call	0x1782	; 0x1782 <SPI_Receivechar>
				
				
				if (receive== 1)//if the response from the slave was on status
    1604:	81 30       	cpi	r24, 0x01	; 1
    1606:	21 f4       	brne	.+8      	; 0x1610 <main+0xd72>
				{
					LCD_vsend_string("ON");//print the status on
    1608:	c4 01       	movw	r24, r8
    160a:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_vsend_string>
    160e:	03 c0       	rjmp	.+6      	; 0x1616 <main+0xd78>
				}
				else//if the response from the slave was off status
				{
					LCD_vsend_string("OFF");//print the status off
    1610:	c5 01       	movw	r24, r10
    1612:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_vsend_string>
				}
				LCD_vmovecursor(2,1);//move the cursor to the start of the second line
    1616:	82 e0       	ldi	r24, 0x02	; 2
    1618:	61 e0       	ldi	r22, 0x01	; 1
    161a:	0e 94 2f 04 	call	0x85e	; 0x85e <LCD_vmovecursor>
				LCD_vsend_string("1-On 2-Off 0-RET");//print the sub menu
    161e:	c7 01       	movw	r24, r14
    1620:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_vsend_string>
				
								
				value=NOTPRESSED;
				while( value == NOTPRESSED )    //repeat till the user press any key
				{ //wait for the user till key is pressed select from menu
					value=keypad_u8check_press();
    1624:	0e 94 3f 03 	call	0x67e	; 0x67e <keypad_u8check_press>
    1628:	c8 2f       	mov	r28, r24
				LCD_vmovecursor(2,1);//move the cursor to the start of the second line
				LCD_vsend_string("1-On 2-Off 0-RET");//print the sub menu
				
								
				value=NOTPRESSED;
				while( value == NOTPRESSED )    //repeat till the user press any key
    162a:	8f 3f       	cpi	r24, 0xFF	; 255
    162c:	d9 f3       	breq	.-10     	; 0x1624 <main+0xd86>
    162e:	8f ef       	ldi	r24, 0xFF	; 255
    1630:	90 e7       	ldi	r25, 0x70	; 112
    1632:	a2 e0       	ldi	r26, 0x02	; 2
    1634:	81 50       	subi	r24, 0x01	; 1
    1636:	90 40       	sbci	r25, 0x00	; 0
    1638:	a0 40       	sbci	r26, 0x00	; 0
    163a:	e1 f7       	brne	.-8      	; 0x1634 <main+0xd96>
    163c:	00 c0       	rjmp	.+0      	; 0x163e <main+0xda0>
    163e:	00 00       	nop
				
				
				/*there is no need to take any action in case of the user pressed 0(RET) key
				breaking the loop will be enough since it will be handled in the main*/
					
				if (value == '1')
    1640:	c1 33       	cpi	r28, 0x31	; 49
    1642:	21 f4       	brne	.+8      	; 0x164c <main+0xdae>
				{
					SPI_Transmitchar(TurnOn);//Send turn on signal from master to slave
    1644:	86 e2       	ldi	r24, 0x26	; 38
    1646:	0e 94 b4 0b 	call	0x1768	; 0x1768 <SPI_Transmitchar>
    164a:	6c c0       	rjmp	.+216    	; 0x1724 <main+0xe86>
				}
				else if (value == '2')
    164c:	c2 33       	cpi	r28, 0x32	; 50
    164e:	21 f4       	brne	.+8      	; 0x1658 <main+0xdba>
				{
					SPI_Transmitchar(TurnOff);//Send turn off signal from master to slave
    1650:	86 e3       	ldi	r24, 0x36	; 54
    1652:	0e 94 b4 0b 	call	0x1768	; 0x1768 <SPI_Transmitchar>
    1656:	66 c0       	rjmp	.+204    	; 0x1724 <main+0xe86>
				}
		    	else if( (value != NOTPRESSED) && (value != '0') )//show wrong input message if the user entered non numeric value
    1658:	cf 3f       	cpi	r28, 0xFF	; 255
    165a:	09 f4       	brne	.+2      	; 0x165e <main+0xdc0>
    165c:	bf cf       	rjmp	.-130    	; 0x15dc <main+0xd3e>
    165e:	c0 33       	cpi	r28, 0x30	; 48
    1660:	09 f4       	brne	.+2      	; 0x1664 <main+0xdc6>
    1662:	60 c0       	rjmp	.+192    	; 0x1724 <main+0xe86>
				{
					LCD_vclearscreen();
    1664:	0e 94 25 04 	call	0x84a	; 0x84a <LCD_vclearscreen>
					LCD_vsend_string("Wrong input");//print error message
    1668:	c6 01       	movw	r24, r12
    166a:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_vsend_string>
    166e:	2f ef       	ldi	r18, 0xFF	; 255
    1670:	34 e3       	ldi	r19, 0x34	; 52
    1672:	4c e0       	ldi	r20, 0x0C	; 12
    1674:	21 50       	subi	r18, 0x01	; 1
    1676:	30 40       	sbci	r19, 0x00	; 0
    1678:	40 40       	sbci	r20, 0x00	; 0
    167a:	e1 f7       	brne	.-8      	; 0x1674 <main+0xdd6>
    167c:	00 c0       	rjmp	.+0      	; 0x167e <main+0xde0>
    167e:	00 00       	nop
					_delay_ms(500);//Halt the system for the given time in (ms)
				}
			//show_menu=0;	
		}while( (value < '0') || (value > '2')  );//break the loop in case of valid key or time is out	
    1680:	c0 53       	subi	r28, 0x30	; 48
    1682:	c3 30       	cpi	r28, 0x03	; 3
    1684:	08 f0       	brcs	.+2      	; 0x1688 <main+0xdea>
    1686:	aa cf       	rjmp	.-172    	; 0x15dc <main+0xd3e>
		show_menu = 43;//Set the next menu to be shown to air conditioning menu
    1688:	0b e2       	ldi	r16, 0x2B	; 43
    168a:	10 e0       	ldi	r17, 0x00	; 0
    168c:	f0 cb       	rjmp	.-2080   	; 0xe6e <main+0x5d0>
    168e:	00 e0       	ldi	r16, 0x00	; 0
    1690:	10 e0       	ldi	r17, 0x00	; 0
		
		case 40:// pressed 4 to select 4-more menu
		do{
				/******************** print more Menu ******************/
				LCD_vclearscreen();
				LCD_vsend_string("1:Room4    2:TV   ");
    1692:	0f 2e       	mov	r0, r31
    1694:	f8 ef       	ldi	r31, 0xF8	; 248
    1696:	4f 2e       	mov	r4, r31
    1698:	f1 e0       	ldi	r31, 0x01	; 1
    169a:	5f 2e       	mov	r5, r31
    169c:	f0 2d       	mov	r31, r0
				LCD_vmovecursor(2,1);
				LCD_vsend_string("3:AirCond .4:RET");
    169e:	0f 2e       	mov	r0, r31
    16a0:	fb e0       	ldi	r31, 0x0B	; 11
    16a2:	2f 2e       	mov	r2, r31
    16a4:	f2 e0       	ldi	r31, 0x02	; 2
    16a6:	3f 2e       	mov	r3, r31
    16a8:	f0 2d       	mov	r31, r0
					show_menu = 0;//Set the next menu to be shown to [[[main menu]]]
				}
				else if(value != NOTPRESSED)//show wrong input message if the user pressed wrong key
				{
					LCD_vclearscreen();
					LCD_vsend_string("Wrong input");//print error message
    16aa:	0f 2e       	mov	r0, r31
    16ac:	f9 eb       	ldi	r31, 0xB9	; 185
    16ae:	cf 2e       	mov	r12, r31
    16b0:	f1 e0       	ldi	r31, 0x01	; 1
    16b2:	df 2e       	mov	r13, r31
    16b4:	f0 2d       	mov	r31, r0
		temperature = 0;//clear the value of temperature
		while (temperature==0 )//start the loop that asks for the temperature from the user 
		{
			value = NOTPRESSED;//set the key pressed to the default value
			LCD_vclearscreen(); 
			LCD_vsend_string("Set temp.:__ ");//print the format of inserting temperature
    16b6:	0f 2e       	mov	r0, r31
    16b8:	ff e4       	ldi	r31, 0x4F	; 79
    16ba:	6f 2e       	mov	r6, r31
    16bc:	f2 e0       	ldi	r31, 0x02	; 2
    16be:	7f 2e       	mov	r7, r31
    16c0:	f0 2d       	mov	r31, r0
    16c2:	d5 cb       	rjmp	.-2134   	; 0xe6e <main+0x5d0>
	*/	
			
			
			if (value == '1')//If key pressed is 1 i.e. select room1
			{
				show_menu = 1;//Set the next menu to be shown to room1 menu
    16c4:	01 e0       	ldi	r16, 0x01	; 1
    16c6:	10 e0       	ldi	r17, 0x00	; 0
    16c8:	d2 cb       	rjmp	.-2140   	; 0xe6e <main+0x5d0>

			}
			else if (value == '2')//If key pressed is 2
			{
				show_menu = 2;//Set the next menu to be shown to room2 menu
    16ca:	02 e0       	ldi	r16, 0x02	; 2
    16cc:	10 e0       	ldi	r17, 0x00	; 0
    16ce:	cf cb       	rjmp	.-2146   	; 0xe6e <main+0x5d0>
			}
			else if (value == '3')//If key pressed is 3
			{
				show_menu = 3;//Set the next menu to be shown to room3 menu
    16d0:	03 e0       	ldi	r16, 0x03	; 3
    16d2:	10 e0       	ldi	r17, 0x00	; 0
    16d4:	cc cb       	rjmp	.-2152   	; 0xe6e <main+0x5d0>
			}
			else if (value == '4' && mode == 1)//If key pressed is 4 and the logged in user is guest
			{
				show_menu = 41;//Set the next menu to be shown to [[[[ room4 menu]]]
    16d6:	09 e2       	ldi	r16, 0x29	; 41
    16d8:	10 e0       	ldi	r17, 0x00	; 0
    16da:	c9 cb       	rjmp	.-2158   	; 0xe6e <main+0x5d0>
			}
			else if (value == '4' && mode == 0)//If key pressed is 4 and the logged in user is admin
			{
				show_menu = 40;//Set the next menu to be shown to [[[more menu]]]
    16dc:	08 e2       	ldi	r16, 0x28	; 40
    16de:	10 e0       	ldi	r17, 0x00	; 0
    16e0:	c6 cb       	rjmp	.-2164   	; 0xe6e <main+0x5d0>
					LCD_vsend_string("Wrong input");//print error message
					_delay_ms(500);//Halt the system for the given time in (ms)
				}
			//show_menu=0;	
		}while( (value < '0') || (value > '2')  );//break the loop in case of valid key or time is out	
		show_menu=0;
    16e2:	00 e0       	ldi	r16, 0x00	; 0
    16e4:	10 e0       	ldi	r17, 0x00	; 0
    16e6:	c3 cb       	rjmp	.-2170   	; 0xe6e <main+0x5d0>
					LCD_vsend_string("Wrong input");//print error message
					_delay_ms(500);//Halt the system for the given time in (ms)
				}
			//show_menu=0;	
		}while( (value < '0') || (value > '2')  );//break the loop in case of valid key or time is out	
		show_menu=0;
    16e8:	00 e0       	ldi	r16, 0x00	; 0
    16ea:	10 e0       	ldi	r17, 0x00	; 0
    16ec:	c0 cb       	rjmp	.-2176   	; 0xe6e <main+0x5d0>
					LCD_vsend_string("Wrong input");//print error message
					_delay_ms(500);//Halt the system for the given time in (ms)
				}
			//show_menu=0;	
		}while( (value < '0') || (value > '2')  );//break the loop in case of valid key or time is out	
		show_menu=0;
    16ee:	00 e0       	ldi	r16, 0x00	; 0
    16f0:	10 e0       	ldi	r17, 0x00	; 0
    16f2:	bd cb       	rjmp	.-2182   	; 0xe6e <main+0x5d0>
				}
				_delay_ms(100);//to avoid the duplication of the pressed key
				
				if (value == '1')//If key pressed is 1 - Set the next menu to be shown to room4 menu
				{
					show_menu = 41;//Set the next menu to be shown to [[[room4 menu]]]
    16f4:	09 e2       	ldi	r16, 0x29	; 41
    16f6:	10 e0       	ldi	r17, 0x00	; 0
    16f8:	ba cb       	rjmp	.-2188   	; 0xe6e <main+0x5d0>
				}
				else if (value == '2')//If key pressed is 2- Set the next menu to be shown to TV menu
				{
					show_menu = 42;//Set the next menu to be shown to [[[TV menu]]]
    16fa:	0a e2       	ldi	r16, 0x2A	; 42
    16fc:	10 e0       	ldi	r17, 0x00	; 0
    16fe:	b7 cb       	rjmp	.-2194   	; 0xe6e <main+0x5d0>
				}
				else if (value == '3')//If key pressed is 3
				{
					show_menu = 43;//Set the next menu to be shown to [[[Air conditioning menu]]]
    1700:	0b e2       	ldi	r16, 0x2B	; 43
    1702:	10 e0       	ldi	r17, 0x00	; 0
    1704:	b4 cb       	rjmp	.-2200   	; 0xe6e <main+0x5d0>
				}
				else if (value == '4')//If key pressed is 4 (RET)
				{
					show_menu = 0;//Set the next menu to be shown to [[[main menu]]]
    1706:	00 e0       	ldi	r16, 0x00	; 0
    1708:	10 e0       	ldi	r17, 0x00	; 0
    170a:	b1 cb       	rjmp	.-2206   	; 0xe6e <main+0x5d0>
					LCD_vsend_string("Wrong input");//print error message
					_delay_ms(500);//Halt the system for the given time in (ms)
				}
			//show_menu=0;	
		}while( (value < '0') || (value > '2')  );//break the loop in case of valid key or time is out	
		show_menu=40;// show 4-more menu  in admin mode only
    170c:	08 e2       	ldi	r16, 0x28	; 40
    170e:	10 e0       	ldi	r17, 0x00	; 0
    1710:	ae cb       	rjmp	.-2212   	; 0xe6e <main+0x5d0>
			}
			_delay_ms(100);//to avoid the duplication of the pressed key
			
			if (value == '1')//If key pressed is 1 SELECT_SET_TEMPERATURE
			{
				show_menu = 431;//Set the next menu to be shown to set temperature menu
    1712:	0f ea       	ldi	r16, 0xAF	; 175
    1714:	11 e0       	ldi	r17, 0x01	; 1
    1716:	ab cb       	rjmp	.-2218   	; 0xe6e <main+0x5d0>
			}
			else if (value == '2')//If key pressed is 2 --Set the next menu to be shown to air conditioning control menu
			{
				show_menu = 432;//Set the next menu to be shown to air conditioning control menu
    1718:	00 eb       	ldi	r16, 0xB0	; 176
    171a:	11 e0       	ldi	r17, 0x01	; 1
    171c:	a8 cb       	rjmp	.-2224   	; 0xe6e <main+0x5d0>
			}
			else if (value == '0')//If key pressed is 0 -- SELECT_AIR_COND_RET
			{
				show_menu = 0;//Set the next menu to be shown to more menu
    171e:	00 e0       	ldi	r16, 0x00	; 0
    1720:	10 e0       	ldi	r17, 0x00	; 0
    1722:	a5 cb       	rjmp	.-2230   	; 0xe6e <main+0x5d0>
					LCD_vsend_string("Wrong input");//print error message
					_delay_ms(500);//Halt the system for the given time in (ms)
				}
			//show_menu=0;	
		}while( (value < '0') || (value > '2')  );//break the loop in case of valid key or time is out	
		show_menu = 43;//Set the next menu to be shown to air conditioning menu
    1724:	0b e2       	ldi	r16, 0x2B	; 43
    1726:	10 e0       	ldi	r17, 0x00	; 0
    1728:	a2 cb       	rjmp	.-2236   	; 0xe6e <main+0x5d0>

0000172a <SPI_MasterInit>:
	/************************************************************************/
	/*     DRB |= (1<<MOSI)|(1<<CS)|(1<<CLK);
	      SPCR = 1<<MSTR | 1<<SPE;                                          */
	/************************************************************************/
	/*Set SS / MOSI / SCK  as output pins for master*/
	DIO_vsetPinDir('B',4,1);
    172a:	82 e4       	ldi	r24, 0x42	; 66
    172c:	64 e0       	ldi	r22, 0x04	; 4
    172e:	41 e0       	ldi	r20, 0x01	; 1
    1730:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPinDir>
	DIO_vsetPinDir('B',5,1);
    1734:	82 e4       	ldi	r24, 0x42	; 66
    1736:	65 e0       	ldi	r22, 0x05	; 5
    1738:	41 e0       	ldi	r20, 0x01	; 1
    173a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPinDir>
	DIO_vsetPinDir('B',7,1);
    173e:	82 e4       	ldi	r24, 0x42	; 66
    1740:	67 e0       	ldi	r22, 0x07	; 7
    1742:	41 e0       	ldi	r20, 0x01	; 1
    1744:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPinDir>
	/*Enable Master mode*/
	SetBit(SPCR,MSTR);
    1748:	6c 9a       	sbi	0x0d, 4	; 13
	/*Set clock to fosc/16*/
	SetBit(SPCR,SPR0);
    174a:	68 9a       	sbi	0x0d, 0	; 13
	/*Enable SPI*/
    SetBit(SPCR,SPE);
    174c:	6e 9a       	sbi	0x0d, 6	; 13
	/*set SS to high */
	DIO_vwritePin('B',4,1);
    174e:	82 e4       	ldi	r24, 0x42	; 66
    1750:	64 e0       	ldi	r22, 0x04	; 4
    1752:	41 e0       	ldi	r20, 0x01	; 1
    1754:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <DIO_vwritePin>
}
    1758:	08 95       	ret

0000175a <SPI_SlaveInit>:
	/* 
	SetBit(DDRB,MISO);	// MISO
	SetBit(SPCR,SPE);	// enable SPI                                                                     */
	/************************************************************************/
	/*Enable SPI*/
	SetBit(SPCR,SPE);
    175a:	6e 9a       	sbi	0x0d, 6	; 13
	/*Set MISO as output*/
	DIO_vsetPinDir('B',6,1);
    175c:	82 e4       	ldi	r24, 0x42	; 66
    175e:	66 e0       	ldi	r22, 0x06	; 6
    1760:	41 e0       	ldi	r20, 0x01	; 1
    1762:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPinDir>
}
    1766:	08 95       	ret

00001768 <SPI_Transmitchar>:



/*	Function Description : SPI as a Master or slave Transmit char      */
unsigned char SPI_Transmitchar(unsigned char Data)
{
    1768:	cf 93       	push	r28
    176a:	c8 2f       	mov	r28, r24
	/*Clear SS to send data to slave*/
	DIO_vwritePin('B',4,0);
    176c:	82 e4       	ldi	r24, 0x42	; 66
    176e:	64 e0       	ldi	r22, 0x04	; 4
    1770:	40 e0       	ldi	r20, 0x00	; 0
    1772:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <DIO_vwritePin>
	/*Put data on SPDR*/
	SPDR=Data;
    1776:	cf b9       	out	0x0f, r28	; 15
	/*Wait until the transmission is finished*/
     while(ReadBit(SPSR,SPIF)==0);	
    1778:	77 9b       	sbis	0x0e, 7	; 14
    177a:	fe cf       	rjmp	.-4      	; 0x1778 <SPI_Transmitchar+0x10>
	 /*read SPDR*/
	 return SPDR ;
    177c:	8f b1       	in	r24, 0x0f	; 15
}
    177e:	cf 91       	pop	r28
    1780:	08 95       	ret

00001782 <SPI_Receivechar>:

/*	Function Description : SPI as a Slave or master Receive char     */
unsigned char SPI_Receivechar(unsigned char Data)
{
	/*Put data on SPDR*/
	SPDR=Data;
    1782:	8f b9       	out	0x0f, r24	; 15
	/*Wait until data is received in SPI register*/
	while(ReadBit(SPSR,SPIF)==0);
    1784:	77 9b       	sbis	0x0e, 7	; 14
    1786:	fe cf       	rjmp	.-4      	; 0x1784 <SPI_Receivechar+0x2>
	/*read the received data*/
	return SPDR ;
    1788:	8f b1       	in	r24, 0x0f	; 15
}
    178a:	08 95       	ret

0000178c <SPI_Transmitstring>:


/*	Function Description : SPI  as a Master or slave Transmit String     */
void SPI_Transmitstring(unsigned char *ptr)
{
    178c:	cf 93       	push	r28
    178e:	df 93       	push	r29
    1790:	ec 01       	movw	r28, r24
	while((*ptr)!=0)
    1792:	88 81       	ld	r24, Y
    1794:	88 23       	and	r24, r24
    1796:	79 f0       	breq	.+30     	; 0x17b6 <SPI_Transmitstring+0x2a>
	return SPDR ;
}


/*	Function Description : SPI  as a Master or slave Transmit String     */
void SPI_Transmitstring(unsigned char *ptr)
    1798:	21 96       	adiw	r28, 0x01	; 1
{
	while((*ptr)!=0)
	{
		SPI_Transmitchar(*ptr);
    179a:	0e 94 b4 0b 	call	0x1768	; 0x1768 <SPI_Transmitchar>
    179e:	8f ef       	ldi	r24, 0xFF	; 255
    17a0:	92 e5       	ldi	r25, 0x52	; 82
    17a2:	a7 e0       	ldi	r26, 0x07	; 7
    17a4:	81 50       	subi	r24, 0x01	; 1
    17a6:	90 40       	sbci	r25, 0x00	; 0
    17a8:	a0 40       	sbci	r26, 0x00	; 0
    17aa:	e1 f7       	brne	.-8      	; 0x17a4 <SPI_Transmitstring+0x18>
    17ac:	00 c0       	rjmp	.+0      	; 0x17ae <SPI_Transmitstring+0x22>
    17ae:	00 00       	nop


/*	Function Description : SPI  as a Master or slave Transmit String     */
void SPI_Transmitstring(unsigned char *ptr)
{
	while((*ptr)!=0)
    17b0:	89 91       	ld	r24, Y+
    17b2:	88 23       	and	r24, r24
    17b4:	91 f7       	brne	.-28     	; 0x179a <SPI_Transmitstring+0xe>
	{
		SPI_Transmitchar(*ptr);
		_delay_ms(300);
		ptr++;
	}
}
    17b6:	df 91       	pop	r29
    17b8:	cf 91       	pop	r28
    17ba:	08 95       	ret

000017bc <__divmodhi4>:
    17bc:	97 fb       	bst	r25, 7
    17be:	09 2e       	mov	r0, r25
    17c0:	07 26       	eor	r0, r23
    17c2:	0a d0       	rcall	.+20     	; 0x17d8 <__divmodhi4_neg1>
    17c4:	77 fd       	sbrc	r23, 7
    17c6:	04 d0       	rcall	.+8      	; 0x17d0 <__divmodhi4_neg2>
    17c8:	0c d0       	rcall	.+24     	; 0x17e2 <__udivmodhi4>
    17ca:	06 d0       	rcall	.+12     	; 0x17d8 <__divmodhi4_neg1>
    17cc:	00 20       	and	r0, r0
    17ce:	1a f4       	brpl	.+6      	; 0x17d6 <__divmodhi4_exit>

000017d0 <__divmodhi4_neg2>:
    17d0:	70 95       	com	r23
    17d2:	61 95       	neg	r22
    17d4:	7f 4f       	sbci	r23, 0xFF	; 255

000017d6 <__divmodhi4_exit>:
    17d6:	08 95       	ret

000017d8 <__divmodhi4_neg1>:
    17d8:	f6 f7       	brtc	.-4      	; 0x17d6 <__divmodhi4_exit>
    17da:	90 95       	com	r25
    17dc:	81 95       	neg	r24
    17de:	9f 4f       	sbci	r25, 0xFF	; 255
    17e0:	08 95       	ret

000017e2 <__udivmodhi4>:
    17e2:	aa 1b       	sub	r26, r26
    17e4:	bb 1b       	sub	r27, r27
    17e6:	51 e1       	ldi	r21, 0x11	; 17
    17e8:	07 c0       	rjmp	.+14     	; 0x17f8 <__udivmodhi4_ep>

000017ea <__udivmodhi4_loop>:
    17ea:	aa 1f       	adc	r26, r26
    17ec:	bb 1f       	adc	r27, r27
    17ee:	a6 17       	cp	r26, r22
    17f0:	b7 07       	cpc	r27, r23
    17f2:	10 f0       	brcs	.+4      	; 0x17f8 <__udivmodhi4_ep>
    17f4:	a6 1b       	sub	r26, r22
    17f6:	b7 0b       	sbc	r27, r23

000017f8 <__udivmodhi4_ep>:
    17f8:	88 1f       	adc	r24, r24
    17fa:	99 1f       	adc	r25, r25
    17fc:	5a 95       	dec	r21
    17fe:	a9 f7       	brne	.-22     	; 0x17ea <__udivmodhi4_loop>
    1800:	80 95       	com	r24
    1802:	90 95       	com	r25
    1804:	bc 01       	movw	r22, r24
    1806:	cd 01       	movw	r24, r26
    1808:	08 95       	ret

0000180a <_exit>:
    180a:	f8 94       	cli

0000180c <__stop_program>:
    180c:	ff cf       	rjmp	.-2      	; 0x180c <__stop_program>
