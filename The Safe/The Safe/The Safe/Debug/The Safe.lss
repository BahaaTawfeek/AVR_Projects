
The Safe.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d40  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000006e  00800060  00000d40  00000db4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         0000135c  00000000  00000000  00000e24  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000045c  00000000  00000000  00002180  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  000025e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001017  00000000  00000000  00002720  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000067f  00000000  00000000  00003737  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000bf9  00000000  00000000  00003db6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002c0  00000000  00000000  000049b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000396  00000000  00000000  00004c70  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000aa4  00000000  00000000  00005006  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e4       	ldi	r30, 0x40	; 64
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 3c       	cpi	r26, 0xCE	; 206
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	ae ec       	ldi	r26, 0xCE	; 206
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 3c       	cpi	r26, 0xCE	; 206
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 50 04 	call	0x8a0	; 0x8a0 <main>
  8a:	0c 94 9e 06 	jmp	0xd3c	; 0xd3c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_vsetPinDir>:
 *Function Description : Set the direction of the given pin in the given port (direction 0 = input : 1 = output)
 */

void DIO_vsetPinDir(unsigned char portname,unsigned char pinnumber,unsigned char direction)
{
	switch(portname)
  92:	82 34       	cpi	r24, 0x42	; 66
  94:	51 f1       	breq	.+84     	; 0xea <DIO_vsetPinDir+0x58>
  96:	83 34       	cpi	r24, 0x43	; 67
  98:	20 f4       	brcc	.+8      	; 0xa2 <DIO_vsetPinDir+0x10>
  9a:	81 34       	cpi	r24, 0x41	; 65
  9c:	09 f0       	breq	.+2      	; 0xa0 <DIO_vsetPinDir+0xe>
  9e:	7b c0       	rjmp	.+246    	; 0x196 <DIO_vsetPinDir+0x104>
  a0:	07 c0       	rjmp	.+14     	; 0xb0 <DIO_vsetPinDir+0x1e>
  a2:	83 34       	cpi	r24, 0x43	; 67
  a4:	09 f4       	brne	.+2      	; 0xa8 <DIO_vsetPinDir+0x16>
  a6:	3e c0       	rjmp	.+124    	; 0x124 <DIO_vsetPinDir+0x92>
  a8:	84 34       	cpi	r24, 0x44	; 68
  aa:	09 f0       	breq	.+2      	; 0xae <DIO_vsetPinDir+0x1c>
  ac:	74 c0       	rjmp	.+232    	; 0x196 <DIO_vsetPinDir+0x104>
  ae:	57 c0       	rjmp	.+174    	; 0x15e <DIO_vsetPinDir+0xcc>
	{
		case 'A':
		if (direction == 1)
  b0:	41 30       	cpi	r20, 0x01	; 1
  b2:	69 f4       	brne	.+26     	; 0xce <DIO_vsetPinDir+0x3c>
			{
				SetBit(DDRA,pinnumber);     //Set the direction 1 = output of the given pin in port A as output
  b4:	2a b3       	in	r18, 0x1a	; 26
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	ac 01       	movw	r20, r24
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <DIO_vsetPinDir+0x30>
  be:	44 0f       	add	r20, r20
  c0:	55 1f       	adc	r21, r21
  c2:	6a 95       	dec	r22
  c4:	e2 f7       	brpl	.-8      	; 0xbe <DIO_vsetPinDir+0x2c>
  c6:	ba 01       	movw	r22, r20
  c8:	62 2b       	or	r22, r18
  ca:	6a bb       	out	0x1a, r22	; 26
  cc:	08 95       	ret
			}
		else
			{
				ClearBit(DDRA,pinnumber);    //Set the direction 0 = input of the given pin in port A as input
  ce:	2a b3       	in	r18, 0x1a	; 26
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	ac 01       	movw	r20, r24
  d6:	02 c0       	rjmp	.+4      	; 0xdc <DIO_vsetPinDir+0x4a>
  d8:	44 0f       	add	r20, r20
  da:	55 1f       	adc	r21, r21
  dc:	6a 95       	dec	r22
  de:	e2 f7       	brpl	.-8      	; 0xd8 <DIO_vsetPinDir+0x46>
  e0:	ba 01       	movw	r22, r20
  e2:	60 95       	com	r22
  e4:	62 23       	and	r22, r18
  e6:	6a bb       	out	0x1a, r22	; 26
  e8:	08 95       	ret
			}
		break;	
				  	
				  
		case 'B':
		if (direction == 1)
  ea:	41 30       	cpi	r20, 0x01	; 1
  ec:	69 f4       	brne	.+26     	; 0x108 <DIO_vsetPinDir+0x76>
			{
				SetBit(DDRB,pinnumber);     //Set the direction 1 = output of the given pin in port B as output
  ee:	27 b3       	in	r18, 0x17	; 23
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	ac 01       	movw	r20, r24
  f6:	02 c0       	rjmp	.+4      	; 0xfc <DIO_vsetPinDir+0x6a>
  f8:	44 0f       	add	r20, r20
  fa:	55 1f       	adc	r21, r21
  fc:	6a 95       	dec	r22
  fe:	e2 f7       	brpl	.-8      	; 0xf8 <DIO_vsetPinDir+0x66>
 100:	ba 01       	movw	r22, r20
 102:	62 2b       	or	r22, r18
 104:	67 bb       	out	0x17, r22	; 23
 106:	08 95       	ret
			}
		else
			{
				ClearBit(DDRB,pinnumber);    //Set the direction 0 = input of the given pin in port B as input
 108:	27 b3       	in	r18, 0x17	; 23
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	ac 01       	movw	r20, r24
 110:	02 c0       	rjmp	.+4      	; 0x116 <DIO_vsetPinDir+0x84>
 112:	44 0f       	add	r20, r20
 114:	55 1f       	adc	r21, r21
 116:	6a 95       	dec	r22
 118:	e2 f7       	brpl	.-8      	; 0x112 <DIO_vsetPinDir+0x80>
 11a:	ba 01       	movw	r22, r20
 11c:	60 95       	com	r22
 11e:	62 23       	and	r22, r18
 120:	67 bb       	out	0x17, r22	; 23
 122:	08 95       	ret
			}
		break;
				
		case 'C':
		if (direction == 1)
 124:	41 30       	cpi	r20, 0x01	; 1
 126:	69 f4       	brne	.+26     	; 0x142 <DIO_vsetPinDir+0xb0>
			{
				SetBit(DDRC,pinnumber);     //Set the direction 1 = output of the given pin in port C as output
 128:	24 b3       	in	r18, 0x14	; 20
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	ac 01       	movw	r20, r24
 130:	02 c0       	rjmp	.+4      	; 0x136 <DIO_vsetPinDir+0xa4>
 132:	44 0f       	add	r20, r20
 134:	55 1f       	adc	r21, r21
 136:	6a 95       	dec	r22
 138:	e2 f7       	brpl	.-8      	; 0x132 <DIO_vsetPinDir+0xa0>
 13a:	ba 01       	movw	r22, r20
 13c:	62 2b       	or	r22, r18
 13e:	64 bb       	out	0x14, r22	; 20
 140:	08 95       	ret
			}
		else
			{
				ClearBit(DDRC,pinnumber);    //Set the direction 0 = input of the given pin in port C as input
 142:	24 b3       	in	r18, 0x14	; 20
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	ac 01       	movw	r20, r24
 14a:	02 c0       	rjmp	.+4      	; 0x150 <DIO_vsetPinDir+0xbe>
 14c:	44 0f       	add	r20, r20
 14e:	55 1f       	adc	r21, r21
 150:	6a 95       	dec	r22
 152:	e2 f7       	brpl	.-8      	; 0x14c <DIO_vsetPinDir+0xba>
 154:	ba 01       	movw	r22, r20
 156:	60 95       	com	r22
 158:	62 23       	and	r22, r18
 15a:	64 bb       	out	0x14, r22	; 20
 15c:	08 95       	ret
			}
		break;
				
		case 'D':
		if (direction == 1)
 15e:	41 30       	cpi	r20, 0x01	; 1
 160:	69 f4       	brne	.+26     	; 0x17c <DIO_vsetPinDir+0xea>
			{
				SetBit(DDRD,pinnumber);     //Set the direction 1 = output of the given pin in port D as output
 162:	21 b3       	in	r18, 0x11	; 17
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	ac 01       	movw	r20, r24
 16a:	02 c0       	rjmp	.+4      	; 0x170 <DIO_vsetPinDir+0xde>
 16c:	44 0f       	add	r20, r20
 16e:	55 1f       	adc	r21, r21
 170:	6a 95       	dec	r22
 172:	e2 f7       	brpl	.-8      	; 0x16c <DIO_vsetPinDir+0xda>
 174:	ba 01       	movw	r22, r20
 176:	62 2b       	or	r22, r18
 178:	61 bb       	out	0x11, r22	; 17
 17a:	08 95       	ret
			}
		else
			{
				ClearBit(DDRD,pinnumber);    //Set the direction  0 = input of the given pin in port D as input
 17c:	21 b3       	in	r18, 0x11	; 17
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	ac 01       	movw	r20, r24
 184:	02 c0       	rjmp	.+4      	; 0x18a <DIO_vsetPinDir+0xf8>
 186:	44 0f       	add	r20, r20
 188:	55 1f       	adc	r21, r21
 18a:	6a 95       	dec	r22
 18c:	e2 f7       	brpl	.-8      	; 0x186 <DIO_vsetPinDir+0xf4>
 18e:	ba 01       	movw	r22, r20
 190:	60 95       	com	r22
 192:	62 23       	and	r22, r18
 194:	61 bb       	out	0x11, r22	; 17
 196:	08 95       	ret

00000198 <DIO_vsetPortDir>:
 *Function Description : set the direction of whole port . (port direction 0 = input port : 1 = output port)
 */

void DIO_vsetPortDir(unsigned char portname,unsigned char direction)
{
	switch(portname)
 198:	82 34       	cpi	r24, 0x42	; 66
 19a:	61 f0       	breq	.+24     	; 0x1b4 <DIO_vsetPortDir+0x1c>
 19c:	83 34       	cpi	r24, 0x43	; 67
 19e:	18 f4       	brcc	.+6      	; 0x1a6 <DIO_vsetPortDir+0xe>
 1a0:	81 34       	cpi	r24, 0x41	; 65
 1a2:	69 f4       	brne	.+26     	; 0x1be <DIO_vsetPortDir+0x26>
 1a4:	05 c0       	rjmp	.+10     	; 0x1b0 <DIO_vsetPortDir+0x18>
 1a6:	83 34       	cpi	r24, 0x43	; 67
 1a8:	39 f0       	breq	.+14     	; 0x1b8 <DIO_vsetPortDir+0x20>
 1aa:	84 34       	cpi	r24, 0x44	; 68
 1ac:	41 f4       	brne	.+16     	; 0x1be <DIO_vsetPortDir+0x26>
 1ae:	06 c0       	rjmp	.+12     	; 0x1bc <DIO_vsetPortDir+0x24>
	{
		case 'A':
		DDRA=direction;    //set the direction of port A		
 1b0:	6a bb       	out	0x1a, r22	; 26
		break;
 1b2:	08 95       	ret
		
		case 'B':
		DDRB=direction;    //set the direction of port B
 1b4:	67 bb       	out	0x17, r22	; 23
		break;
 1b6:	08 95       	ret
		
		case 'C':
		DDRC=direction;    //set the direction of port C
 1b8:	64 bb       	out	0x14, r22	; 20
		break;
 1ba:	08 95       	ret
		
		case 'D':
		DDRD=direction;    //set the direction of port D	
 1bc:	61 bb       	out	0x11, r22	; 17
 1be:	08 95       	ret

000001c0 <DIO_vwritePin>:
 *Function Description : Set the value of the given pin in the given port (outputvalue 0 = low : 1 = high)
 */

void DIO_vwritePin(unsigned char portname,unsigned char pinnumber,unsigned char value)
{
	switch(portname)
 1c0:	82 34       	cpi	r24, 0x42	; 66
 1c2:	51 f1       	breq	.+84     	; 0x218 <DIO_vwritePin+0x58>
 1c4:	83 34       	cpi	r24, 0x43	; 67
 1c6:	20 f4       	brcc	.+8      	; 0x1d0 <DIO_vwritePin+0x10>
 1c8:	81 34       	cpi	r24, 0x41	; 65
 1ca:	09 f0       	breq	.+2      	; 0x1ce <DIO_vwritePin+0xe>
 1cc:	7b c0       	rjmp	.+246    	; 0x2c4 <DIO_vwritePin+0x104>
 1ce:	07 c0       	rjmp	.+14     	; 0x1de <DIO_vwritePin+0x1e>
 1d0:	83 34       	cpi	r24, 0x43	; 67
 1d2:	09 f4       	brne	.+2      	; 0x1d6 <DIO_vwritePin+0x16>
 1d4:	3e c0       	rjmp	.+124    	; 0x252 <DIO_vwritePin+0x92>
 1d6:	84 34       	cpi	r24, 0x44	; 68
 1d8:	09 f0       	breq	.+2      	; 0x1dc <DIO_vwritePin+0x1c>
 1da:	74 c0       	rjmp	.+232    	; 0x2c4 <DIO_vwritePin+0x104>
 1dc:	57 c0       	rjmp	.+174    	; 0x28c <DIO_vwritePin+0xcc>
	{
		case 'A':
		if (value==1)
 1de:	41 30       	cpi	r20, 0x01	; 1
 1e0:	69 f4       	brne	.+26     	; 0x1fc <DIO_vwritePin+0x3c>
		{
			SetBit(PORTA,pinnumber);  //Set the value of the given pin in port A as High
 1e2:	2b b3       	in	r18, 0x1b	; 27
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	ac 01       	movw	r20, r24
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <DIO_vwritePin+0x30>
 1ec:	44 0f       	add	r20, r20
 1ee:	55 1f       	adc	r21, r21
 1f0:	6a 95       	dec	r22
 1f2:	e2 f7       	brpl	.-8      	; 0x1ec <DIO_vwritePin+0x2c>
 1f4:	ba 01       	movw	r22, r20
 1f6:	62 2b       	or	r22, r18
 1f8:	6b bb       	out	0x1b, r22	; 27
 1fa:	08 95       	ret
		}
		else
		{
			ClearBit(PORTA,pinnumber);  //Set the value of the given pin in port A as Low
 1fc:	2b b3       	in	r18, 0x1b	; 27
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	ac 01       	movw	r20, r24
 204:	02 c0       	rjmp	.+4      	; 0x20a <DIO_vwritePin+0x4a>
 206:	44 0f       	add	r20, r20
 208:	55 1f       	adc	r21, r21
 20a:	6a 95       	dec	r22
 20c:	e2 f7       	brpl	.-8      	; 0x206 <DIO_vwritePin+0x46>
 20e:	ba 01       	movw	r22, r20
 210:	60 95       	com	r22
 212:	62 23       	and	r22, r18
 214:	6b bb       	out	0x1b, r22	; 27
 216:	08 95       	ret
		}
		break;
		
		case 'B':
		if (value==1)
 218:	41 30       	cpi	r20, 0x01	; 1
 21a:	69 f4       	brne	.+26     	; 0x236 <DIO_vwritePin+0x76>
		{
			SetBit(PORTB,pinnumber);  //Set the value of the given pin in port B as High
 21c:	28 b3       	in	r18, 0x18	; 24
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	ac 01       	movw	r20, r24
 224:	02 c0       	rjmp	.+4      	; 0x22a <DIO_vwritePin+0x6a>
 226:	44 0f       	add	r20, r20
 228:	55 1f       	adc	r21, r21
 22a:	6a 95       	dec	r22
 22c:	e2 f7       	brpl	.-8      	; 0x226 <DIO_vwritePin+0x66>
 22e:	ba 01       	movw	r22, r20
 230:	62 2b       	or	r22, r18
 232:	68 bb       	out	0x18, r22	; 24
 234:	08 95       	ret
		}
		else
		{
			ClearBit(PORTB,pinnumber);  //Set the value of the given pin in port B as Low
 236:	28 b3       	in	r18, 0x18	; 24
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	ac 01       	movw	r20, r24
 23e:	02 c0       	rjmp	.+4      	; 0x244 <DIO_vwritePin+0x84>
 240:	44 0f       	add	r20, r20
 242:	55 1f       	adc	r21, r21
 244:	6a 95       	dec	r22
 246:	e2 f7       	brpl	.-8      	; 0x240 <DIO_vwritePin+0x80>
 248:	ba 01       	movw	r22, r20
 24a:	60 95       	com	r22
 24c:	62 23       	and	r22, r18
 24e:	68 bb       	out	0x18, r22	; 24
 250:	08 95       	ret
		}
		break;
		
		case 'C':
		if (value==1)
 252:	41 30       	cpi	r20, 0x01	; 1
 254:	69 f4       	brne	.+26     	; 0x270 <DIO_vwritePin+0xb0>
		{
			SetBit(PORTC,pinnumber);  //Set the value of the given pin in port C as High
 256:	25 b3       	in	r18, 0x15	; 21
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	ac 01       	movw	r20, r24
 25e:	02 c0       	rjmp	.+4      	; 0x264 <DIO_vwritePin+0xa4>
 260:	44 0f       	add	r20, r20
 262:	55 1f       	adc	r21, r21
 264:	6a 95       	dec	r22
 266:	e2 f7       	brpl	.-8      	; 0x260 <DIO_vwritePin+0xa0>
 268:	ba 01       	movw	r22, r20
 26a:	62 2b       	or	r22, r18
 26c:	65 bb       	out	0x15, r22	; 21
 26e:	08 95       	ret
		}
		else
		{
			ClearBit(PORTC,pinnumber);  //Set the value of the given pin in port C as Low
 270:	25 b3       	in	r18, 0x15	; 21
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	ac 01       	movw	r20, r24
 278:	02 c0       	rjmp	.+4      	; 0x27e <DIO_vwritePin+0xbe>
 27a:	44 0f       	add	r20, r20
 27c:	55 1f       	adc	r21, r21
 27e:	6a 95       	dec	r22
 280:	e2 f7       	brpl	.-8      	; 0x27a <DIO_vwritePin+0xba>
 282:	ba 01       	movw	r22, r20
 284:	60 95       	com	r22
 286:	62 23       	and	r22, r18
 288:	65 bb       	out	0x15, r22	; 21
 28a:	08 95       	ret
		}
		break;
		
		case 'D':
		if (value==1)
 28c:	41 30       	cpi	r20, 0x01	; 1
 28e:	69 f4       	brne	.+26     	; 0x2aa <DIO_vwritePin+0xea>
		{
			SetBit(PORTD,pinnumber);  //Set the value of the given pin in port D as High
 290:	22 b3       	in	r18, 0x12	; 18
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	ac 01       	movw	r20, r24
 298:	02 c0       	rjmp	.+4      	; 0x29e <DIO_vwritePin+0xde>
 29a:	44 0f       	add	r20, r20
 29c:	55 1f       	adc	r21, r21
 29e:	6a 95       	dec	r22
 2a0:	e2 f7       	brpl	.-8      	; 0x29a <DIO_vwritePin+0xda>
 2a2:	ba 01       	movw	r22, r20
 2a4:	62 2b       	or	r22, r18
 2a6:	62 bb       	out	0x12, r22	; 18
 2a8:	08 95       	ret
		}
		else
		{
			ClearBit(PORTD,pinnumber);  //Set the value of the given pin in port D as Low
 2aa:	22 b3       	in	r18, 0x12	; 18
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	ac 01       	movw	r20, r24
 2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <DIO_vwritePin+0xf8>
 2b4:	44 0f       	add	r20, r20
 2b6:	55 1f       	adc	r21, r21
 2b8:	6a 95       	dec	r22
 2ba:	e2 f7       	brpl	.-8      	; 0x2b4 <DIO_vwritePin+0xf4>
 2bc:	ba 01       	movw	r22, r20
 2be:	60 95       	com	r22
 2c0:	62 23       	and	r22, r18
 2c2:	62 bb       	out	0x12, r22	; 18
 2c4:	08 95       	ret

000002c6 <DIO_vwritePort>:
 *Function Description : Write the value to all port pins (outputvalue 0 = low : 1 = high)
 */

void DIO_vwritePort(unsigned char portname,unsigned char value)
{
	switch(portname)
 2c6:	82 34       	cpi	r24, 0x42	; 66
 2c8:	61 f0       	breq	.+24     	; 0x2e2 <DIO_vwritePort+0x1c>
 2ca:	83 34       	cpi	r24, 0x43	; 67
 2cc:	18 f4       	brcc	.+6      	; 0x2d4 <DIO_vwritePort+0xe>
 2ce:	81 34       	cpi	r24, 0x41	; 65
 2d0:	69 f4       	brne	.+26     	; 0x2ec <DIO_vwritePort+0x26>
 2d2:	05 c0       	rjmp	.+10     	; 0x2de <DIO_vwritePort+0x18>
 2d4:	83 34       	cpi	r24, 0x43	; 67
 2d6:	39 f0       	breq	.+14     	; 0x2e6 <DIO_vwritePort+0x20>
 2d8:	84 34       	cpi	r24, 0x44	; 68
 2da:	41 f4       	brne	.+16     	; 0x2ec <DIO_vwritePort+0x26>
 2dc:	06 c0       	rjmp	.+12     	; 0x2ea <DIO_vwritePort+0x24>
	{
		case 'A':
		PORTA=value;   //Write the given value to the port A
 2de:	6b bb       	out	0x1b, r22	; 27
		break;
 2e0:	08 95       	ret
		
		case 'B':
		PORTB=value;   //Write the given value to the port B
 2e2:	68 bb       	out	0x18, r22	; 24
		break;
 2e4:	08 95       	ret
		
		case 'C':
		PORTC=value;   //Write the given value to the port C
 2e6:	65 bb       	out	0x15, r22	; 21
		break;
 2e8:	08 95       	ret
		
		case 'D':
		PORTD=value;   //Write the given value to the port D
 2ea:	62 bb       	out	0x12, r22	; 18
 2ec:	08 95       	ret

000002ee <DIO_u8readPin>:
 */

unsigned char DIO_u8readPin(unsigned char portname,unsigned char pinnumber)
{
	unsigned char return_value=0;
	switch(portname)
 2ee:	82 34       	cpi	r24, 0x42	; 66
 2f0:	f1 f0       	breq	.+60     	; 0x32e <DIO_u8readPin+0x40>
 2f2:	83 34       	cpi	r24, 0x43	; 67
 2f4:	20 f4       	brcc	.+8      	; 0x2fe <DIO_u8readPin+0x10>
 2f6:	81 34       	cpi	r24, 0x41	; 65
 2f8:	09 f0       	breq	.+2      	; 0x2fc <DIO_u8readPin+0xe>
 2fa:	4f c0       	rjmp	.+158    	; 0x39a <DIO_u8readPin+0xac>
 2fc:	06 c0       	rjmp	.+12     	; 0x30a <DIO_u8readPin+0x1c>
 2fe:	83 34       	cpi	r24, 0x43	; 67
 300:	41 f1       	breq	.+80     	; 0x352 <DIO_u8readPin+0x64>
 302:	84 34       	cpi	r24, 0x44	; 68
 304:	09 f0       	breq	.+2      	; 0x308 <DIO_u8readPin+0x1a>
 306:	49 c0       	rjmp	.+146    	; 0x39a <DIO_u8readPin+0xac>
 308:	36 c0       	rjmp	.+108    	; 0x376 <DIO_u8readPin+0x88>
	{
		case 'A':
		return_value = ReadBit(PINA,pinnumber);   //Read the value from the given pin in port A
 30a:	29 b3       	in	r18, 0x19	; 25
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	06 2e       	mov	r0, r22
 312:	02 c0       	rjmp	.+4      	; 0x318 <DIO_u8readPin+0x2a>
 314:	88 0f       	add	r24, r24
 316:	99 1f       	adc	r25, r25
 318:	0a 94       	dec	r0
 31a:	e2 f7       	brpl	.-8      	; 0x314 <DIO_u8readPin+0x26>
 31c:	30 e0       	ldi	r19, 0x00	; 0
 31e:	82 23       	and	r24, r18
 320:	93 23       	and	r25, r19
 322:	02 c0       	rjmp	.+4      	; 0x328 <DIO_u8readPin+0x3a>
 324:	95 95       	asr	r25
 326:	87 95       	ror	r24
 328:	6a 95       	dec	r22
 32a:	e2 f7       	brpl	.-8      	; 0x324 <DIO_u8readPin+0x36>
		break;
 32c:	08 95       	ret
		
		case 'B':
		return_value = ReadBit(PINB,pinnumber);   //Read the value from the given pin in port B
 32e:	26 b3       	in	r18, 0x16	; 22
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	06 2e       	mov	r0, r22
 336:	02 c0       	rjmp	.+4      	; 0x33c <DIO_u8readPin+0x4e>
 338:	88 0f       	add	r24, r24
 33a:	99 1f       	adc	r25, r25
 33c:	0a 94       	dec	r0
 33e:	e2 f7       	brpl	.-8      	; 0x338 <DIO_u8readPin+0x4a>
 340:	30 e0       	ldi	r19, 0x00	; 0
 342:	82 23       	and	r24, r18
 344:	93 23       	and	r25, r19
 346:	02 c0       	rjmp	.+4      	; 0x34c <DIO_u8readPin+0x5e>
 348:	95 95       	asr	r25
 34a:	87 95       	ror	r24
 34c:	6a 95       	dec	r22
 34e:	e2 f7       	brpl	.-8      	; 0x348 <DIO_u8readPin+0x5a>
		break;
 350:	08 95       	ret
		
		case 'C':
		return_value = ReadBit(PINC,pinnumber);   //Read the value from the given pin in port C
 352:	23 b3       	in	r18, 0x13	; 19
 354:	81 e0       	ldi	r24, 0x01	; 1
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	06 2e       	mov	r0, r22
 35a:	02 c0       	rjmp	.+4      	; 0x360 <DIO_u8readPin+0x72>
 35c:	88 0f       	add	r24, r24
 35e:	99 1f       	adc	r25, r25
 360:	0a 94       	dec	r0
 362:	e2 f7       	brpl	.-8      	; 0x35c <DIO_u8readPin+0x6e>
 364:	30 e0       	ldi	r19, 0x00	; 0
 366:	82 23       	and	r24, r18
 368:	93 23       	and	r25, r19
 36a:	02 c0       	rjmp	.+4      	; 0x370 <DIO_u8readPin+0x82>
 36c:	95 95       	asr	r25
 36e:	87 95       	ror	r24
 370:	6a 95       	dec	r22
 372:	e2 f7       	brpl	.-8      	; 0x36c <DIO_u8readPin+0x7e>
		break;
 374:	08 95       	ret
		
		case 'D':
		return_value = ReadBit(PIND,pinnumber);   //Read the value from the given pin in port D
 376:	20 b3       	in	r18, 0x10	; 16
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	06 2e       	mov	r0, r22
 37e:	02 c0       	rjmp	.+4      	; 0x384 <DIO_u8readPin+0x96>
 380:	88 0f       	add	r24, r24
 382:	99 1f       	adc	r25, r25
 384:	0a 94       	dec	r0
 386:	e2 f7       	brpl	.-8      	; 0x380 <DIO_u8readPin+0x92>
 388:	30 e0       	ldi	r19, 0x00	; 0
 38a:	82 23       	and	r24, r18
 38c:	93 23       	and	r25, r19
 38e:	02 c0       	rjmp	.+4      	; 0x394 <DIO_u8readPin+0xa6>
 390:	95 95       	asr	r25
 392:	87 95       	ror	r24
 394:	6a 95       	dec	r22
 396:	e2 f7       	brpl	.-8      	; 0x390 <DIO_u8readPin+0xa2>
		break;
 398:	08 95       	ret
 *Function Description : Returns 1 if the value of the given pin is high and zero if the value is low
 */

unsigned char DIO_u8readPin(unsigned char portname,unsigned char pinnumber)
{
	unsigned char return_value=0;
 39a:	80 e0       	ldi	r24, 0x00	; 0
								
	}	// end of switch 
		
	return return_value;
	
}// end of Function	
 39c:	08 95       	ret

0000039e <DIO_u8readPort>:
 */

unsigned char DIO_u8readPort(unsigned char portname)
{
	unsigned char return_val=0;
	switch(portname)
 39e:	82 34       	cpi	r24, 0x42	; 66
 3a0:	61 f0       	breq	.+24     	; 0x3ba <DIO_u8readPort+0x1c>
 3a2:	83 34       	cpi	r24, 0x43	; 67
 3a4:	18 f4       	brcc	.+6      	; 0x3ac <DIO_u8readPort+0xe>
 3a6:	81 34       	cpi	r24, 0x41	; 65
 3a8:	71 f4       	brne	.+28     	; 0x3c6 <DIO_u8readPort+0x28>
 3aa:	05 c0       	rjmp	.+10     	; 0x3b6 <DIO_u8readPort+0x18>
 3ac:	83 34       	cpi	r24, 0x43	; 67
 3ae:	39 f0       	breq	.+14     	; 0x3be <DIO_u8readPort+0x20>
 3b0:	84 34       	cpi	r24, 0x44	; 68
 3b2:	49 f4       	brne	.+18     	; 0x3c6 <DIO_u8readPort+0x28>
 3b4:	06 c0       	rjmp	.+12     	; 0x3c2 <DIO_u8readPort+0x24>
	{
		case 'A':
		return_val = PINA; // read the value of port A
 3b6:	89 b3       	in	r24, 0x19	; 25
		break;
 3b8:	08 95       	ret
		
		case 'B':
		return_val = PINB; // read the value of port B
 3ba:	86 b3       	in	r24, 0x16	; 22
		break;
 3bc:	08 95       	ret
		
		case 'C':
		return_val = PINC; // read the value of port C
 3be:	83 b3       	in	r24, 0x13	; 19
		break;
 3c0:	08 95       	ret
		
		case 'D':
		return_val = PIND; // read the value of port D
 3c2:	80 b3       	in	r24, 0x10	; 16
		break;
 3c4:	08 95       	ret
 *Function Description : Read the value of the given  port
 */

unsigned char DIO_u8readPort(unsigned char portname)
{
	unsigned char return_val=0;
 3c6:	80 e0       	ldi	r24, 0x00	; 0
		
	}// end of switch 
		
	return return_val;
	
}// end of Function	
 3c8:	08 95       	ret

000003ca <DIO_vtogglePin>:
 *Function Description : Reverse the value of the given pin in the given port.
 */

void DIO_vtogglePin(unsigned char portname,unsigned char pinnumber)
{
	switch(portname)
 3ca:	82 34       	cpi	r24, 0x42	; 66
 3cc:	b9 f0       	breq	.+46     	; 0x3fc <DIO_vtogglePin+0x32>
 3ce:	83 34       	cpi	r24, 0x43	; 67
 3d0:	18 f4       	brcc	.+6      	; 0x3d8 <DIO_vtogglePin+0xe>
 3d2:	81 34       	cpi	r24, 0x41	; 65
 3d4:	c9 f5       	brne	.+114    	; 0x448 <DIO_vtogglePin+0x7e>
 3d6:	05 c0       	rjmp	.+10     	; 0x3e2 <DIO_vtogglePin+0x18>
 3d8:	83 34       	cpi	r24, 0x43	; 67
 3da:	e9 f0       	breq	.+58     	; 0x416 <DIO_vtogglePin+0x4c>
 3dc:	84 34       	cpi	r24, 0x44	; 68
 3de:	a1 f5       	brne	.+104    	; 0x448 <DIO_vtogglePin+0x7e>
 3e0:	27 c0       	rjmp	.+78     	; 0x430 <DIO_vtogglePin+0x66>
	{
		case 'A':
		ToggleBit(PORTA,pinnumber);   //Toggle the value of the given pin in port A
 3e2:	2b b3       	in	r18, 0x1b	; 27
 3e4:	81 e0       	ldi	r24, 0x01	; 1
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	ac 01       	movw	r20, r24
 3ea:	02 c0       	rjmp	.+4      	; 0x3f0 <DIO_vtogglePin+0x26>
 3ec:	44 0f       	add	r20, r20
 3ee:	55 1f       	adc	r21, r21
 3f0:	6a 95       	dec	r22
 3f2:	e2 f7       	brpl	.-8      	; 0x3ec <DIO_vtogglePin+0x22>
 3f4:	ba 01       	movw	r22, r20
 3f6:	62 27       	eor	r22, r18
 3f8:	6b bb       	out	0x1b, r22	; 27
		break;
 3fa:	08 95       	ret
		
		case 'B':
		ToggleBit(PORTB,pinnumber);   //Toggle the value of the given pin in port B
 3fc:	28 b3       	in	r18, 0x18	; 24
 3fe:	81 e0       	ldi	r24, 0x01	; 1
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	ac 01       	movw	r20, r24
 404:	02 c0       	rjmp	.+4      	; 0x40a <DIO_vtogglePin+0x40>
 406:	44 0f       	add	r20, r20
 408:	55 1f       	adc	r21, r21
 40a:	6a 95       	dec	r22
 40c:	e2 f7       	brpl	.-8      	; 0x406 <DIO_vtogglePin+0x3c>
 40e:	ba 01       	movw	r22, r20
 410:	62 27       	eor	r22, r18
 412:	68 bb       	out	0x18, r22	; 24
		break;
 414:	08 95       	ret
		
		case 'C':
		ToggleBit(PORTC,pinnumber);   //Toggle the value of the given pin in port C
 416:	25 b3       	in	r18, 0x15	; 21
 418:	81 e0       	ldi	r24, 0x01	; 1
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	ac 01       	movw	r20, r24
 41e:	02 c0       	rjmp	.+4      	; 0x424 <DIO_vtogglePin+0x5a>
 420:	44 0f       	add	r20, r20
 422:	55 1f       	adc	r21, r21
 424:	6a 95       	dec	r22
 426:	e2 f7       	brpl	.-8      	; 0x420 <DIO_vtogglePin+0x56>
 428:	ba 01       	movw	r22, r20
 42a:	62 27       	eor	r22, r18
 42c:	65 bb       	out	0x15, r22	; 21
		break;
 42e:	08 95       	ret
		
		case 'D':
		ToggleBit(PORTD,pinnumber);   //Toggle the value of the given pin in port D
 430:	22 b3       	in	r18, 0x12	; 18
 432:	81 e0       	ldi	r24, 0x01	; 1
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	ac 01       	movw	r20, r24
 438:	02 c0       	rjmp	.+4      	; 0x43e <DIO_vtogglePin+0x74>
 43a:	44 0f       	add	r20, r20
 43c:	55 1f       	adc	r21, r21
 43e:	6a 95       	dec	r22
 440:	e2 f7       	brpl	.-8      	; 0x43a <DIO_vtogglePin+0x70>
 442:	ba 01       	movw	r22, r20
 444:	62 27       	eor	r22, r18
 446:	62 bb       	out	0x12, r22	; 18
 448:	08 95       	ret

0000044a <DIO_vconnectPullup>:
 *Function Description : : Connect and disconnect pull up resistor to the given pin at the given port 
 */

void DIO_vconnectPullup(char portname ,char pinnumber, char connect_pullup)
{
	switch(portname)
 44a:	82 34       	cpi	r24, 0x42	; 66
 44c:	51 f1       	breq	.+84     	; 0x4a2 <DIO_vconnectPullup+0x58>
 44e:	83 34       	cpi	r24, 0x43	; 67
 450:	20 f4       	brcc	.+8      	; 0x45a <DIO_vconnectPullup+0x10>
 452:	81 34       	cpi	r24, 0x41	; 65
 454:	09 f0       	breq	.+2      	; 0x458 <DIO_vconnectPullup+0xe>
 456:	7b c0       	rjmp	.+246    	; 0x54e <DIO_vconnectPullup+0x104>
 458:	07 c0       	rjmp	.+14     	; 0x468 <DIO_vconnectPullup+0x1e>
 45a:	83 34       	cpi	r24, 0x43	; 67
 45c:	09 f4       	brne	.+2      	; 0x460 <DIO_vconnectPullup+0x16>
 45e:	3e c0       	rjmp	.+124    	; 0x4dc <DIO_vconnectPullup+0x92>
 460:	84 34       	cpi	r24, 0x44	; 68
 462:	09 f0       	breq	.+2      	; 0x466 <DIO_vconnectPullup+0x1c>
 464:	74 c0       	rjmp	.+232    	; 0x54e <DIO_vconnectPullup+0x104>
 466:	57 c0       	rjmp	.+174    	; 0x516 <DIO_vconnectPullup+0xcc>
	{
		case 'A':
		if(connect_pullup==1)
 468:	41 30       	cpi	r20, 0x01	; 1
 46a:	69 f4       	brne	.+26     	; 0x486 <DIO_vconnectPullup+0x3c>
		{
			SetBit(PORTA,pinnumber);
 46c:	2b b3       	in	r18, 0x1b	; 27
 46e:	81 e0       	ldi	r24, 0x01	; 1
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	ac 01       	movw	r20, r24
 474:	02 c0       	rjmp	.+4      	; 0x47a <DIO_vconnectPullup+0x30>
 476:	44 0f       	add	r20, r20
 478:	55 1f       	adc	r21, r21
 47a:	6a 95       	dec	r22
 47c:	e2 f7       	brpl	.-8      	; 0x476 <DIO_vconnectPullup+0x2c>
 47e:	ba 01       	movw	r22, r20
 480:	62 2b       	or	r22, r18
 482:	6b bb       	out	0x1b, r22	; 27
 484:	08 95       	ret
		}
		else
		{
			ClearBit(PORTA,pinnumber);
 486:	2b b3       	in	r18, 0x1b	; 27
 488:	81 e0       	ldi	r24, 0x01	; 1
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	ac 01       	movw	r20, r24
 48e:	02 c0       	rjmp	.+4      	; 0x494 <DIO_vconnectPullup+0x4a>
 490:	44 0f       	add	r20, r20
 492:	55 1f       	adc	r21, r21
 494:	6a 95       	dec	r22
 496:	e2 f7       	brpl	.-8      	; 0x490 <DIO_vconnectPullup+0x46>
 498:	ba 01       	movw	r22, r20
 49a:	60 95       	com	r22
 49c:	62 23       	and	r22, r18
 49e:	6b bb       	out	0x1b, r22	; 27
 4a0:	08 95       	ret
		}
		break;
		
		case 'B':
		if(connect_pullup==1)
 4a2:	41 30       	cpi	r20, 0x01	; 1
 4a4:	69 f4       	brne	.+26     	; 0x4c0 <DIO_vconnectPullup+0x76>
		{
			SetBit(PORTB,pinnumber);
 4a6:	28 b3       	in	r18, 0x18	; 24
 4a8:	81 e0       	ldi	r24, 0x01	; 1
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	ac 01       	movw	r20, r24
 4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <DIO_vconnectPullup+0x6a>
 4b0:	44 0f       	add	r20, r20
 4b2:	55 1f       	adc	r21, r21
 4b4:	6a 95       	dec	r22
 4b6:	e2 f7       	brpl	.-8      	; 0x4b0 <DIO_vconnectPullup+0x66>
 4b8:	ba 01       	movw	r22, r20
 4ba:	62 2b       	or	r22, r18
 4bc:	68 bb       	out	0x18, r22	; 24
 4be:	08 95       	ret
		}
		else
		{
			ClearBit(PORTB,pinnumber);
 4c0:	28 b3       	in	r18, 0x18	; 24
 4c2:	81 e0       	ldi	r24, 0x01	; 1
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	ac 01       	movw	r20, r24
 4c8:	02 c0       	rjmp	.+4      	; 0x4ce <DIO_vconnectPullup+0x84>
 4ca:	44 0f       	add	r20, r20
 4cc:	55 1f       	adc	r21, r21
 4ce:	6a 95       	dec	r22
 4d0:	e2 f7       	brpl	.-8      	; 0x4ca <DIO_vconnectPullup+0x80>
 4d2:	ba 01       	movw	r22, r20
 4d4:	60 95       	com	r22
 4d6:	62 23       	and	r22, r18
 4d8:	68 bb       	out	0x18, r22	; 24
 4da:	08 95       	ret
		}
		break;
		
		case 'C':
		if(connect_pullup==1)
 4dc:	41 30       	cpi	r20, 0x01	; 1
 4de:	69 f4       	brne	.+26     	; 0x4fa <DIO_vconnectPullup+0xb0>
		{
			SetBit(PORTC,pinnumber);
 4e0:	25 b3       	in	r18, 0x15	; 21
 4e2:	81 e0       	ldi	r24, 0x01	; 1
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	ac 01       	movw	r20, r24
 4e8:	02 c0       	rjmp	.+4      	; 0x4ee <DIO_vconnectPullup+0xa4>
 4ea:	44 0f       	add	r20, r20
 4ec:	55 1f       	adc	r21, r21
 4ee:	6a 95       	dec	r22
 4f0:	e2 f7       	brpl	.-8      	; 0x4ea <DIO_vconnectPullup+0xa0>
 4f2:	ba 01       	movw	r22, r20
 4f4:	62 2b       	or	r22, r18
 4f6:	65 bb       	out	0x15, r22	; 21
 4f8:	08 95       	ret
			
		}
		else
		{
			ClearBit(PORTC,pinnumber);
 4fa:	25 b3       	in	r18, 0x15	; 21
 4fc:	81 e0       	ldi	r24, 0x01	; 1
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	ac 01       	movw	r20, r24
 502:	02 c0       	rjmp	.+4      	; 0x508 <DIO_vconnectPullup+0xbe>
 504:	44 0f       	add	r20, r20
 506:	55 1f       	adc	r21, r21
 508:	6a 95       	dec	r22
 50a:	e2 f7       	brpl	.-8      	; 0x504 <DIO_vconnectPullup+0xba>
 50c:	ba 01       	movw	r22, r20
 50e:	60 95       	com	r22
 510:	62 23       	and	r22, r18
 512:	65 bb       	out	0x15, r22	; 21
 514:	08 95       	ret
		}
		break;
		
		case 'D':
		if(connect_pullup==1)
 516:	41 30       	cpi	r20, 0x01	; 1
 518:	69 f4       	brne	.+26     	; 0x534 <DIO_vconnectPullup+0xea>
		{
			SetBit(PORTD,pinnumber);
 51a:	22 b3       	in	r18, 0x12	; 18
 51c:	81 e0       	ldi	r24, 0x01	; 1
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	ac 01       	movw	r20, r24
 522:	02 c0       	rjmp	.+4      	; 0x528 <DIO_vconnectPullup+0xde>
 524:	44 0f       	add	r20, r20
 526:	55 1f       	adc	r21, r21
 528:	6a 95       	dec	r22
 52a:	e2 f7       	brpl	.-8      	; 0x524 <DIO_vconnectPullup+0xda>
 52c:	ba 01       	movw	r22, r20
 52e:	62 2b       	or	r22, r18
 530:	62 bb       	out	0x12, r22	; 18
 532:	08 95       	ret
			
		}
		else
		{
			ClearBit(PORTD,pinnumber);
 534:	22 b3       	in	r18, 0x12	; 18
 536:	81 e0       	ldi	r24, 0x01	; 1
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	ac 01       	movw	r20, r24
 53c:	02 c0       	rjmp	.+4      	; 0x542 <DIO_vconnectPullup+0xf8>
 53e:	44 0f       	add	r20, r20
 540:	55 1f       	adc	r21, r21
 542:	6a 95       	dec	r22
 544:	e2 f7       	brpl	.-8      	; 0x53e <DIO_vconnectPullup+0xf4>
 546:	ba 01       	movw	r22, r20
 548:	60 95       	com	r22
 54a:	62 23       	and	r22, r18
 54c:	62 bb       	out	0x12, r22	; 18
 54e:	08 95       	ret

00000550 <DIO_vwrite_low_nibble>:
 *Function Description :    write a value to the low nibble of the port  
 */

void DIO_vwrite_low_nibble(unsigned char portname,unsigned char value)
{
	value&=0x0f;      //  mask low nibble of value nnnn,nnnn and 0000,1111 =0000,nnnn
 550:	6f 70       	andi	r22, 0x0F	; 15
	switch(portname)
 552:	82 34       	cpi	r24, 0x42	; 66
 554:	81 f0       	breq	.+32     	; 0x576 <DIO_vwrite_low_nibble+0x26>
 556:	83 34       	cpi	r24, 0x43	; 67
 558:	18 f4       	brcc	.+6      	; 0x560 <DIO_vwrite_low_nibble+0x10>
 55a:	81 34       	cpi	r24, 0x41	; 65
 55c:	f1 f4       	brne	.+60     	; 0x59a <DIO_vwrite_low_nibble+0x4a>
 55e:	05 c0       	rjmp	.+10     	; 0x56a <DIO_vwrite_low_nibble+0x1a>
 560:	83 34       	cpi	r24, 0x43	; 67
 562:	79 f0       	breq	.+30     	; 0x582 <DIO_vwrite_low_nibble+0x32>
 564:	84 34       	cpi	r24, 0x44	; 68
 566:	c9 f4       	brne	.+50     	; 0x59a <DIO_vwrite_low_nibble+0x4a>
 568:	12 c0       	rjmp	.+36     	; 0x58e <DIO_vwrite_low_nibble+0x3e>
	{
		case 'A':
		PORTA&=0xf0;   //  aaaa,aaaa and 1111,0000 = aaaa
 56a:	8b b3       	in	r24, 0x1b	; 27
 56c:	80 7f       	andi	r24, 0xF0	; 240
 56e:	8b bb       	out	0x1b, r24	; 27
		PORTA|=value;  // aaaa,0000 or oooo,nnnn = aaaa,nnnn
 570:	8b b3       	in	r24, 0x1b	; 27
 572:	86 2b       	or	r24, r22
 574:	8b bb       	out	0x1b, r24	; 27
		case 'B':
		PORTB&=0xf0;
 576:	88 b3       	in	r24, 0x18	; 24
 578:	80 7f       	andi	r24, 0xF0	; 240
 57a:	88 bb       	out	0x18, r24	; 24
		PORTB|=value;
 57c:	88 b3       	in	r24, 0x18	; 24
 57e:	86 2b       	or	r24, r22
 580:	88 bb       	out	0x18, r24	; 24
		case 'C':
		PORTC&=0xf0;
 582:	85 b3       	in	r24, 0x15	; 21
 584:	80 7f       	andi	r24, 0xF0	; 240
 586:	85 bb       	out	0x15, r24	; 21
		PORTC|=value;
 588:	85 b3       	in	r24, 0x15	; 21
 58a:	86 2b       	or	r24, r22
 58c:	85 bb       	out	0x15, r24	; 21
		case 'D':
		PORTD&=0xf0;
 58e:	82 b3       	in	r24, 0x12	; 18
 590:	80 7f       	andi	r24, 0xF0	; 240
 592:	82 bb       	out	0x12, r24	; 18
		PORTD|=value;
 594:	82 b3       	in	r24, 0x12	; 18
 596:	68 2b       	or	r22, r24
 598:	62 bb       	out	0x12, r22	; 18
 59a:	08 95       	ret

0000059c <DIO_vwrite_high_nibble>:
 */


void DIO_vwrite_high_nibble(unsigned char portname,unsigned char value)
{
	value<<=4;			// or value&=0xf0  mask high nibble of value nnnn,nnnn and 1111,0000 = nnnn,0000
 59c:	62 95       	swap	r22
 59e:	60 7f       	andi	r22, 0xF0	; 240
	switch(portname)
 5a0:	82 34       	cpi	r24, 0x42	; 66
 5a2:	81 f0       	breq	.+32     	; 0x5c4 <DIO_vwrite_high_nibble+0x28>
 5a4:	83 34       	cpi	r24, 0x43	; 67
 5a6:	18 f4       	brcc	.+6      	; 0x5ae <DIO_vwrite_high_nibble+0x12>
 5a8:	81 34       	cpi	r24, 0x41	; 65
 5aa:	f1 f4       	brne	.+60     	; 0x5e8 <DIO_vwrite_high_nibble+0x4c>
 5ac:	05 c0       	rjmp	.+10     	; 0x5b8 <DIO_vwrite_high_nibble+0x1c>
 5ae:	83 34       	cpi	r24, 0x43	; 67
 5b0:	79 f0       	breq	.+30     	; 0x5d0 <DIO_vwrite_high_nibble+0x34>
 5b2:	84 34       	cpi	r24, 0x44	; 68
 5b4:	c9 f4       	brne	.+50     	; 0x5e8 <DIO_vwrite_high_nibble+0x4c>
 5b6:	12 c0       	rjmp	.+36     	; 0x5dc <DIO_vwrite_high_nibble+0x40>
	{
		case 'A':
		PORTA&=0x0f;		//  aaaa,aaaa and 0000,1111 = 0000,aaaa 
 5b8:	8b b3       	in	r24, 0x1b	; 27
 5ba:	8f 70       	andi	r24, 0x0F	; 15
 5bc:	8b bb       	out	0x1b, r24	; 27
		PORTA|=value;		// 0000,aaaa  or nnnn,0000 = nnnn,aaaa
 5be:	8b b3       	in	r24, 0x1b	; 27
 5c0:	86 2b       	or	r24, r22
 5c2:	8b bb       	out	0x1b, r24	; 27
		case 'B':
		PORTB&=0x0f;
 5c4:	88 b3       	in	r24, 0x18	; 24
 5c6:	8f 70       	andi	r24, 0x0F	; 15
 5c8:	88 bb       	out	0x18, r24	; 24
		PORTB|=value;
 5ca:	88 b3       	in	r24, 0x18	; 24
 5cc:	86 2b       	or	r24, r22
 5ce:	88 bb       	out	0x18, r24	; 24
		case 'C':
		PORTC&=0x0f;
 5d0:	85 b3       	in	r24, 0x15	; 21
 5d2:	8f 70       	andi	r24, 0x0F	; 15
 5d4:	85 bb       	out	0x15, r24	; 21
		PORTC|=value;
 5d6:	85 b3       	in	r24, 0x15	; 21
 5d8:	86 2b       	or	r24, r22
 5da:	85 bb       	out	0x15, r24	; 21
		case 'D':
		PORTD&=0x0f;
 5dc:	82 b3       	in	r24, 0x12	; 18
 5de:	8f 70       	andi	r24, 0x0F	; 15
 5e0:	82 bb       	out	0x12, r24	; 18
		PORTD|=value;
 5e2:	82 b3       	in	r24, 0x12	; 18
 5e4:	68 2b       	or	r22, r24
 5e6:	62 bb       	out	0x12, r22	; 18
 5e8:	08 95       	ret

000005ea <EEPROM_vwrite>:
 */

void EEPROM_vwrite(unsigned short address , unsigned char data)
{
// set uo address Register
	EEARL = (unsigned char) address;
 5ea:	8e bb       	out	0x1e, r24	; 30
	EEARH = (unsigned char)(address>>8);
 5ec:	9f bb       	out	0x1f, r25	; 31
	
// set uo data Register
	EEDR = data;
 5ee:	6d bb       	out	0x1d, r22	; 29
	
// set EEMWE bit number 2  and EEWE bit number 1    or    EECR|= SetBit(1<<EEMWE)|SetBit(1<<EEWE)
	SetBit(EECR,EEMWE);
 5f0:	e2 9a       	sbi	0x1c, 2	; 28
	SetBit(EECR,EEWE);
 5f2:	e1 9a       	sbi	0x1c, 1	; 28
	
/* wait for complete write operation     or   while( !( ReadBit(EECR,EEWE)) )*/
	
	/* wait for completion of write operation  */
	while(ReadBit(EECR,EEWE)==1);
 5f4:	e1 99       	sbic	0x1c, 1	; 28
 5f6:	fe cf       	rjmp	.-4      	; 0x5f4 <EEPROM_vwrite+0xa>
}
 5f8:	08 95       	ret

000005fa <EEPROM_u8read>:
 */

unsigned char EEPROM_u8read(unsigned short address)
{
// set uo address Register
	EEARL = (unsigned char) address;
 5fa:	8e bb       	out	0x1e, r24	; 30
	EEARH = (unsigned char)(address>>8);
 5fc:	9f bb       	out	0x1f, r25	; 31
	
// start EEPROM Read by setting EEMWE bit number 0      or    EECR|= SetBit(1<<EERE)
	SetBit(EECR,EERE);
 5fe:	e0 9a       	sbi	0x1c, 0	; 28
// return data from data register
	return EEDR;	
 600:	8d b3       	in	r24, 0x1d	; 29
}
 602:	08 95       	ret

00000604 <keypad_vInit>:
 *Function Description : Initialize the Keypad
 */

void keypad_vInit()
{
	DIO_vsetPinDir('B',0,1); // make first 4 pins as output
 604:	82 e4       	ldi	r24, 0x42	; 66
 606:	60 e0       	ldi	r22, 0x00	; 0
 608:	41 e0       	ldi	r20, 0x01	; 1
 60a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPinDir>
	DIO_vsetPinDir('B',1,1); 
 60e:	82 e4       	ldi	r24, 0x42	; 66
 610:	61 e0       	ldi	r22, 0x01	; 1
 612:	41 e0       	ldi	r20, 0x01	; 1
 614:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPinDir>
	DIO_vsetPinDir('B',2,1); 
 618:	82 e4       	ldi	r24, 0x42	; 66
 61a:	62 e0       	ldi	r22, 0x02	; 2
 61c:	41 e0       	ldi	r20, 0x01	; 1
 61e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPinDir>
	DIO_vsetPinDir('B',3,1); 
 622:	82 e4       	ldi	r24, 0x42	; 66
 624:	63 e0       	ldi	r22, 0x03	; 3
 626:	41 e0       	ldi	r20, 0x01	; 1
 628:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPinDir>
	DIO_vsetPinDir('B',4,0); // make first 4 pins as input
 62c:	82 e4       	ldi	r24, 0x42	; 66
 62e:	64 e0       	ldi	r22, 0x04	; 4
 630:	40 e0       	ldi	r20, 0x00	; 0
 632:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPinDir>
	DIO_vsetPinDir('B',5,0); 
 636:	82 e4       	ldi	r24, 0x42	; 66
 638:	65 e0       	ldi	r22, 0x05	; 5
 63a:	40 e0       	ldi	r20, 0x00	; 0
 63c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPinDir>
	DIO_vsetPinDir('B',6,0); 
 640:	82 e4       	ldi	r24, 0x42	; 66
 642:	66 e0       	ldi	r22, 0x06	; 6
 644:	40 e0       	ldi	r20, 0x00	; 0
 646:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPinDir>
	DIO_vsetPinDir('B',7,0); 
 64a:	82 e4       	ldi	r24, 0x42	; 66
 64c:	67 e0       	ldi	r22, 0x07	; 7
 64e:	40 e0       	ldi	r20, 0x00	; 0
 650:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPinDir>
	DIO_vconnectPullup('B',4,1);     //  make all input pin as a pullup as microcontroller has internal pullup   
 654:	82 e4       	ldi	r24, 0x42	; 66
 656:	64 e0       	ldi	r22, 0x04	; 4
 658:	41 e0       	ldi	r20, 0x01	; 1
 65a:	0e 94 25 02 	call	0x44a	; 0x44a <DIO_vconnectPullup>
	DIO_vconnectPullup('B',5,1);       
 65e:	82 e4       	ldi	r24, 0x42	; 66
 660:	65 e0       	ldi	r22, 0x05	; 5
 662:	41 e0       	ldi	r20, 0x01	; 1
 664:	0e 94 25 02 	call	0x44a	; 0x44a <DIO_vconnectPullup>
	DIO_vconnectPullup('B',6,1);
 668:	82 e4       	ldi	r24, 0x42	; 66
 66a:	66 e0       	ldi	r22, 0x06	; 6
 66c:	41 e0       	ldi	r20, 0x01	; 1
 66e:	0e 94 25 02 	call	0x44a	; 0x44a <DIO_vconnectPullup>
	DIO_vconnectPullup('B',7,1);
 672:	82 e4       	ldi	r24, 0x42	; 66
 674:	67 e0       	ldi	r22, 0x07	; 7
 676:	41 e0       	ldi	r20, 0x01	; 1
 678:	0e 94 25 02 	call	0x44a	; 0x44a <DIO_vconnectPullup>
	
}
 67c:	08 95       	ret

0000067e <keypad_u8check_press>:


char keypad_u8check_press()
{
 67e:	ff 92       	push	r15
 680:	0f 93       	push	r16
 682:	1f 93       	push	r17
 684:	cf 93       	push	r28
 686:	df 93       	push	r29
 688:	cd b7       	in	r28, 0x3d	; 61
 68a:	de b7       	in	r29, 0x3e	; 62
 68c:	60 97       	sbiw	r28, 0x10	; 16
 68e:	0f b6       	in	r0, 0x3f	; 63
 690:	f8 94       	cli
 692:	de bf       	out	0x3e, r29	; 62
 694:	0f be       	out	0x3f, r0	; 63
 696:	cd bf       	out	0x3d, r28	; 61
	char arr[4][4]={{'7','8','9','/'},
 698:	de 01       	movw	r26, r28
 69a:	11 96       	adiw	r26, 0x01	; 1
 69c:	e0 e6       	ldi	r30, 0x60	; 96
 69e:	f0 e0       	ldi	r31, 0x00	; 0
 6a0:	80 e1       	ldi	r24, 0x10	; 16
 6a2:	01 90       	ld	r0, Z+
 6a4:	0d 92       	st	X+, r0
 6a6:	81 50       	subi	r24, 0x01	; 1
 6a8:	e1 f7       	brne	.-8      	; 0x6a2 <keypad_u8check_press+0x24>
					{'C','0','=','+'}
		       	   };					 // Array represent buttons of Keypad
	
	char row,column,x ,returnval= NOTPRESSED;
	
	for(row=0;row<4;row++)
 6aa:	ff 24       	eor	r15, r15
	{
		DIO_vwritePin('B',0,1);
 6ac:	82 e4       	ldi	r24, 0x42	; 66
 6ae:	60 e0       	ldi	r22, 0x00	; 0
 6b0:	41 e0       	ldi	r20, 0x01	; 1
 6b2:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <DIO_vwritePin>
		DIO_vwritePin('B',1,1);
 6b6:	82 e4       	ldi	r24, 0x42	; 66
 6b8:	61 e0       	ldi	r22, 0x01	; 1
 6ba:	41 e0       	ldi	r20, 0x01	; 1
 6bc:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <DIO_vwritePin>
		DIO_vwritePin('B',2,1);
 6c0:	82 e4       	ldi	r24, 0x42	; 66
 6c2:	62 e0       	ldi	r22, 0x02	; 2
 6c4:	41 e0       	ldi	r20, 0x01	; 1
 6c6:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <DIO_vwritePin>
		DIO_vwritePin('B',3,1);
 6ca:	82 e4       	ldi	r24, 0x42	; 66
 6cc:	63 e0       	ldi	r22, 0x03	; 3
 6ce:	41 e0       	ldi	r20, 0x01	; 1
 6d0:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <DIO_vwritePin>
		DIO_vwritePin('B',row,0);    // to make only one row=0 and the rest rows one to determine in which rows button is pressed
 6d4:	82 e4       	ldi	r24, 0x42	; 66
 6d6:	6f 2d       	mov	r22, r15
 6d8:	40 e0       	ldi	r20, 0x00	; 0
 6da:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <DIO_vwritePin>
		
		for(column=0;column<4;column++)
 6de:	10 e0       	ldi	r17, 0x00	; 0
	DIO_vconnectPullup('B',7,1);
	
}


char keypad_u8check_press()
 6e0:	01 2f       	mov	r16, r17
 6e2:	0c 5f       	subi	r16, 0xFC	; 252
		DIO_vwritePin('B',3,1);
		DIO_vwritePin('B',row,0);    // to make only one row=0 and the rest rows one to determine in which rows button is pressed
		
		for(column=0;column<4;column++)
		{
			x=DIO_u8readPin('B',(column+4));   // to determine in which columns button is pressed
 6e4:	82 e4       	ldi	r24, 0x42	; 66
 6e6:	60 2f       	mov	r22, r16
 6e8:	0e 94 77 01 	call	0x2ee	; 0x2ee <DIO_u8readPin>
			if (x==0)					 // check switch is pressed . Zero due to pull-up
 6ec:	88 23       	and	r24, r24
 6ee:	c1 f4       	brne	.+48     	; 0x720 <keypad_u8check_press+0xa2>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6f0:	8f e3       	ldi	r24, 0x3F	; 63
 6f2:	9c e9       	ldi	r25, 0x9C	; 156
 6f4:	01 97       	sbiw	r24, 0x01	; 1
 6f6:	f1 f7       	brne	.-4      	; 0x6f4 <keypad_u8check_press+0x76>
 6f8:	00 c0       	rjmp	.+0      	; 0x6fa <keypad_u8check_press+0x7c>
 6fa:	00 00       	nop
			{
				_delay_ms(20);      // for bouncing  
				while(DIO_u8readPin('B',(column+4)) == 0);  //for scan press only one time .....the delay of pressing
 6fc:	82 e4       	ldi	r24, 0x42	; 66
 6fe:	60 2f       	mov	r22, r16
 700:	0e 94 77 01 	call	0x2ee	; 0x2ee <DIO_u8readPin>
 704:	88 23       	and	r24, r24
 706:	d1 f3       	breq	.-12     	; 0x6fc <keypad_u8check_press+0x7e>
				
				returnval=arr[row][column];
 708:	ef 2d       	mov	r30, r15
 70a:	f0 e0       	ldi	r31, 0x00	; 0
 70c:	ee 0f       	add	r30, r30
 70e:	ff 1f       	adc	r31, r31
 710:	ee 0f       	add	r30, r30
 712:	ff 1f       	adc	r31, r31
 714:	e1 0f       	add	r30, r17
 716:	f1 1d       	adc	r31, r1
 718:	ec 0f       	add	r30, r28
 71a:	fd 1f       	adc	r31, r29
 71c:	81 81       	ldd	r24, Z+1	; 0x01
 71e:	04 c0       	rjmp	.+8      	; 0x728 <keypad_u8check_press+0xaa>
		DIO_vwritePin('B',1,1);
		DIO_vwritePin('B',2,1);
		DIO_vwritePin('B',3,1);
		DIO_vwritePin('B',row,0);    // to make only one row=0 and the rest rows one to determine in which rows button is pressed
		
		for(column=0;column<4;column++)
 720:	1f 5f       	subi	r17, 0xFF	; 255
 722:	14 30       	cpi	r17, 0x04	; 4
 724:	e9 f6       	brne	.-70     	; 0x6e0 <keypad_u8check_press+0x62>
 726:	0c c0       	rjmp	.+24     	; 0x740 <keypad_u8check_press+0xc2>
		{
			break;
		}						
	}
	return returnval ; 		
 728:	60 96       	adiw	r28, 0x10	; 16
 72a:	0f b6       	in	r0, 0x3f	; 63
 72c:	f8 94       	cli
 72e:	de bf       	out	0x3e, r29	; 62
 730:	0f be       	out	0x3f, r0	; 63
 732:	cd bf       	out	0x3d, r28	; 61
 734:	df 91       	pop	r29
 736:	cf 91       	pop	r28
 738:	1f 91       	pop	r17
 73a:	0f 91       	pop	r16
 73c:	ff 90       	pop	r15
 73e:	08 95       	ret
					{'C','0','=','+'}
		       	   };					 // Array represent buttons of Keypad
	
	char row,column,x ,returnval= NOTPRESSED;
	
	for(row=0;row<4;row++)
 740:	f3 94       	inc	r15
 742:	94 e0       	ldi	r25, 0x04	; 4
 744:	f9 16       	cp	r15, r25
 746:	09 f0       	breq	.+2      	; 0x74a <keypad_u8check_press+0xcc>
 748:	b1 cf       	rjmp	.-158    	; 0x6ac <keypad_u8check_press+0x2e>
 74a:	8f ef       	ldi	r24, 0xFF	; 255
 74c:	ed cf       	rjmp	.-38     	; 0x728 <keypad_u8check_press+0xaa>

0000074e <vsend_falling_edge>:
 *function to enable LCD display
 */

static  void vsend_falling_edge(void)
{
	DIO_vwritePin('A',EN,1);        // create high edge
 74e:	81 e4       	ldi	r24, 0x41	; 65
 750:	60 e0       	ldi	r22, 0x00	; 0
 752:	41 e0       	ldi	r20, 0x01	; 1
 754:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <DIO_vwritePin>
 758:	8f e9       	ldi	r24, 0x9F	; 159
 75a:	9f e0       	ldi	r25, 0x0F	; 15
 75c:	01 97       	sbiw	r24, 0x01	; 1
 75e:	f1 f7       	brne	.-4      	; 0x75c <vsend_falling_edge+0xe>
 760:	00 c0       	rjmp	.+0      	; 0x762 <vsend_falling_edge+0x14>
 762:	00 00       	nop
	_delay_ms(2);
	DIO_vwritePin('A',EN,0);      // create high edge
 764:	81 e4       	ldi	r24, 0x41	; 65
 766:	60 e0       	ldi	r22, 0x00	; 0
 768:	40 e0       	ldi	r20, 0x00	; 0
 76a:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <DIO_vwritePin>
 76e:	8f e9       	ldi	r24, 0x9F	; 159
 770:	9f e0       	ldi	r25, 0x0F	; 15
 772:	01 97       	sbiw	r24, 0x01	; 1
 774:	f1 f7       	brne	.-4      	; 0x772 <vsend_falling_edge+0x24>
 776:	00 c0       	rjmp	.+0      	; 0x778 <vsend_falling_edge+0x2a>
 778:	00 00       	nop
	_delay_ms(2);
}
 77a:	08 95       	ret

0000077c <LCD_vsend_cmd>:
/*
 *Function Description :  Send Command to  LCD
 */

void LCD_vsend_cmd(char cmd)
{
 77c:	68 2f       	mov	r22, r24
	/****************************************** for  8_bits Mode   *********************************************************/
	#if defined eight_bits_mode
	
	DIO_vwritePort('C',cmd);			//  Send the command value to the LCD data port .
 77e:	83 e4       	ldi	r24, 0x43	; 67
 780:	0e 94 63 01 	call	0x2c6	; 0x2c6 <DIO_vwritePort>
	DIO_vwritePin('A',RS,0);			// Make RS pin low, RS = 0 (command reg.)
 784:	81 e4       	ldi	r24, 0x41	; 65
 786:	62 e0       	ldi	r22, 0x02	; 2
 788:	40 e0       	ldi	r20, 0x00	; 0
 78a:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <DIO_vwritePin>
	vsend_falling_edge();				// enable LCD display
 78e:	0e 94 a7 03 	call	0x74e	; 0x74e <vsend_falling_edge>
	DIO_vwritePin('A',RS,0);			//  Make RS pin low, RS = 0 (command reg.)
	vsend_falling_edge();				// enable LCD display
	
	// _delay_ms(1);
	#endif	  	
}
 792:	08 95       	ret

00000794 <LCD_vInit>:
 794:	8f ef       	ldi	r24, 0xFF	; 255
 796:	91 ee       	ldi	r25, 0xE1	; 225
 798:	a4 e0       	ldi	r26, 0x04	; 4
 79a:	81 50       	subi	r24, 0x01	; 1
 79c:	90 40       	sbci	r25, 0x00	; 0
 79e:	a0 40       	sbci	r26, 0x00	; 0
 7a0:	e1 f7       	brne	.-8      	; 0x79a <LCD_vInit+0x6>
 7a2:	00 c0       	rjmp	.+0      	; 0x7a4 <LCD_vInit+0x10>
 7a4:	00 00       	nop
{
	_delay_ms(200);										  // delay more than 30 ms after power ON  AS  data sheet
	/****************************************** for  8_bits Mode   *********************************************************/
	#if defined eight_bits_mode							 
	
	DIO_vsetPortDir('C',1);							   // make the direction of whole port C as output port  
 7a6:	83 e4       	ldi	r24, 0x43	; 67
 7a8:	61 e0       	ldi	r22, 0x01	; 1
 7aa:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_vsetPortDir>
	DIO_vsetPinDir('A',EN,1);					      // make the direction of pin0 (EN)  as output port
 7ae:	81 e4       	ldi	r24, 0x41	; 65
 7b0:	60 e0       	ldi	r22, 0x00	; 0
 7b2:	41 e0       	ldi	r20, 0x01	; 1
 7b4:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPinDir>
	DIO_vsetPinDir('A',RW,1);						  // make the direction of pin1 (RW)  as output port
 7b8:	81 e4       	ldi	r24, 0x41	; 65
 7ba:	61 e0       	ldi	r22, 0x01	; 1
 7bc:	41 e0       	ldi	r20, 0x01	; 1
 7be:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPinDir>
	DIO_vsetPinDir('A',RS,1);						 // make the direction of pin2 (RS)  as output port
 7c2:	81 e4       	ldi	r24, 0x41	; 65
 7c4:	62 e0       	ldi	r22, 0x02	; 2
 7c6:	41 e0       	ldi	r20, 0x01	; 1
 7c8:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPinDir>
	
	
	DIO_vwritePin('A',RW,0);					     //always we select  write mode 
 7cc:	81 e4       	ldi	r24, 0x41	; 65
 7ce:	61 e0       	ldi	r22, 0x01	; 1
 7d0:	40 e0       	ldi	r20, 0x00	; 0
 7d2:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <DIO_vwritePin>

	LCD_vsend_cmd(EIGHT_BITS);						 //predefined  0x38=0b0011,1000  from function set mode
 7d6:	88 e3       	ldi	r24, 0x38	; 56
 7d8:	0e 94 be 03 	call	0x77c	; 0x77c <LCD_vsend_cmd>
 7dc:	af ec       	ldi	r26, 0xCF	; 207
 7de:	b7 e0       	ldi	r27, 0x07	; 7
 7e0:	11 97       	sbiw	r26, 0x01	; 1
 7e2:	f1 f7       	brne	.-4      	; 0x7e0 <LCD_vInit+0x4c>
 7e4:	00 c0       	rjmp	.+0      	; 0x7e6 <LCD_vInit+0x52>
 7e6:	00 00       	nop
	_delay_ms(1);									 // delay more than 39 us after function set mode AS data sheet
	LCD_vsend_cmd(CURSOR_ON_DISPLAY_ON);			//predefined 0b0000,1110 from Display on-off control mode
 7e8:	8e e0       	ldi	r24, 0x0E	; 14
 7ea:	0e 94 be 03 	call	0x77c	; 0x77c <LCD_vsend_cmd>
 7ee:	8f ec       	ldi	r24, 0xCF	; 207
 7f0:	97 e0       	ldi	r25, 0x07	; 7
 7f2:	01 97       	sbiw	r24, 0x01	; 1
 7f4:	f1 f7       	brne	.-4      	; 0x7f2 <LCD_vInit+0x5e>
 7f6:	00 c0       	rjmp	.+0      	; 0x7f8 <LCD_vInit+0x64>
 7f8:	00 00       	nop
	_delay_ms(1);									// delay more than 39 us after Display on-off control mode AS data sheet
	LCD_vsend_cmd(CLR_SCREEN);						//predefined  0b0000,0010 from Display clear mode  AS data sheet
 7fa:	81 e0       	ldi	r24, 0x01	; 1
 7fc:	0e 94 be 03 	call	0x77c	; 0x77c <LCD_vsend_cmd>
 800:	af e1       	ldi	r26, 0x1F	; 31
 802:	be e4       	ldi	r27, 0x4E	; 78
 804:	11 97       	sbiw	r26, 0x01	; 1
 806:	f1 f7       	brne	.-4      	; 0x804 <LCD_vInit+0x70>
 808:	00 c0       	rjmp	.+0      	; 0x80a <LCD_vInit+0x76>
 80a:	00 00       	nop
	_delay_ms(10);									// delay more than 1.52 ms after Display clear mode AS data sheet
	LCD_vsend_cmd(ENTRY_MODE);						//predefined 0b0000,0110 from Entry mode as data sheet
 80c:	86 e0       	ldi	r24, 0x06	; 6
 80e:	0e 94 be 03 	call	0x77c	; 0x77c <LCD_vsend_cmd>
	_delay_ms(5);									// delay more than 1.52 ms after Display clear mode AS data sheet
	LCD_vsend_cmd(ENTRY_MODE);						//predefined 0b0000,0110 from Entry mode as data sheet
	
	#endif
	
}
 812:	08 95       	ret

00000814 <LCD_vsend_char>:

/*
 *Function Description :  Send Character to  LCD
 */
void LCD_vsend_char(char data)
{
 814:	68 2f       	mov	r22, r24
	/****************************************** for  8_bits Mode   *********************************************************/
	#if defined eight_bits_mode
	
	DIO_vwritePort('C',data);				 //  Send the command value to the LCD data port 
 816:	83 e4       	ldi	r24, 0x43	; 67
 818:	0e 94 63 01 	call	0x2c6	; 0x2c6 <DIO_vwritePort>
	DIO_vwritePin('A',RS,1);			//  Make RS pin high, RS = 1 (data reg.)
 81c:	81 e4       	ldi	r24, 0x41	; 65
 81e:	62 e0       	ldi	r22, 0x02	; 2
 820:	41 e0       	ldi	r20, 0x01	; 1
 822:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <DIO_vwritePin>
	vsend_falling_edge();					// enable LCD display
 826:	0e 94 a7 03 	call	0x74e	; 0x74e <vsend_falling_edge>
	DIO_vwritePin('A',RS,1);			//  Make RS pin high, RS = 1 (data reg.)
	vsend_falling_edge();				// enable LCD display
		
	// _delay_ms(1);
	#endif
}
 82a:	08 95       	ret

0000082c <LCD_vsend_string>:
/*
 *Function Description :  Send String to  LCD
 */

void LCD_vsend_string(char *data)
{
 82c:	cf 93       	push	r28
 82e:	df 93       	push	r29
 830:	ec 01       	movw	r28, r24
	while( (*data) != '\0')							// Null=='\0'
 832:	88 81       	ld	r24, Y
 834:	88 23       	and	r24, r24
 836:	31 f0       	breq	.+12     	; 0x844 <LCD_vsend_string+0x18>

/*
 *Function Description :  Send String to  LCD
 */

void LCD_vsend_string(char *data)
 838:	21 96       	adiw	r28, 0x01	; 1
{
	while( (*data) != '\0')							// Null=='\0'
	{
		LCD_vsend_char(*data);
 83a:	0e 94 0a 04 	call	0x814	; 0x814 <LCD_vsend_char>
 *Function Description :  Send String to  LCD
 */

void LCD_vsend_string(char *data)
{
	while( (*data) != '\0')							// Null=='\0'
 83e:	89 91       	ld	r24, Y+
 840:	88 23       	and	r24, r24
 842:	d9 f7       	brne	.-10     	; 0x83a <LCD_vsend_string+0xe>
	{
		LCD_vsend_char(*data);
		data++;
		
	}	
}
 844:	df 91       	pop	r29
 846:	cf 91       	pop	r28
 848:	08 95       	ret

0000084a <LCD_vclearscreen>:
 *Function Description :   clear screen of  LCD
 */

void LCD_vclearscreen()
{
	LCD_vsend_cmd(CLR_SCREEN);	
 84a:	81 e0       	ldi	r24, 0x01	; 1
 84c:	0e 94 be 03 	call	0x77c	; 0x77c <LCD_vsend_cmd>
 850:	8f e1       	ldi	r24, 0x1F	; 31
 852:	9e e4       	ldi	r25, 0x4E	; 78
 854:	01 97       	sbiw	r24, 0x01	; 1
 856:	f1 f7       	brne	.-4      	; 0x854 <LCD_vclearscreen+0xa>
 858:	00 c0       	rjmp	.+0      	; 0x85a <LCD_vclearscreen+0x10>
 85a:	00 00       	nop
	_delay_ms(10);
}
 85c:	08 95       	ret

0000085e <LCD_vmovecursor>:
 *Function Description :  move the cursor of  LCD
 */

void LCD_vmovecursor(char row,char coloumn)
{
	if( coloumn>=0 && coloumn<=39 )
 85e:	68 32       	cpi	r22, 0x28	; 40
 860:	70 f4       	brcc	.+28     	; 0x87e <__stack+0x1f>
	{
		switch(row)
 862:	81 30       	cpi	r24, 0x01	; 1
 864:	19 f0       	breq	.+6      	; 0x86c <__stack+0xd>
 866:	82 30       	cpi	r24, 0x02	; 2
 868:	51 f4       	brne	.+20     	; 0x87e <__stack+0x1f>
 86a:	05 c0       	rjmp	.+10     	; 0x876 <__stack+0x17>
		{
			case 1:
			LCD_vsend_cmd(0x80 + coloumn);			// To put cursor of LCD on: Address of first row column 1 : 0x80 + 0  .......
 86c:	86 2f       	mov	r24, r22
 86e:	80 58       	subi	r24, 0x80	; 128
 870:	0e 94 be 03 	call	0x77c	; 0x77c <LCD_vsend_cmd>

			break;
 874:	08 95       	ret
			
			case 2:
			LCD_vsend_cmd(0xC0 + coloumn);			// To put cursor of LCD on: Address of second row column 1 : 0xC0 + 0  .......
 876:	86 2f       	mov	r24, r22
 878:	80 54       	subi	r24, 0x40	; 64
 87a:	0e 94 be 03 	call	0x77c	; 0x77c <LCD_vsend_cmd>
 87e:	08 95       	ret

00000880 <vservo_Motor>:



void vservo_Motor(void)
{
		timer1_wave_fastPWM(2);  //  a pulse of >= 2ms will move the shaft clockwise at+90
 880:	60 e0       	ldi	r22, 0x00	; 0
 882:	70 e0       	ldi	r23, 0x00	; 0
 884:	80 e0       	ldi	r24, 0x00	; 0
 886:	90 e4       	ldi	r25, 0x40	; 64
 888:	0e 94 8a 05 	call	0xb14	; 0xb14 <timer1_wave_fastPWM>
 88c:	8f e3       	ldi	r24, 0x3F	; 63
 88e:	9d e0       	ldi	r25, 0x0D	; 13
 890:	a3 e0       	ldi	r26, 0x03	; 3
 892:	81 50       	subi	r24, 0x01	; 1
 894:	90 40       	sbci	r25, 0x00	; 0
 896:	a0 40       	sbci	r26, 0x00	; 0
 898:	e1 f7       	brne	.-8      	; 0x892 <vservo_Motor+0x12>
 89a:	00 c0       	rjmp	.+0      	; 0x89c <vservo_Motor+0x1c>
 89c:	00 00       	nop
		_delay_ms(1000);
}
 89e:	08 95       	ret

000008a0 <main>:
#define MAX_TRIES 3				// no of max tries to reenter pass if entered in a wrong form

char arr[4]={NOTPRESSED};

int main(void)
{
 8a0:	2f 92       	push	r2
 8a2:	3f 92       	push	r3
 8a4:	4f 92       	push	r4
 8a6:	5f 92       	push	r5
 8a8:	6f 92       	push	r6
 8aa:	7f 92       	push	r7
 8ac:	8f 92       	push	r8
 8ae:	9f 92       	push	r9
 8b0:	af 92       	push	r10
 8b2:	bf 92       	push	r11
 8b4:	df 92       	push	r13
 8b6:	ef 92       	push	r14
 8b8:	ff 92       	push	r15
 8ba:	0f 93       	push	r16
 8bc:	1f 93       	push	r17
 8be:	cf 93       	push	r28
 8c0:	df 93       	push	r29
	LCD_vInit();
 8c2:	0e 94 ca 03 	call	0x794	; 0x794 <LCD_vInit>
	keypad_vInit();
 8c6:	0e 94 02 03 	call	0x604	; 0x604 <keypad_vInit>
	char value=NOTPRESSED;  	 //  default value 0xff = 0b1111,1111 of all locations in EEPROM
	char flag=0,i;
	char tries=MAX_TRIES;
	
	if (EEPROM_u8read(EEPROM_STATUS_LOCATION)==NOTPRESSED)	  // if read a EEPROM_STATUS_LOCATION as a default 0xff = 0b1111,1111  that mean no thing is writen HERE
 8ca:	80 e2       	ldi	r24, 0x20	; 32
 8cc:	90 e0       	ldi	r25, 0x00	; 0
 8ce:	0e 94 fd 02 	call	0x5fa	; 0x5fa <EEPROM_u8read>
 8d2:	8f 3f       	cpi	r24, 0xFF	; 255
 8d4:	a1 f5       	brne	.+104    	; 0x93e <main+0x9e>
	{
		LCD_vsend_string("Set Pass:");			// set pass:- consist of 4 Digit that enter via for loop 
 8d6:	80 e7       	ldi	r24, 0x70	; 112
 8d8:	90 e0       	ldi	r25, 0x00	; 0
 8da:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_vsend_string>
 8de:	c1 e2       	ldi	r28, 0x21	; 33
 8e0:	d0 e0       	ldi	r29, 0x00	; 0
		for (i=0;i<=3;i++)
		{
			do
			{
				value=keypad_u8check_press();
 8e2:	0e 94 3f 03 	call	0x67e	; 0x67e <keypad_u8check_press>
 8e6:	18 2f       	mov	r17, r24
			} while (value==NOTPRESSED);						
 8e8:	8f 3f       	cpi	r24, 0xFF	; 255
 8ea:	d9 f3       	breq	.-10     	; 0x8e2 <main+0x42>
			LCD_vsend_char(value);	
 8ec:	0e 94 0a 04 	call	0x814	; 0x814 <LCD_vsend_char>
 8f0:	8f e9       	ldi	r24, 0x9F	; 159
 8f2:	96 e8       	ldi	r25, 0x86	; 134
 8f4:	a1 e0       	ldi	r26, 0x01	; 1
 8f6:	81 50       	subi	r24, 0x01	; 1
 8f8:	90 40       	sbci	r25, 0x00	; 0
 8fa:	a0 40       	sbci	r26, 0x00	; 0
 8fc:	e1 f7       	brne	.-8      	; 0x8f6 <main+0x56>
 8fe:	00 c0       	rjmp	.+0      	; 0x900 <main+0x60>
 900:	00 00       	nop
#define  EEPROM_PASSWORD_LOCATION4 0x24			// represent to 4th Digit pf pass
#define MAX_TRIES 3				// no of max tries to reenter pass if entered in a wrong form

char arr[4]={NOTPRESSED};

int main(void)
 902:	6c 2f       	mov	r22, r28
 904:	68 51       	subi	r22, 0x18	; 24
			{
				value=keypad_u8check_press();
			} while (value==NOTPRESSED);						
			LCD_vsend_char(value);	
			_delay_ms(500);		
			LCD_vmovecursor(1,9+i);			// column10 as start count from zero 9+i as "set pass:" string 9 character and no.10 is the 1st digit of it's pass
 906:	81 e0       	ldi	r24, 0x01	; 1
 908:	0e 94 2f 04 	call	0x85e	; 0x85e <LCD_vmovecursor>
			LCD_vsend_char('*');				// put "*" in the 1st digit of it's pass
 90c:	8a e2       	ldi	r24, 0x2A	; 42
 90e:	0e 94 0a 04 	call	0x814	; 0x814 <LCD_vsend_char>
 912:	8f e9       	ldi	r24, 0x9F	; 159
 914:	96 e8       	ldi	r25, 0x86	; 134
 916:	a1 e0       	ldi	r26, 0x01	; 1
 918:	81 50       	subi	r24, 0x01	; 1
 91a:	90 40       	sbci	r25, 0x00	; 0
 91c:	a0 40       	sbci	r26, 0x00	; 0
 91e:	e1 f7       	brne	.-8      	; 0x918 <main+0x78>
 920:	00 c0       	rjmp	.+0      	; 0x922 <main+0x82>
 922:	00 00       	nop
			_delay_ms(500);	
			EEPROM_vwrite(EEPROM_PASSWORD_LOCATION1+i,value);		// put the value of the 1st digit of it's pass in location of EEPROM to keep it after power off					
 924:	ce 01       	movw	r24, r28
 926:	61 2f       	mov	r22, r17
 928:	0e 94 f5 02 	call	0x5ea	; 0x5ea <EEPROM_vwrite>
 92c:	21 96       	adiw	r28, 0x01	; 1
	char tries=MAX_TRIES;
	
	if (EEPROM_u8read(EEPROM_STATUS_LOCATION)==NOTPRESSED)	  // if read a EEPROM_STATUS_LOCATION as a default 0xff = 0b1111,1111  that mean no thing is writen HERE
	{
		LCD_vsend_string("Set Pass:");			// set pass:- consist of 4 Digit that enter via for loop 
		for (i=0;i<=3;i++)
 92e:	c5 32       	cpi	r28, 0x25	; 37
 930:	d1 05       	cpc	r29, r1
 932:	b9 f6       	brne	.-82     	; 0x8e2 <main+0x42>
			LCD_vmovecursor(1,9+i);			// column10 as start count from zero 9+i as "set pass:" string 9 character and no.10 is the 1st digit of it's pass
			LCD_vsend_char('*');				// put "*" in the 1st digit of it's pass
			_delay_ms(500);	
			EEPROM_vwrite(EEPROM_PASSWORD_LOCATION1+i,value);		// put the value of the 1st digit of it's pass in location of EEPROM to keep it after power off					
	  }//end for
	  EEPROM_vwrite(EEPROM_STATUS_LOCATION,0x00);		//  to indicate that EEPROM_STATUS_LOCATION is writen     not as a default 0xff = 0b1111,1111  that mean no thing is writen HERE		
 934:	80 e2       	ldi	r24, 0x20	; 32
 936:	90 e0       	ldi	r25, 0x00	; 0
 938:	60 e0       	ldi	r22, 0x00	; 0
 93a:	0e 94 f5 02 	call	0x5ea	; 0x5ea <EEPROM_vwrite>
	char flag=0,i;
	char tries=MAX_TRIES;
	
	if (EEPROM_u8read(EEPROM_STATUS_LOCATION)==NOTPRESSED)	  // if read a EEPROM_STATUS_LOCATION as a default 0xff = 0b1111,1111  that mean no thing is writen HERE
	{
		LCD_vsend_string("Set Pass:");			// set pass:- consist of 4 Digit that enter via for loop 
 93e:	02 e3       	ldi	r16, 0x32	; 50
	
	
	while(flag==0)		//if (EEPROM_u8read(EEPROM_STATUS_LOCATION)==0x00) if read a EEPROM_STATUS_LOCATION as NOT AS a default 0xff = 0b1111,1111  that mean thing is writen HERE
	{	//arr[0]=arr[1]=arr[2]=arr[3]=NOTPRESSED;	
		LCD_vclearscreen();
		LCD_vsend_string("check pass:");
 940:	0f 2e       	mov	r0, r31
 942:	fa e7       	ldi	r31, 0x7A	; 122
 944:	af 2e       	mov	r10, r31
 946:	f0 e0       	ldi	r31, 0x00	; 0
 948:	bf 2e       	mov	r11, r31
 94a:	f0 2d       	mov	r31, r0
 94c:	0f 2e       	mov	r0, r31
 94e:	fa ec       	ldi	r31, 0xCA	; 202
 950:	ef 2e       	mov	r14, r31
 952:	f0 e0       	ldi	r31, 0x00	; 0
 954:	ff 2e       	mov	r15, r31
 956:	f0 2d       	mov	r31, r0
 958:	0f 2e       	mov	r0, r31
 95a:	fb e0       	ldi	r31, 0x0B	; 11
 95c:	df 2e       	mov	r13, r31
 95e:	f0 2d       	mov	r31, r0
			LCD_vsend_char('*');
			_delay_ms(500);
		}//end for				
	
	/*********************************************  match pass that saved in EEPROM via "set pass" with pass that enterd via "check pass"  ******************************************************/
		if(EEPROM_u8read(EEPROM_PASSWORD_LOCATION1)==arr[0] &&  EEPROM_u8read(EEPROM_PASSWORD_LOCATION2)==arr[1] && EEPROM_u8read(EEPROM_PASSWORD_LOCATION3)==arr[2] && EEPROM_u8read(EEPROM_PASSWORD_LOCATION4)==arr[3])
 960:	0f 2e       	mov	r0, r31
 962:	fb ec       	ldi	r31, 0xCB	; 203
 964:	4f 2e       	mov	r4, r31
 966:	f0 e0       	ldi	r31, 0x00	; 0
 968:	5f 2e       	mov	r5, r31
 96a:	f0 2d       	mov	r31, r0
 96c:	0f 2e       	mov	r0, r31
 96e:	fc ec       	ldi	r31, 0xCC	; 204
 970:	2f 2e       	mov	r2, r31
 972:	f0 e0       	ldi	r31, 0x00	; 0
 974:	3f 2e       	mov	r3, r31
 976:	f0 2d       	mov	r31, r0
		{
			tries=tries-1;
			if (tries>0)
			{
				LCD_vclearscreen();
				LCD_vsend_string("wrong password");
 978:	0f 2e       	mov	r0, r31
 97a:	f3 ea       	ldi	r31, 0xA3	; 163
 97c:	8f 2e       	mov	r8, r31
 97e:	f0 e0       	ldi	r31, 0x00	; 0
 980:	9f 2e       	mov	r9, r31
 982:	f0 2d       	mov	r31, r0
				_delay_ms(1000);
				LCD_vclearscreen();
				LCD_vsend_string("tries left:");
 984:	0f 2e       	mov	r0, r31
 986:	f2 eb       	ldi	r31, 0xB2	; 178
 988:	6f 2e       	mov	r6, r31
 98a:	f0 e0       	ldi	r31, 0x00	; 0
 98c:	7f 2e       	mov	r7, r31
 98e:	f0 2d       	mov	r31, r0
	}//end if
	
	
	while(flag==0)		//if (EEPROM_u8read(EEPROM_STATUS_LOCATION)==0x00) if read a EEPROM_STATUS_LOCATION as NOT AS a default 0xff = 0b1111,1111  that mean thing is writen HERE
	{	//arr[0]=arr[1]=arr[2]=arr[3]=NOTPRESSED;	
		LCD_vclearscreen();
 990:	0e 94 25 04 	call	0x84a	; 0x84a <LCD_vclearscreen>
		LCD_vsend_string("check pass:");
 994:	c5 01       	movw	r24, r10
 996:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_vsend_string>
 99a:	e7 01       	movw	r28, r14
 99c:	1d 2d       	mov	r17, r13
		for (i=0;i<=3;i++)
		{
			do
			{
				arr[i]=keypad_u8check_press();		// check pass:- enter your pass that consist of 4 Digit that enterd when "set pass" in the first time open the Safe app 
 99e:	0e 94 3f 03 	call	0x67e	; 0x67e <keypad_u8check_press>
 9a2:	88 83       	st	Y, r24
			} while (arr[i]==NOTPRESSED);			
 9a4:	8f 3f       	cpi	r24, 0xFF	; 255
 9a6:	d9 f3       	breq	.-10     	; 0x99e <main+0xfe>
			LCD_vsend_char(arr[i]);
 9a8:	0e 94 0a 04 	call	0x814	; 0x814 <LCD_vsend_char>
 9ac:	8f e9       	ldi	r24, 0x9F	; 159
 9ae:	96 e8       	ldi	r25, 0x86	; 134
 9b0:	a1 e0       	ldi	r26, 0x01	; 1
 9b2:	81 50       	subi	r24, 0x01	; 1
 9b4:	90 40       	sbci	r25, 0x00	; 0
 9b6:	a0 40       	sbci	r26, 0x00	; 0
 9b8:	e1 f7       	brne	.-8      	; 0x9b2 <main+0x112>
 9ba:	00 c0       	rjmp	.+0      	; 0x9bc <main+0x11c>
 9bc:	00 00       	nop
			_delay_ms(500);
			LCD_vmovecursor(1,11+i);		// column11 as start count from zero  12+i as "check pass:" string 11 character and no.12 is the 1st digit of it's pass
 9be:	81 e0       	ldi	r24, 0x01	; 1
 9c0:	61 2f       	mov	r22, r17
 9c2:	0e 94 2f 04 	call	0x85e	; 0x85e <LCD_vmovecursor>
			LCD_vsend_char('*');
 9c6:	8a e2       	ldi	r24, 0x2A	; 42
 9c8:	0e 94 0a 04 	call	0x814	; 0x814 <LCD_vsend_char>
 9cc:	8f e9       	ldi	r24, 0x9F	; 159
 9ce:	96 e8       	ldi	r25, 0x86	; 134
 9d0:	a1 e0       	ldi	r26, 0x01	; 1
 9d2:	81 50       	subi	r24, 0x01	; 1
 9d4:	90 40       	sbci	r25, 0x00	; 0
 9d6:	a0 40       	sbci	r26, 0x00	; 0
 9d8:	e1 f7       	brne	.-8      	; 0x9d2 <main+0x132>
 9da:	00 c0       	rjmp	.+0      	; 0x9dc <main+0x13c>
 9dc:	00 00       	nop
 9de:	1f 5f       	subi	r17, 0xFF	; 255
 9e0:	21 96       	adiw	r28, 0x01	; 1
	
	while(flag==0)		//if (EEPROM_u8read(EEPROM_STATUS_LOCATION)==0x00) if read a EEPROM_STATUS_LOCATION as NOT AS a default 0xff = 0b1111,1111  that mean thing is writen HERE
	{	//arr[0]=arr[1]=arr[2]=arr[3]=NOTPRESSED;	
		LCD_vclearscreen();
		LCD_vsend_string("check pass:");
		for (i=0;i<=3;i++)
 9e2:	1f 30       	cpi	r17, 0x0F	; 15
 9e4:	e1 f6       	brne	.-72     	; 0x99e <main+0xfe>
			LCD_vsend_char('*');
			_delay_ms(500);
		}//end for				
	
	/*********************************************  match pass that saved in EEPROM via "set pass" with pass that enterd via "check pass"  ******************************************************/
		if(EEPROM_u8read(EEPROM_PASSWORD_LOCATION1)==arr[0] &&  EEPROM_u8read(EEPROM_PASSWORD_LOCATION2)==arr[1] && EEPROM_u8read(EEPROM_PASSWORD_LOCATION3)==arr[2] && EEPROM_u8read(EEPROM_PASSWORD_LOCATION4)==arr[3])
 9e6:	81 e2       	ldi	r24, 0x21	; 33
 9e8:	90 e0       	ldi	r25, 0x00	; 0
 9ea:	0e 94 fd 02 	call	0x5fa	; 0x5fa <EEPROM_u8read>
 9ee:	d7 01       	movw	r26, r14
 9f0:	9c 91       	ld	r25, X
 9f2:	89 17       	cp	r24, r25
 9f4:	51 f5       	brne	.+84     	; 0xa4a <main+0x1aa>
 9f6:	82 e2       	ldi	r24, 0x22	; 34
 9f8:	90 e0       	ldi	r25, 0x00	; 0
 9fa:	0e 94 fd 02 	call	0x5fa	; 0x5fa <EEPROM_u8read>
 9fe:	f2 01       	movw	r30, r4
 a00:	90 81       	ld	r25, Z
 a02:	89 17       	cp	r24, r25
 a04:	11 f5       	brne	.+68     	; 0xa4a <main+0x1aa>
 a06:	83 e2       	ldi	r24, 0x23	; 35
 a08:	90 e0       	ldi	r25, 0x00	; 0
 a0a:	0e 94 fd 02 	call	0x5fa	; 0x5fa <EEPROM_u8read>
 a0e:	d1 01       	movw	r26, r2
 a10:	9c 91       	ld	r25, X
 a12:	89 17       	cp	r24, r25
 a14:	d1 f4       	brne	.+52     	; 0xa4a <main+0x1aa>
 a16:	84 e2       	ldi	r24, 0x24	; 36
 a18:	90 e0       	ldi	r25, 0x00	; 0
 a1a:	0e 94 fd 02 	call	0x5fa	; 0x5fa <EEPROM_u8read>
 a1e:	ed ec       	ldi	r30, 0xCD	; 205
 a20:	f0 e0       	ldi	r31, 0x00	; 0
 a22:	90 81       	ld	r25, Z
 a24:	89 17       	cp	r24, r25
 a26:	89 f4       	brne	.+34     	; 0xa4a <main+0x1aa>
		{
			LCD_vclearscreen();
 a28:	0e 94 25 04 	call	0x84a	; 0x84a <LCD_vclearscreen>
			LCD_vsend_string("true password");
 a2c:	86 e8       	ldi	r24, 0x86	; 134
 a2e:	90 e0       	ldi	r25, 0x00	; 0
 a30:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_vsend_string>
			LCD_vmovecursor(2,1);
 a34:	82 e0       	ldi	r24, 0x02	; 2
 a36:	61 e0       	ldi	r22, 0x01	; 1
 a38:	0e 94 2f 04 	call	0x85e	; 0x85e <LCD_vmovecursor>
			LCD_vsend_string("safe opened^-^");
 a3c:	84 e9       	ldi	r24, 0x94	; 148
 a3e:	90 e0       	ldi	r25, 0x00	; 0
 a40:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_vsend_string>
			
			vservo_Motor();		// move the direction of servo motor to angle 90 clockwise			
 a44:	0e 94 40 04 	call	0x880	; 0x880 <vservo_Motor>
			
			flag=1;
 a48:	31 c0       	rjmp	.+98     	; 0xaac <main+0x20c>
		}
		else
		{
			tries=tries-1;
			if (tries>0)
 a4a:	00 33       	cpi	r16, 0x30	; 48
 a4c:	09 f1       	breq	.+66     	; 0xa90 <main+0x1f0>
			{
				LCD_vclearscreen();
 a4e:	0e 94 25 04 	call	0x84a	; 0x84a <LCD_vclearscreen>
				LCD_vsend_string("wrong password");
 a52:	c4 01       	movw	r24, r8
 a54:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_vsend_string>
 a58:	8f e3       	ldi	r24, 0x3F	; 63
 a5a:	9d e0       	ldi	r25, 0x0D	; 13
 a5c:	a3 e0       	ldi	r26, 0x03	; 3
 a5e:	81 50       	subi	r24, 0x01	; 1
 a60:	90 40       	sbci	r25, 0x00	; 0
 a62:	a0 40       	sbci	r26, 0x00	; 0
 a64:	e1 f7       	brne	.-8      	; 0xa5e <main+0x1be>
 a66:	00 c0       	rjmp	.+0      	; 0xa68 <main+0x1c8>
 a68:	00 00       	nop
				_delay_ms(1000);
				LCD_vclearscreen();
 a6a:	0e 94 25 04 	call	0x84a	; 0x84a <LCD_vclearscreen>
				LCD_vsend_string("tries left:");
 a6e:	c3 01       	movw	r24, r6
 a70:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_vsend_string>
				LCD_vsend_char(tries+48);
 a74:	80 2f       	mov	r24, r16
 a76:	0e 94 0a 04 	call	0x814	; 0x814 <LCD_vsend_char>
 a7a:	8f e3       	ldi	r24, 0x3F	; 63
 a7c:	9d e0       	ldi	r25, 0x0D	; 13
 a7e:	a3 e0       	ldi	r26, 0x03	; 3
 a80:	81 50       	subi	r24, 0x01	; 1
 a82:	90 40       	sbci	r25, 0x00	; 0
 a84:	a0 40       	sbci	r26, 0x00	; 0
 a86:	e1 f7       	brne	.-8      	; 0xa80 <main+0x1e0>
 a88:	00 c0       	rjmp	.+0      	; 0xa8a <main+0x1ea>
 a8a:	00 00       	nop
 a8c:	01 50       	subi	r16, 0x01	; 1
 a8e:	80 cf       	rjmp	.-256    	; 0x990 <main+0xf0>
				_delay_ms(1000);				
			}
			else
			{
				LCD_vclearscreen();
 a90:	0e 94 25 04 	call	0x84a	; 0x84a <LCD_vclearscreen>
				LCD_vsend_string("wrong password");
 a94:	83 ea       	ldi	r24, 0xA3	; 163
 a96:	90 e0       	ldi	r25, 0x00	; 0
 a98:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_vsend_string>
				LCD_vmovecursor(2,1);
 a9c:	82 e0       	ldi	r24, 0x02	; 2
 a9e:	61 e0       	ldi	r22, 0x01	; 1
 aa0:	0e 94 2f 04 	call	0x85e	; 0x85e <LCD_vmovecursor>
				LCD_vsend_string("safe closed");
 aa4:	8e eb       	ldi	r24, 0xBE	; 190
 aa6:	90 e0       	ldi	r25, 0x00	; 0
 aa8:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_vsend_string>
				flag=1;
			}//end of else
		}//end of else
   }//end of while
	      
 aac:	80 e0       	ldi	r24, 0x00	; 0
 aae:	90 e0       	ldi	r25, 0x00	; 0
 ab0:	df 91       	pop	r29
 ab2:	cf 91       	pop	r28
 ab4:	1f 91       	pop	r17
 ab6:	0f 91       	pop	r16
 ab8:	ff 90       	pop	r15
 aba:	ef 90       	pop	r14
 abc:	df 90       	pop	r13
 abe:	bf 90       	pop	r11
 ac0:	af 90       	pop	r10
 ac2:	9f 90       	pop	r9
 ac4:	8f 90       	pop	r8
 ac6:	7f 90       	pop	r7
 ac8:	6f 90       	pop	r6
 aca:	5f 90       	pop	r5
 acc:	4f 90       	pop	r4
 ace:	3f 90       	pop	r3
 ad0:	2f 90       	pop	r2
 ad2:	08 95       	ret

00000ad4 <timer_CTC_init_interrupt>:
#include <avr/io.h>
#include <avr/interrupt.h>
void timer_CTC_init_interrupt(void)
{
	/* select CTC mode*/
	SetBit(TCCR0,WGM01);
 ad4:	83 b7       	in	r24, 0x33	; 51
 ad6:	88 60       	ori	r24, 0x08	; 8
 ad8:	83 bf       	out	0x33, r24	; 51
	/* load a value in OCR0 */
	OCR0=80;
 ada:	80 e5       	ldi	r24, 0x50	; 80
 adc:	8c bf       	out	0x3c, r24	; 60
	/* select timer clock */	
	SetBit(TCCR0,CS00);
 ade:	83 b7       	in	r24, 0x33	; 51
 ae0:	81 60       	ori	r24, 0x01	; 1
 ae2:	83 bf       	out	0x33, r24	; 51
	SetBit(TCCR0,CS02);
 ae4:	83 b7       	in	r24, 0x33	; 51
 ae6:	84 60       	ori	r24, 0x04	; 4
 ae8:	83 bf       	out	0x33, r24	; 51
	/* enable interrupt*/
	sei();
 aea:	78 94       	sei
	SetBit(TIMSK,OCIE0);
 aec:	89 b7       	in	r24, 0x39	; 57
 aee:	82 60       	ori	r24, 0x02	; 2
 af0:	89 bf       	out	0x39, r24	; 57
}
 af2:	08 95       	ret

00000af4 <timer_wave_nonPWM>:


void timer_wave_nonPWM(void)
{
	/* set OC0 as output pin */
	SetBit(DDRB,3);
 af4:	bb 9a       	sbi	0x17, 3	; 23
	/* select CTC mode*/
	SetBit(TCCR0,WGM01);
 af6:	83 b7       	in	r24, 0x33	; 51
 af8:	88 60       	ori	r24, 0x08	; 8
 afa:	83 bf       	out	0x33, r24	; 51
	/* load a value in OCR0 */
	OCR0=64;
 afc:	80 e4       	ldi	r24, 0x40	; 64
 afe:	8c bf       	out	0x3c, r24	; 60
	/* select timer clock */
	SetBit(TCCR0,CS00);
 b00:	83 b7       	in	r24, 0x33	; 51
 b02:	81 60       	ori	r24, 0x01	; 1
 b04:	83 bf       	out	0x33, r24	; 51
	SetBit(TCCR0,CS02);
 b06:	83 b7       	in	r24, 0x33	; 51
 b08:	84 60       	ori	r24, 0x04	; 4
 b0a:	83 bf       	out	0x33, r24	; 51
	/* toggle OC0 on compare match*/
	SetBit(TCCR0,COM00);
 b0c:	83 b7       	in	r24, 0x33	; 51
 b0e:	80 61       	ori	r24, 0x10	; 16
 b10:	83 bf       	out	0x33, r24	; 51
}
 b12:	08 95       	ret

00000b14 <timer1_wave_fastPWM>:

void timer1_wave_fastPWM(double value)
{
	/* set OC1A as output pin */
	SetBit(DDRD,5);
 b14:	8d 9a       	sbi	0x11, 5	; 17
	/* select fast PWM mode*/
	SetBit(TCCR1A,WGM11);
 b16:	2f b5       	in	r18, 0x2f	; 47
 b18:	22 60       	ori	r18, 0x02	; 2
 b1a:	2f bd       	out	0x2f, r18	; 47
	SetBit(TCCR1B,WGM12);
 b1c:	2e b5       	in	r18, 0x2e	; 46
 b1e:	28 60       	ori	r18, 0x08	; 8
 b20:	2e bd       	out	0x2e, r18	; 46
	SetBit(TCCR1B,WGM13);
 b22:	2e b5       	in	r18, 0x2e	; 46
 b24:	20 61       	ori	r18, 0x10	; 16
 b26:	2e bd       	out	0x2e, r18	; 46
	/* load a value in OCR1A,ICR1 */
	OCR1A=value*1000;
 b28:	20 e0       	ldi	r18, 0x00	; 0
 b2a:	30 e0       	ldi	r19, 0x00	; 0
 b2c:	4a e7       	ldi	r20, 0x7A	; 122
 b2e:	54 e4       	ldi	r21, 0x44	; 68
 b30:	0e 94 13 06 	call	0xc26	; 0xc26 <__mulsf3>
 b34:	0e 94 be 05 	call	0xb7c	; 0xb7c <__fixunssfsi>
 b38:	dc 01       	movw	r26, r24
 b3a:	cb 01       	movw	r24, r22
 b3c:	9b bd       	out	0x2b, r25	; 43
 b3e:	8a bd       	out	0x2a, r24	; 42
	ICR1=19999;
 b40:	8f e1       	ldi	r24, 0x1F	; 31
 b42:	9e e4       	ldi	r25, 0x4E	; 78
 b44:	97 bd       	out	0x27, r25	; 39
 b46:	86 bd       	out	0x26, r24	; 38
	/* select timer clock, no prescaling */
	SetBit(TCCR1B,CS10);
 b48:	8e b5       	in	r24, 0x2e	; 46
 b4a:	81 60       	ori	r24, 0x01	; 1
 b4c:	8e bd       	out	0x2e, r24	; 46
	/* clear OC1A on compare match, set OC1A at BOTTOM,(non inverting mode)*/
	SetBit(TCCR1A,COM1A1);
 b4e:	8f b5       	in	r24, 0x2f	; 47
 b50:	80 68       	ori	r24, 0x80	; 128
 b52:	8f bd       	out	0x2f, r24	; 47
}
 b54:	08 95       	ret

00000b56 <timer_wave_phasecorrectPWM>:


void timer_wave_phasecorrectPWM(void)
{
	/* set OC0 as output pin */
	SetBit(DDRB,3);
 b56:	bb 9a       	sbi	0x17, 3	; 23
	/* select phase correct PWM mode*/
	SetBit(TCCR0,WGM00);
 b58:	83 b7       	in	r24, 0x33	; 51
 b5a:	80 64       	ori	r24, 0x40	; 64
 b5c:	83 bf       	out	0x33, r24	; 51
	/* load a value in OCR0 */
	OCR0=64;
 b5e:	80 e4       	ldi	r24, 0x40	; 64
 b60:	8c bf       	out	0x3c, r24	; 60
	/* select timer clock */
	SetBit(TCCR0,CS00);
 b62:	83 b7       	in	r24, 0x33	; 51
 b64:	81 60       	ori	r24, 0x01	; 1
 b66:	83 bf       	out	0x33, r24	; 51
	SetBit(TCCR0,CS02);
 b68:	83 b7       	in	r24, 0x33	; 51
 b6a:	84 60       	ori	r24, 0x04	; 4
 b6c:	83 bf       	out	0x33, r24	; 51
	/* Set OC0 on compare match when up-counting. Clear OC0 on compare match when down counting.*/
	SetBit(TCCR0,COM00);
 b6e:	83 b7       	in	r24, 0x33	; 51
 b70:	80 61       	ori	r24, 0x10	; 16
 b72:	83 bf       	out	0x33, r24	; 51
	SetBit(TCCR0,COM01);
 b74:	83 b7       	in	r24, 0x33	; 51
 b76:	80 62       	ori	r24, 0x20	; 32
 b78:	83 bf       	out	0x33, r24	; 51
}
 b7a:	08 95       	ret

00000b7c <__fixunssfsi>:
 b7c:	33 d0       	rcall	.+102    	; 0xbe4 <__fp_splitA>
 b7e:	88 f0       	brcs	.+34     	; 0xba2 <__fixunssfsi+0x26>
 b80:	9f 57       	subi	r25, 0x7F	; 127
 b82:	90 f0       	brcs	.+36     	; 0xba8 <__fixunssfsi+0x2c>
 b84:	b9 2f       	mov	r27, r25
 b86:	99 27       	eor	r25, r25
 b88:	b7 51       	subi	r27, 0x17	; 23
 b8a:	a0 f0       	brcs	.+40     	; 0xbb4 <__fixunssfsi+0x38>
 b8c:	d1 f0       	breq	.+52     	; 0xbc2 <__fixunssfsi+0x46>
 b8e:	66 0f       	add	r22, r22
 b90:	77 1f       	adc	r23, r23
 b92:	88 1f       	adc	r24, r24
 b94:	99 1f       	adc	r25, r25
 b96:	1a f0       	brmi	.+6      	; 0xb9e <__fixunssfsi+0x22>
 b98:	ba 95       	dec	r27
 b9a:	c9 f7       	brne	.-14     	; 0xb8e <__fixunssfsi+0x12>
 b9c:	12 c0       	rjmp	.+36     	; 0xbc2 <__fixunssfsi+0x46>
 b9e:	b1 30       	cpi	r27, 0x01	; 1
 ba0:	81 f0       	breq	.+32     	; 0xbc2 <__fixunssfsi+0x46>
 ba2:	3a d0       	rcall	.+116    	; 0xc18 <__fp_zero>
 ba4:	b1 e0       	ldi	r27, 0x01	; 1
 ba6:	08 95       	ret
 ba8:	37 c0       	rjmp	.+110    	; 0xc18 <__fp_zero>
 baa:	67 2f       	mov	r22, r23
 bac:	78 2f       	mov	r23, r24
 bae:	88 27       	eor	r24, r24
 bb0:	b8 5f       	subi	r27, 0xF8	; 248
 bb2:	39 f0       	breq	.+14     	; 0xbc2 <__fixunssfsi+0x46>
 bb4:	b9 3f       	cpi	r27, 0xF9	; 249
 bb6:	cc f3       	brlt	.-14     	; 0xbaa <__fixunssfsi+0x2e>
 bb8:	86 95       	lsr	r24
 bba:	77 95       	ror	r23
 bbc:	67 95       	ror	r22
 bbe:	b3 95       	inc	r27
 bc0:	d9 f7       	brne	.-10     	; 0xbb8 <__fixunssfsi+0x3c>
 bc2:	3e f4       	brtc	.+14     	; 0xbd2 <__fixunssfsi+0x56>
 bc4:	90 95       	com	r25
 bc6:	80 95       	com	r24
 bc8:	70 95       	com	r23
 bca:	61 95       	neg	r22
 bcc:	7f 4f       	sbci	r23, 0xFF	; 255
 bce:	8f 4f       	sbci	r24, 0xFF	; 255
 bd0:	9f 4f       	sbci	r25, 0xFF	; 255
 bd2:	08 95       	ret

00000bd4 <__fp_split3>:
 bd4:	57 fd       	sbrc	r21, 7
 bd6:	90 58       	subi	r25, 0x80	; 128
 bd8:	44 0f       	add	r20, r20
 bda:	55 1f       	adc	r21, r21
 bdc:	59 f0       	breq	.+22     	; 0xbf4 <__fp_splitA+0x10>
 bde:	5f 3f       	cpi	r21, 0xFF	; 255
 be0:	71 f0       	breq	.+28     	; 0xbfe <__fp_splitA+0x1a>
 be2:	47 95       	ror	r20

00000be4 <__fp_splitA>:
 be4:	88 0f       	add	r24, r24
 be6:	97 fb       	bst	r25, 7
 be8:	99 1f       	adc	r25, r25
 bea:	61 f0       	breq	.+24     	; 0xc04 <__fp_splitA+0x20>
 bec:	9f 3f       	cpi	r25, 0xFF	; 255
 bee:	79 f0       	breq	.+30     	; 0xc0e <__fp_splitA+0x2a>
 bf0:	87 95       	ror	r24
 bf2:	08 95       	ret
 bf4:	12 16       	cp	r1, r18
 bf6:	13 06       	cpc	r1, r19
 bf8:	14 06       	cpc	r1, r20
 bfa:	55 1f       	adc	r21, r21
 bfc:	f2 cf       	rjmp	.-28     	; 0xbe2 <__fp_split3+0xe>
 bfe:	46 95       	lsr	r20
 c00:	f1 df       	rcall	.-30     	; 0xbe4 <__fp_splitA>
 c02:	08 c0       	rjmp	.+16     	; 0xc14 <__fp_splitA+0x30>
 c04:	16 16       	cp	r1, r22
 c06:	17 06       	cpc	r1, r23
 c08:	18 06       	cpc	r1, r24
 c0a:	99 1f       	adc	r25, r25
 c0c:	f1 cf       	rjmp	.-30     	; 0xbf0 <__fp_splitA+0xc>
 c0e:	86 95       	lsr	r24
 c10:	71 05       	cpc	r23, r1
 c12:	61 05       	cpc	r22, r1
 c14:	08 94       	sec
 c16:	08 95       	ret

00000c18 <__fp_zero>:
 c18:	e8 94       	clt

00000c1a <__fp_szero>:
 c1a:	bb 27       	eor	r27, r27
 c1c:	66 27       	eor	r22, r22
 c1e:	77 27       	eor	r23, r23
 c20:	cb 01       	movw	r24, r22
 c22:	97 f9       	bld	r25, 7
 c24:	08 95       	ret

00000c26 <__mulsf3>:
 c26:	0b d0       	rcall	.+22     	; 0xc3e <__mulsf3x>
 c28:	78 c0       	rjmp	.+240    	; 0xd1a <__fp_round>
 c2a:	69 d0       	rcall	.+210    	; 0xcfe <__fp_pscA>
 c2c:	28 f0       	brcs	.+10     	; 0xc38 <__mulsf3+0x12>
 c2e:	6e d0       	rcall	.+220    	; 0xd0c <__fp_pscB>
 c30:	18 f0       	brcs	.+6      	; 0xc38 <__mulsf3+0x12>
 c32:	95 23       	and	r25, r21
 c34:	09 f0       	breq	.+2      	; 0xc38 <__mulsf3+0x12>
 c36:	5a c0       	rjmp	.+180    	; 0xcec <__fp_inf>
 c38:	5f c0       	rjmp	.+190    	; 0xcf8 <__fp_nan>
 c3a:	11 24       	eor	r1, r1
 c3c:	ee cf       	rjmp	.-36     	; 0xc1a <__fp_szero>

00000c3e <__mulsf3x>:
 c3e:	ca df       	rcall	.-108    	; 0xbd4 <__fp_split3>
 c40:	a0 f3       	brcs	.-24     	; 0xc2a <__mulsf3+0x4>

00000c42 <__mulsf3_pse>:
 c42:	95 9f       	mul	r25, r21
 c44:	d1 f3       	breq	.-12     	; 0xc3a <__mulsf3+0x14>
 c46:	95 0f       	add	r25, r21
 c48:	50 e0       	ldi	r21, 0x00	; 0
 c4a:	55 1f       	adc	r21, r21
 c4c:	62 9f       	mul	r22, r18
 c4e:	f0 01       	movw	r30, r0
 c50:	72 9f       	mul	r23, r18
 c52:	bb 27       	eor	r27, r27
 c54:	f0 0d       	add	r31, r0
 c56:	b1 1d       	adc	r27, r1
 c58:	63 9f       	mul	r22, r19
 c5a:	aa 27       	eor	r26, r26
 c5c:	f0 0d       	add	r31, r0
 c5e:	b1 1d       	adc	r27, r1
 c60:	aa 1f       	adc	r26, r26
 c62:	64 9f       	mul	r22, r20
 c64:	66 27       	eor	r22, r22
 c66:	b0 0d       	add	r27, r0
 c68:	a1 1d       	adc	r26, r1
 c6a:	66 1f       	adc	r22, r22
 c6c:	82 9f       	mul	r24, r18
 c6e:	22 27       	eor	r18, r18
 c70:	b0 0d       	add	r27, r0
 c72:	a1 1d       	adc	r26, r1
 c74:	62 1f       	adc	r22, r18
 c76:	73 9f       	mul	r23, r19
 c78:	b0 0d       	add	r27, r0
 c7a:	a1 1d       	adc	r26, r1
 c7c:	62 1f       	adc	r22, r18
 c7e:	83 9f       	mul	r24, r19
 c80:	a0 0d       	add	r26, r0
 c82:	61 1d       	adc	r22, r1
 c84:	22 1f       	adc	r18, r18
 c86:	74 9f       	mul	r23, r20
 c88:	33 27       	eor	r19, r19
 c8a:	a0 0d       	add	r26, r0
 c8c:	61 1d       	adc	r22, r1
 c8e:	23 1f       	adc	r18, r19
 c90:	84 9f       	mul	r24, r20
 c92:	60 0d       	add	r22, r0
 c94:	21 1d       	adc	r18, r1
 c96:	82 2f       	mov	r24, r18
 c98:	76 2f       	mov	r23, r22
 c9a:	6a 2f       	mov	r22, r26
 c9c:	11 24       	eor	r1, r1
 c9e:	9f 57       	subi	r25, 0x7F	; 127
 ca0:	50 40       	sbci	r21, 0x00	; 0
 ca2:	8a f0       	brmi	.+34     	; 0xcc6 <__mulsf3_pse+0x84>
 ca4:	e1 f0       	breq	.+56     	; 0xcde <__mulsf3_pse+0x9c>
 ca6:	88 23       	and	r24, r24
 ca8:	4a f0       	brmi	.+18     	; 0xcbc <__mulsf3_pse+0x7a>
 caa:	ee 0f       	add	r30, r30
 cac:	ff 1f       	adc	r31, r31
 cae:	bb 1f       	adc	r27, r27
 cb0:	66 1f       	adc	r22, r22
 cb2:	77 1f       	adc	r23, r23
 cb4:	88 1f       	adc	r24, r24
 cb6:	91 50       	subi	r25, 0x01	; 1
 cb8:	50 40       	sbci	r21, 0x00	; 0
 cba:	a9 f7       	brne	.-22     	; 0xca6 <__mulsf3_pse+0x64>
 cbc:	9e 3f       	cpi	r25, 0xFE	; 254
 cbe:	51 05       	cpc	r21, r1
 cc0:	70 f0       	brcs	.+28     	; 0xcde <__mulsf3_pse+0x9c>
 cc2:	14 c0       	rjmp	.+40     	; 0xcec <__fp_inf>
 cc4:	aa cf       	rjmp	.-172    	; 0xc1a <__fp_szero>
 cc6:	5f 3f       	cpi	r21, 0xFF	; 255
 cc8:	ec f3       	brlt	.-6      	; 0xcc4 <__mulsf3_pse+0x82>
 cca:	98 3e       	cpi	r25, 0xE8	; 232
 ccc:	dc f3       	brlt	.-10     	; 0xcc4 <__mulsf3_pse+0x82>
 cce:	86 95       	lsr	r24
 cd0:	77 95       	ror	r23
 cd2:	67 95       	ror	r22
 cd4:	b7 95       	ror	r27
 cd6:	f7 95       	ror	r31
 cd8:	e7 95       	ror	r30
 cda:	9f 5f       	subi	r25, 0xFF	; 255
 cdc:	c1 f7       	brne	.-16     	; 0xcce <__mulsf3_pse+0x8c>
 cde:	fe 2b       	or	r31, r30
 ce0:	88 0f       	add	r24, r24
 ce2:	91 1d       	adc	r25, r1
 ce4:	96 95       	lsr	r25
 ce6:	87 95       	ror	r24
 ce8:	97 f9       	bld	r25, 7
 cea:	08 95       	ret

00000cec <__fp_inf>:
 cec:	97 f9       	bld	r25, 7
 cee:	9f 67       	ori	r25, 0x7F	; 127
 cf0:	80 e8       	ldi	r24, 0x80	; 128
 cf2:	70 e0       	ldi	r23, 0x00	; 0
 cf4:	60 e0       	ldi	r22, 0x00	; 0
 cf6:	08 95       	ret

00000cf8 <__fp_nan>:
 cf8:	9f ef       	ldi	r25, 0xFF	; 255
 cfa:	80 ec       	ldi	r24, 0xC0	; 192
 cfc:	08 95       	ret

00000cfe <__fp_pscA>:
 cfe:	00 24       	eor	r0, r0
 d00:	0a 94       	dec	r0
 d02:	16 16       	cp	r1, r22
 d04:	17 06       	cpc	r1, r23
 d06:	18 06       	cpc	r1, r24
 d08:	09 06       	cpc	r0, r25
 d0a:	08 95       	ret

00000d0c <__fp_pscB>:
 d0c:	00 24       	eor	r0, r0
 d0e:	0a 94       	dec	r0
 d10:	12 16       	cp	r1, r18
 d12:	13 06       	cpc	r1, r19
 d14:	14 06       	cpc	r1, r20
 d16:	05 06       	cpc	r0, r21
 d18:	08 95       	ret

00000d1a <__fp_round>:
 d1a:	09 2e       	mov	r0, r25
 d1c:	03 94       	inc	r0
 d1e:	00 0c       	add	r0, r0
 d20:	11 f4       	brne	.+4      	; 0xd26 <__fp_round+0xc>
 d22:	88 23       	and	r24, r24
 d24:	52 f0       	brmi	.+20     	; 0xd3a <__fp_round+0x20>
 d26:	bb 0f       	add	r27, r27
 d28:	40 f4       	brcc	.+16     	; 0xd3a <__fp_round+0x20>
 d2a:	bf 2b       	or	r27, r31
 d2c:	11 f4       	brne	.+4      	; 0xd32 <__fp_round+0x18>
 d2e:	60 ff       	sbrs	r22, 0
 d30:	04 c0       	rjmp	.+8      	; 0xd3a <__fp_round+0x20>
 d32:	6f 5f       	subi	r22, 0xFF	; 255
 d34:	7f 4f       	sbci	r23, 0xFF	; 255
 d36:	8f 4f       	sbci	r24, 0xFF	; 255
 d38:	9f 4f       	sbci	r25, 0xFF	; 255
 d3a:	08 95       	ret

00000d3c <_exit>:
 d3c:	f8 94       	cli

00000d3e <__stop_program>:
 d3e:	ff cf       	rjmp	.-2      	; 0xd3e <__stop_program>
